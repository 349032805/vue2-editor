(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VueEditor"] = factory();
	else
		root["VueEditor"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 12);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENBQU4sRUFBUztBQUNWO0FBQ0EsS0FBRyxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCLEVBQ0NKLElBQUlJLE1BQUo7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(9)\n\nvar Component = __webpack_require__(10)(\n  /* script */\n  __webpack_require__(7),\n  /* template */\n  __webpack_require__(11),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/droyer/Playground-2017/vue2-editor/src/components/VueEditor.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] VueEditor.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-6dfd40d8\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-6dfd40d8\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WdWVFZGl0b3IudnVlP2EzYjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0EscUJBQWtHOztBQUVsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlEQUFpRCxJQUFJO0FBQ3BJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MCxcXFwicmVtb3ZlXFxcIjp0cnVlfSFjc3MtbG9hZGVyIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP2lkPWRhdGEtdi02ZGZkNDBkOCEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVnVlRWRpdG9yLnZ1ZVwiKVxuXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVnVlRWRpdG9yLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/aWQ9ZGF0YS12LTZkZmQ0MGQ4IS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1Z1ZUVkaXRvci52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9Vc2Vycy9kcm95ZXIvUGxheWdyb3VuZC0yMDE3L3Z1ZTItZWRpdG9yL3NyYy9jb21wb25lbnRzL1Z1ZUVkaXRvci52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleSAhPT0gXCJfX2VzTW9kdWxlXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBWdWVFZGl0b3IudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTZkZmQ0MGQ4XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNmRmZDQwZDhcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvVnVlRWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction placeHoldersCount(b64) {\n  var len = b64.length;\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n}\n\nfunction byteLength(b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64);\n}\n\nfunction toByteArray(b64) {\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n  placeHolders = placeHoldersCount(b64);\n\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = tmp >> 16 & 0xFF;\n    arr[L++] = tmp >> 8 & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[L++] = tmp >> 8 & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[tmp << 4 & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    output += lookup[tmp >> 10];\n    output += lookup[tmp >> 4 & 0x3F];\n    output += lookup[tmp << 2 & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('');\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(2);\nvar ieee754 = __webpack_require__(4);\nvar isArray = __webpack_require__(5);\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {\n        return 42;\n      } };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that;\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n    return allocUnsafe(this, arg);\n  }\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n  return createBuffer(that, size);\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that;\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0;\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n      case 'hex':\n        return len >>> 1;\n      case 'base64':\n        return base64ToBytes(string).length;\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0;\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1;\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset; // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n    // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0;\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return '';\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue;\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2llZWU3NTQvaW5kZXguanM/NzBmZSJdLCJuYW1lcyI6WyJleHBvcnRzIiwicmVhZCIsImJ1ZmZlciIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZSIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJpIiwiZCIsInMiLCJOYU4iLCJJbmZpbml0eSIsIk1hdGgiLCJwb3ciLCJ3cml0ZSIsInZhbHVlIiwiYyIsInJ0IiwiYWJzIiwiaXNOYU4iLCJmbG9vciIsImxvZyIsIkxOMiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLElBQVIsR0FBZSxVQUFVQyxNQUFWLEVBQWtCQyxNQUFsQixFQUEwQkMsSUFBMUIsRUFBZ0NDLElBQWhDLEVBQXNDQyxNQUF0QyxFQUE4QztBQUMzRCxNQUFJQyxDQUFKLEVBQU9DLENBQVA7QUFDQSxNQUFJQyxPQUFPSCxTQUFTLENBQVQsR0FBYUQsSUFBYixHQUFvQixDQUEvQjtBQUNBLE1BQUlLLE9BQU8sQ0FBQyxLQUFLRCxJQUFOLElBQWMsQ0FBekI7QUFDQSxNQUFJRSxRQUFRRCxRQUFRLENBQXBCO0FBQ0EsTUFBSUUsUUFBUSxDQUFDLENBQWI7QUFDQSxNQUFJQyxJQUFJVCxPQUFRRSxTQUFTLENBQWpCLEdBQXNCLENBQTlCO0FBQ0EsTUFBSVEsSUFBSVYsT0FBTyxDQUFDLENBQVIsR0FBWSxDQUFwQjtBQUNBLE1BQUlXLElBQUliLE9BQU9DLFNBQVNVLENBQWhCLENBQVI7O0FBRUFBLE9BQUtDLENBQUw7O0FBRUFQLE1BQUlRLElBQUssQ0FBQyxLQUFNLENBQUNILEtBQVIsSUFBa0IsQ0FBM0I7QUFDQUcsUUFBTyxDQUFDSCxLQUFSO0FBQ0FBLFdBQVNILElBQVQ7QUFDQSxTQUFPRyxRQUFRLENBQWYsRUFBa0JMLElBQUlBLElBQUksR0FBSixHQUFVTCxPQUFPQyxTQUFTVSxDQUFoQixDQUFkLEVBQWtDQSxLQUFLQyxDQUF2QyxFQUEwQ0YsU0FBUyxDQUFyRSxFQUF3RSxDQUFFOztBQUUxRUosTUFBSUQsSUFBSyxDQUFDLEtBQU0sQ0FBQ0ssS0FBUixJQUFrQixDQUEzQjtBQUNBTCxRQUFPLENBQUNLLEtBQVI7QUFDQUEsV0FBU1AsSUFBVDtBQUNBLFNBQU9PLFFBQVEsQ0FBZixFQUFrQkosSUFBSUEsSUFBSSxHQUFKLEdBQVVOLE9BQU9DLFNBQVNVLENBQWhCLENBQWQsRUFBa0NBLEtBQUtDLENBQXZDLEVBQTBDRixTQUFTLENBQXJFLEVBQXdFLENBQUU7O0FBRTFFLE1BQUlMLE1BQU0sQ0FBVixFQUFhO0FBQ1hBLFFBQUksSUFBSUksS0FBUjtBQUNELEdBRkQsTUFFTyxJQUFJSixNQUFNRyxJQUFWLEVBQWdCO0FBQ3JCLFdBQU9GLElBQUlRLEdBQUosR0FBVyxDQUFDRCxJQUFJLENBQUMsQ0FBTCxHQUFTLENBQVYsSUFBZUUsUUFBakM7QUFDRCxHQUZNLE1BRUE7QUFDTFQsUUFBSUEsSUFBSVUsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUFSO0FBQ0FFLFFBQUlBLElBQUlJLEtBQVI7QUFDRDtBQUNELFNBQU8sQ0FBQ0ksSUFBSSxDQUFDLENBQUwsR0FBUyxDQUFWLElBQWVQLENBQWYsR0FBbUJVLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlaLElBQUlGLElBQWhCLENBQTFCO0FBQ0QsQ0EvQkQ7O0FBaUNBTCxRQUFRb0IsS0FBUixHQUFnQixVQUFVbEIsTUFBVixFQUFrQm1CLEtBQWxCLEVBQXlCbEIsTUFBekIsRUFBaUNDLElBQWpDLEVBQXVDQyxJQUF2QyxFQUE2Q0MsTUFBN0MsRUFBcUQ7QUFDbkUsTUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVjLENBQVY7QUFDQSxNQUFJYixPQUFPSCxTQUFTLENBQVQsR0FBYUQsSUFBYixHQUFvQixDQUEvQjtBQUNBLE1BQUlLLE9BQU8sQ0FBQyxLQUFLRCxJQUFOLElBQWMsQ0FBekI7QUFDQSxNQUFJRSxRQUFRRCxRQUFRLENBQXBCO0FBQ0EsTUFBSWEsS0FBTWxCLFNBQVMsRUFBVCxHQUFjYSxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBYixJQUFtQkQsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWSxDQUFDLEVBQWIsQ0FBakMsR0FBb0QsQ0FBOUQ7QUFDQSxNQUFJTixJQUFJVCxPQUFPLENBQVAsR0FBWUUsU0FBUyxDQUE3QjtBQUNBLE1BQUlRLElBQUlWLE9BQU8sQ0FBUCxHQUFXLENBQUMsQ0FBcEI7QUFDQSxNQUFJVyxJQUFJTSxRQUFRLENBQVIsSUFBY0EsVUFBVSxDQUFWLElBQWUsSUFBSUEsS0FBSixHQUFZLENBQXpDLEdBQThDLENBQTlDLEdBQWtELENBQTFEOztBQUVBQSxVQUFRSCxLQUFLTSxHQUFMLENBQVNILEtBQVQsQ0FBUjs7QUFFQSxNQUFJSSxNQUFNSixLQUFOLEtBQWdCQSxVQUFVSixRQUE5QixFQUF3QztBQUN0Q1QsUUFBSWlCLE1BQU1KLEtBQU4sSUFBZSxDQUFmLEdBQW1CLENBQXZCO0FBQ0FkLFFBQUlHLElBQUo7QUFDRCxHQUhELE1BR087QUFDTEgsUUFBSVcsS0FBS1EsS0FBTCxDQUFXUixLQUFLUyxHQUFMLENBQVNOLEtBQVQsSUFBa0JILEtBQUtVLEdBQWxDLENBQUo7QUFDQSxRQUFJUCxTQUFTQyxJQUFJSixLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUNaLENBQWIsQ0FBYixJQUFnQyxDQUFwQyxFQUF1QztBQUNyQ0E7QUFDQWUsV0FBSyxDQUFMO0FBQ0Q7QUFDRCxRQUFJZixJQUFJSSxLQUFKLElBQWEsQ0FBakIsRUFBb0I7QUFDbEJVLGVBQVNFLEtBQUtELENBQWQ7QUFDRCxLQUZELE1BRU87QUFDTEQsZUFBU0UsS0FBS0wsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFJUixLQUFoQixDQUFkO0FBQ0Q7QUFDRCxRQUFJVSxRQUFRQyxDQUFSLElBQWEsQ0FBakIsRUFBb0I7QUFDbEJmO0FBQ0FlLFdBQUssQ0FBTDtBQUNEOztBQUVELFFBQUlmLElBQUlJLEtBQUosSUFBYUQsSUFBakIsRUFBdUI7QUFDckJGLFVBQUksQ0FBSjtBQUNBRCxVQUFJRyxJQUFKO0FBQ0QsS0FIRCxNQUdPLElBQUlILElBQUlJLEtBQUosSUFBYSxDQUFqQixFQUFvQjtBQUN6QkgsVUFBSSxDQUFDYSxRQUFRQyxDQUFSLEdBQVksQ0FBYixJQUFrQkosS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUF0QjtBQUNBRSxVQUFJQSxJQUFJSSxLQUFSO0FBQ0QsS0FITSxNQUdBO0FBQ0xILFVBQUlhLFFBQVFILEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlSLFFBQVEsQ0FBcEIsQ0FBUixHQUFpQ08sS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUFyQztBQUNBRSxVQUFJLENBQUo7QUFDRDtBQUNGOztBQUVELFNBQU9GLFFBQVEsQ0FBZixFQUFrQkgsT0FBT0MsU0FBU1UsQ0FBaEIsSUFBcUJMLElBQUksSUFBekIsRUFBK0JLLEtBQUtDLENBQXBDLEVBQXVDTixLQUFLLEdBQTVDLEVBQWlESCxRQUFRLENBQTNFLEVBQThFLENBQUU7O0FBRWhGRSxNQUFLQSxLQUFLRixJQUFOLEdBQWNHLENBQWxCO0FBQ0FDLFVBQVFKLElBQVI7QUFDQSxTQUFPSSxPQUFPLENBQWQsRUFBaUJQLE9BQU9DLFNBQVNVLENBQWhCLElBQXFCTixJQUFJLElBQXpCLEVBQStCTSxLQUFLQyxDQUFwQyxFQUF1Q1AsS0FBSyxHQUE1QyxFQUFpREUsUUFBUSxDQUExRSxFQUE2RSxDQUFFOztBQUUvRVAsU0FBT0MsU0FBU1UsQ0FBVCxHQUFhQyxDQUFwQixLQUEwQkMsSUFBSSxHQUE5QjtBQUNELENBbEREIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaWVlZTc1NC9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzYXJyYXkvaW5kZXguanM/ZWFiYyJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxXQUFXLEdBQUdBLFFBQWxCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCQyxNQUFNQyxPQUFOLElBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUMvQyxTQUFPTCxTQUFTTSxJQUFULENBQWNELEdBQWQsS0FBc0IsZ0JBQTdCO0FBQ0QsQ0FGRCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lzYXJyYXkvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * Quill Editor v1.2.0\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports[\"Quill\"] = factory();else root[\"Quill\"] = factory();\n})(this, function () {\n\treturn (/******/function (modules) {\n\t\t\t// webpackBootstrap\n\t\t\t/******/ // The module cache\n\t\t\t/******/var installedModules = {};\n\n\t\t\t/******/ // The require function\n\t\t\t/******/function __webpack_require__(moduleId) {\n\n\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t/******/if (installedModules[moduleId])\n\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\n\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t/******/exports: {},\n\t\t\t\t\t/******/id: moduleId,\n\t\t\t\t\t/******/loaded: false\n\t\t\t\t\t/******/ };\n\n\t\t\t\t/******/ // Execute the module function\n\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t/******/module.loaded = true;\n\n\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t/******/return module.exports;\n\t\t\t\t/******/\n\t\t\t}\n\n\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t/******/__webpack_require__.m = modules;\n\n\t\t\t/******/ // expose the module cache\n\t\t\t/******/__webpack_require__.c = installedModules;\n\n\t\t\t/******/ // __webpack_public_path__\n\t\t\t/******/__webpack_require__.p = \"\";\n\n\t\t\t/******/ // Load entry module and return exports\n\t\t\t/******/return __webpack_require__(0);\n\t\t\t/******/\n\t\t}(\n\t\t/************************************************************************/\n\t\t/******/[\n\t\t/* 0 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\tmodule.exports = __webpack_require__(53);\n\n\t\t\t/***/\n\t\t},\n\t\t/* 1 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tvar _break = __webpack_require__(30);\n\n\t\t\tvar _break2 = _interopRequireDefault(_break);\n\n\t\t\tvar _container = __webpack_require__(42);\n\n\t\t\tvar _container2 = _interopRequireDefault(_container);\n\n\t\t\tvar _cursor = __webpack_require__(34);\n\n\t\t\tvar _cursor2 = _interopRequireDefault(_cursor);\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tvar _scroll = __webpack_require__(43);\n\n\t\t\tvar _scroll2 = _interopRequireDefault(_scroll);\n\n\t\t\tvar _text = __webpack_require__(33);\n\n\t\t\tvar _text2 = _interopRequireDefault(_text);\n\n\t\t\tvar _clipboard = __webpack_require__(44);\n\n\t\t\tvar _clipboard2 = _interopRequireDefault(_clipboard);\n\n\t\t\tvar _history = __webpack_require__(51);\n\n\t\t\tvar _history2 = _interopRequireDefault(_history);\n\n\t\t\tvar _keyboard = __webpack_require__(52);\n\n\t\t\tvar _keyboard2 = _interopRequireDefault(_keyboard);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\t_quill2.default.register({\n\t\t\t\t'blots/block': _block2.default,\n\t\t\t\t'blots/block/embed': _block.BlockEmbed,\n\t\t\t\t'blots/break': _break2.default,\n\t\t\t\t'blots/container': _container2.default,\n\t\t\t\t'blots/cursor': _cursor2.default,\n\t\t\t\t'blots/embed': _embed2.default,\n\t\t\t\t'blots/inline': _inline2.default,\n\t\t\t\t'blots/scroll': _scroll2.default,\n\t\t\t\t'blots/text': _text2.default,\n\n\t\t\t\t'modules/clipboard': _clipboard2.default,\n\t\t\t\t'modules/history': _history2.default,\n\t\t\t\t'modules/keyboard': _keyboard2.default\n\t\t\t});\n\n\t\t\t_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);\n\n\t\t\tmodule.exports = _quill2.default;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 2 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar container_1 = __webpack_require__(3);\n\t\t\tvar format_1 = __webpack_require__(7);\n\t\t\tvar leaf_1 = __webpack_require__(12);\n\t\t\tvar scroll_1 = __webpack_require__(13);\n\t\t\tvar inline_1 = __webpack_require__(14);\n\t\t\tvar block_1 = __webpack_require__(15);\n\t\t\tvar embed_1 = __webpack_require__(16);\n\t\t\tvar text_1 = __webpack_require__(17);\n\t\t\tvar attributor_1 = __webpack_require__(8);\n\t\t\tvar class_1 = __webpack_require__(10);\n\t\t\tvar style_1 = __webpack_require__(11);\n\t\t\tvar store_1 = __webpack_require__(9);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar Parchment = {\n\t\t\t\tScope: Registry.Scope,\n\t\t\t\tcreate: Registry.create,\n\t\t\t\tfind: Registry.find,\n\t\t\t\tquery: Registry.query,\n\t\t\t\tregister: Registry.register,\n\t\t\t\tContainer: container_1.default,\n\t\t\t\tFormat: format_1.default,\n\t\t\t\tLeaf: leaf_1.default,\n\t\t\t\tEmbed: embed_1.default,\n\t\t\t\tScroll: scroll_1.default,\n\t\t\t\tBlock: block_1.default,\n\t\t\t\tInline: inline_1.default,\n\t\t\t\tText: text_1.default,\n\t\t\t\tAttributor: {\n\t\t\t\t\tAttribute: attributor_1.default,\n\t\t\t\t\tClass: class_1.default,\n\t\t\t\t\tStyle: style_1.default,\n\t\t\t\t\tStore: store_1.default\n\t\t\t\t}\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = Parchment;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 3 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar linked_list_1 = __webpack_require__(4);\n\t\t\tvar shadow_1 = __webpack_require__(5);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar ContainerBlot = function (_super) {\n\t\t\t\t__extends(ContainerBlot, _super);\n\t\t\t\tfunction ContainerBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tContainerBlot.prototype.appendChild = function (other) {\n\t\t\t\t\tthis.insertBefore(other);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.attach = function () {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\t_super.prototype.attach.call(this);\n\t\t\t\t\tthis.children = new linked_list_1.default();\n\t\t\t\t\t// Need to be reversed for if DOM nodes already in order\n\t\t\t\t\t[].slice.call(this.domNode.childNodes).reverse().forEach(function (node) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar child = makeBlot(node);\n\t\t\t\t\t\t\t_this.insertBefore(child, _this.children.head);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tif (err instanceof Registry.ParchmentError) return;else throw err;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.deleteAt = function (index, length) {\n\t\t\t\t\tif (index === 0 && length === this.length()) {\n\t\t\t\t\t\treturn this.remove();\n\t\t\t\t\t}\n\t\t\t\t\tthis.children.forEachAt(index, length, function (child, offset, length) {\n\t\t\t\t\t\tchild.deleteAt(offset, length);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.descendant = function (criteria, index) {\n\t\t\t\t\tvar _a = this.children.find(index),\n\t\t\t\t\t    child = _a[0],\n\t\t\t\t\t    offset = _a[1];\n\t\t\t\t\tif (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n\t\t\t\t\t\treturn [child, offset];\n\t\t\t\t\t} else if (child instanceof ContainerBlot) {\n\t\t\t\t\t\treturn child.descendant(criteria, offset);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [null, -1];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.descendants = function (criteria, index, length) {\n\t\t\t\t\tif (index === void 0) {\n\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (length === void 0) {\n\t\t\t\t\t\tlength = Number.MAX_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\tvar descendants = [],\n\t\t\t\t\t    lengthLeft = length;\n\t\t\t\t\tthis.children.forEachAt(index, length, function (child, index, length) {\n\t\t\t\t\t\tif (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n\t\t\t\t\t\t\tdescendants.push(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (child instanceof ContainerBlot) {\n\t\t\t\t\t\t\tdescendants = descendants.concat(child.descendants(criteria, index, lengthLeft));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlengthLeft -= length;\n\t\t\t\t\t});\n\t\t\t\t\treturn descendants;\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.detach = function () {\n\t\t\t\t\tthis.children.forEach(function (child) {\n\t\t\t\t\t\tchild.detach();\n\t\t\t\t\t});\n\t\t\t\t\t_super.prototype.detach.call(this);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tthis.children.forEachAt(index, length, function (child, offset, length) {\n\t\t\t\t\t\tchild.formatAt(offset, length, name, value);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.insertAt = function (index, value, def) {\n\t\t\t\t\tvar _a = this.children.find(index),\n\t\t\t\t\t    child = _a[0],\n\t\t\t\t\t    offset = _a[1];\n\t\t\t\t\tif (child) {\n\t\t\t\t\t\tchild.insertAt(offset, value, def);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar blot = def == null ? Registry.create('text', value) : Registry.create(value, def);\n\t\t\t\t\t\tthis.appendChild(blot);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {\n\t\t\t\t\tif (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function (child) {\n\t\t\t\t\t\treturn childBlot instanceof child;\n\t\t\t\t\t})) {\n\t\t\t\t\t\tthrow new Registry.ParchmentError(\"Cannot insert \" + childBlot.statics.blotName + \" into \" + this.statics.blotName);\n\t\t\t\t\t}\n\t\t\t\t\tchildBlot.insertInto(this, refBlot);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.length = function () {\n\t\t\t\t\treturn this.children.reduce(function (memo, child) {\n\t\t\t\t\t\treturn memo + child.length();\n\t\t\t\t\t}, 0);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.moveChildren = function (targetParent, refNode) {\n\t\t\t\t\tthis.children.forEach(function (child) {\n\t\t\t\t\t\ttargetParent.insertBefore(child, refNode);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.optimize = function () {\n\t\t\t\t\t_super.prototype.optimize.call(this);\n\t\t\t\t\tif (this.children.length === 0) {\n\t\t\t\t\t\tif (this.statics.defaultChild != null) {\n\t\t\t\t\t\t\tvar child = Registry.create(this.statics.defaultChild);\n\t\t\t\t\t\t\tthis.appendChild(child);\n\t\t\t\t\t\t\tchild.optimize();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.path = function (index, inclusive) {\n\t\t\t\t\tif (inclusive === void 0) {\n\t\t\t\t\t\tinclusive = false;\n\t\t\t\t\t}\n\t\t\t\t\tvar _a = this.children.find(index, inclusive),\n\t\t\t\t\t    child = _a[0],\n\t\t\t\t\t    offset = _a[1];\n\t\t\t\t\tvar position = [[this, index]];\n\t\t\t\t\tif (child instanceof ContainerBlot) {\n\t\t\t\t\t\treturn position.concat(child.path(offset, inclusive));\n\t\t\t\t\t} else if (child != null) {\n\t\t\t\t\t\tposition.push([child, offset]);\n\t\t\t\t\t}\n\t\t\t\t\treturn position;\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.removeChild = function (child) {\n\t\t\t\t\tthis.children.remove(child);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.replace = function (target) {\n\t\t\t\t\tif (target instanceof ContainerBlot) {\n\t\t\t\t\t\ttarget.moveChildren(this);\n\t\t\t\t\t}\n\t\t\t\t\t_super.prototype.replace.call(this, target);\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.split = function (index, force) {\n\t\t\t\t\tif (force === void 0) {\n\t\t\t\t\t\tforce = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!force) {\n\t\t\t\t\t\tif (index === 0) return this;\n\t\t\t\t\t\tif (index === this.length()) return this.next;\n\t\t\t\t\t}\n\t\t\t\t\tvar after = this.clone();\n\t\t\t\t\tthis.parent.insertBefore(after, this.next);\n\t\t\t\t\tthis.children.forEachAt(index, this.length(), function (child, offset, length) {\n\t\t\t\t\t\tchild = child.split(offset, force);\n\t\t\t\t\t\tafter.appendChild(child);\n\t\t\t\t\t});\n\t\t\t\t\treturn after;\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.unwrap = function () {\n\t\t\t\t\tthis.moveChildren(this.parent, this.next);\n\t\t\t\t\tthis.remove();\n\t\t\t\t};\n\t\t\t\tContainerBlot.prototype.update = function (mutations) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tvar addedNodes = [],\n\t\t\t\t\t    removedNodes = [];\n\t\t\t\t\tmutations.forEach(function (mutation) {\n\t\t\t\t\t\tif (mutation.target === _this.domNode && mutation.type === 'childList') {\n\t\t\t\t\t\t\taddedNodes.push.apply(addedNodes, mutation.addedNodes);\n\t\t\t\t\t\t\tremovedNodes.push.apply(removedNodes, mutation.removedNodes);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tremovedNodes.forEach(function (node) {\n\t\t\t\t\t\t// Check node has actually been removed\n\t\t\t\t\t\t// One exception is Chrome does not immediately remove IFRAMEs\n\t\t\t\t\t\t// from DOM but MutationRecord is correct in its reported removal\n\t\t\t\t\t\tif (node.parentNode != null && node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar blot = Registry.find(node);\n\t\t\t\t\t\tif (blot == null) return;\n\t\t\t\t\t\tif (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {\n\t\t\t\t\t\t\tblot.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\taddedNodes.filter(function (node) {\n\t\t\t\t\t\treturn node.parentNode == _this.domNode;\n\t\t\t\t\t}).sort(function (a, b) {\n\t\t\t\t\t\tif (a === b) return 0;\n\t\t\t\t\t\tif (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}).forEach(function (node) {\n\t\t\t\t\t\tvar refBlot = null;\n\t\t\t\t\t\tif (node.nextSibling != null) {\n\t\t\t\t\t\t\trefBlot = Registry.find(node.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar blot = makeBlot(node);\n\t\t\t\t\t\tif (blot.next != refBlot || blot.next == null) {\n\t\t\t\t\t\t\tif (blot.parent != null) {\n\t\t\t\t\t\t\t\tblot.parent.removeChild(_this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this.insertBefore(blot, refBlot);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treturn ContainerBlot;\n\t\t\t}(shadow_1.default);\n\t\t\tfunction makeBlot(node) {\n\t\t\t\tvar blot = Registry.find(node);\n\t\t\t\tif (blot == null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tblot = Registry.create(node);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tblot = Registry.create(Registry.Scope.INLINE);\n\t\t\t\t\t\t[].slice.call(node.childNodes).forEach(function (child) {\n\t\t\t\t\t\t\tblot.domNode.appendChild(child);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tnode.parentNode.replaceChild(blot.domNode, node);\n\t\t\t\t\t\tblot.attach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn blot;\n\t\t\t}\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = ContainerBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 4 */\n\t\t/***/function (module, exports) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar LinkedList = function () {\n\t\t\t\tfunction LinkedList() {\n\t\t\t\t\tthis.head = this.tail = undefined;\n\t\t\t\t\tthis.length = 0;\n\t\t\t\t}\n\t\t\t\tLinkedList.prototype.append = function () {\n\t\t\t\t\tvar nodes = [];\n\t\t\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\t\t\tnodes[_i] = arguments[_i];\n\t\t\t\t\t}\n\t\t\t\t\tthis.insertBefore(nodes[0], undefined);\n\t\t\t\t\tif (nodes.length > 1) {\n\t\t\t\t\t\tthis.append.apply(this, nodes.slice(1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.contains = function (node) {\n\t\t\t\t\tvar cur,\n\t\t\t\t\t    next = this.iterator();\n\t\t\t\t\twhile (cur = next()) {\n\t\t\t\t\t\tif (cur === node) return true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.insertBefore = function (node, refNode) {\n\t\t\t\t\tnode.next = refNode;\n\t\t\t\t\tif (refNode != null) {\n\t\t\t\t\t\tnode.prev = refNode.prev;\n\t\t\t\t\t\tif (refNode.prev != null) {\n\t\t\t\t\t\t\trefNode.prev.next = node;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trefNode.prev = node;\n\t\t\t\t\t\tif (refNode === this.head) {\n\t\t\t\t\t\t\tthis.head = node;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this.tail != null) {\n\t\t\t\t\t\tthis.tail.next = node;\n\t\t\t\t\t\tnode.prev = this.tail;\n\t\t\t\t\t\tthis.tail = node;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.prev = undefined;\n\t\t\t\t\t\tthis.head = this.tail = node;\n\t\t\t\t\t}\n\t\t\t\t\tthis.length += 1;\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.offset = function (target) {\n\t\t\t\t\tvar index = 0,\n\t\t\t\t\t    cur = this.head;\n\t\t\t\t\twhile (cur != null) {\n\t\t\t\t\t\tif (cur === target) return index;\n\t\t\t\t\t\tindex += cur.length();\n\t\t\t\t\t\tcur = cur.next;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.remove = function (node) {\n\t\t\t\t\tif (!this.contains(node)) return;\n\t\t\t\t\tif (node.prev != null) node.prev.next = node.next;\n\t\t\t\t\tif (node.next != null) node.next.prev = node.prev;\n\t\t\t\t\tif (node === this.head) this.head = node.next;\n\t\t\t\t\tif (node === this.tail) this.tail = node.prev;\n\t\t\t\t\tthis.length -= 1;\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.iterator = function (curNode) {\n\t\t\t\t\tif (curNode === void 0) {\n\t\t\t\t\t\tcurNode = this.head;\n\t\t\t\t\t}\n\t\t\t\t\t// TODO use yield when we can\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tvar ret = curNode;\n\t\t\t\t\t\tif (curNode != null) curNode = curNode.next;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.find = function (index, inclusive) {\n\t\t\t\t\tif (inclusive === void 0) {\n\t\t\t\t\t\tinclusive = false;\n\t\t\t\t\t}\n\t\t\t\t\tvar cur,\n\t\t\t\t\t    next = this.iterator();\n\t\t\t\t\twhile (cur = next()) {\n\t\t\t\t\t\tvar length_1 = cur.length();\n\t\t\t\t\t\tif (index < length_1 || inclusive && index === length_1 && (cur.next == null || cur.next.length() !== 0)) {\n\t\t\t\t\t\t\treturn [cur, index];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tindex -= length_1;\n\t\t\t\t\t}\n\t\t\t\t\treturn [null, 0];\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.forEach = function (callback) {\n\t\t\t\t\tvar cur,\n\t\t\t\t\t    next = this.iterator();\n\t\t\t\t\twhile (cur = next()) {\n\t\t\t\t\t\tcallback(cur);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.forEachAt = function (index, length, callback) {\n\t\t\t\t\tif (length <= 0) return;\n\t\t\t\t\tvar _a = this.find(index),\n\t\t\t\t\t    startNode = _a[0],\n\t\t\t\t\t    offset = _a[1];\n\t\t\t\t\tvar cur,\n\t\t\t\t\t    curIndex = index - offset,\n\t\t\t\t\t    next = this.iterator(startNode);\n\t\t\t\t\twhile ((cur = next()) && curIndex < index + length) {\n\t\t\t\t\t\tvar curLength = cur.length();\n\t\t\t\t\t\tif (index > curIndex) {\n\t\t\t\t\t\t\tcallback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(cur, 0, Math.min(curLength, index + length - curIndex));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurIndex += curLength;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.map = function (callback) {\n\t\t\t\t\treturn this.reduce(function (memo, cur) {\n\t\t\t\t\t\tmemo.push(callback(cur));\n\t\t\t\t\t\treturn memo;\n\t\t\t\t\t}, []);\n\t\t\t\t};\n\t\t\t\tLinkedList.prototype.reduce = function (callback, memo) {\n\t\t\t\t\tvar cur,\n\t\t\t\t\t    next = this.iterator();\n\t\t\t\t\twhile (cur = next()) {\n\t\t\t\t\t\tmemo = callback(memo, cur);\n\t\t\t\t\t}\n\t\t\t\t\treturn memo;\n\t\t\t\t};\n\t\t\t\treturn LinkedList;\n\t\t\t}();\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = LinkedList;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 5 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar ShadowBlot = function () {\n\t\t\t\tfunction ShadowBlot(domNode) {\n\t\t\t\t\tthis.domNode = domNode;\n\t\t\t\t\tthis.attach();\n\t\t\t\t}\n\t\t\t\tObject.defineProperty(ShadowBlot.prototype, \"statics\", {\n\t\t\t\t\t// Hack for accessing inherited static methods\n\t\t\t\t\tget: function get() {\n\t\t\t\t\t\treturn this.constructor;\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true\n\t\t\t\t});\n\t\t\t\tShadowBlot.create = function (value) {\n\t\t\t\t\tif (this.tagName == null) {\n\t\t\t\t\t\tthrow new Registry.ParchmentError('Blot definition missing tagName');\n\t\t\t\t\t}\n\t\t\t\t\tvar node;\n\t\t\t\t\tif (Array.isArray(this.tagName)) {\n\t\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\t\tvalue = value.toUpperCase();\n\t\t\t\t\t\t\tif (parseInt(value).toString() === value) {\n\t\t\t\t\t\t\t\tvalue = parseInt(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof value === 'number') {\n\t\t\t\t\t\t\tnode = document.createElement(this.tagName[value - 1]);\n\t\t\t\t\t\t} else if (this.tagName.indexOf(value) > -1) {\n\t\t\t\t\t\t\tnode = document.createElement(value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = document.createElement(this.tagName[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = document.createElement(this.tagName);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\tnode.classList.add(this.className);\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.attach = function () {\n\t\t\t\t\tthis.domNode[Registry.DATA_KEY] = { blot: this };\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.clone = function () {\n\t\t\t\t\tvar domNode = this.domNode.cloneNode();\n\t\t\t\t\treturn Registry.create(domNode);\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.detach = function () {\n\t\t\t\t\tif (this.parent != null) this.parent.removeChild(this);\n\t\t\t\t\tdelete this.domNode[Registry.DATA_KEY];\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.deleteAt = function (index, length) {\n\t\t\t\t\tvar blot = this.isolate(index, length);\n\t\t\t\t\tblot.remove();\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tvar blot = this.isolate(index, length);\n\t\t\t\t\tif (Registry.query(name, Registry.Scope.BLOT) != null && value) {\n\t\t\t\t\t\tblot.wrap(name, value);\n\t\t\t\t\t} else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {\n\t\t\t\t\t\tvar parent_1 = Registry.create(this.statics.scope);\n\t\t\t\t\t\tblot.wrap(parent_1);\n\t\t\t\t\t\tparent_1.format(name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.insertAt = function (index, value, def) {\n\t\t\t\t\tvar blot = def == null ? Registry.create('text', value) : Registry.create(value, def);\n\t\t\t\t\tvar ref = this.split(index);\n\t\t\t\t\tthis.parent.insertBefore(blot, ref);\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {\n\t\t\t\t\tif (this.parent != null) {\n\t\t\t\t\t\tthis.parent.children.remove(this);\n\t\t\t\t\t}\n\t\t\t\t\tparentBlot.children.insertBefore(this, refBlot);\n\t\t\t\t\tif (refBlot != null) {\n\t\t\t\t\t\tvar refDomNode = refBlot.domNode;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.next == null || this.domNode.nextSibling != refDomNode) {\n\t\t\t\t\t\tparentBlot.domNode.insertBefore(this.domNode, typeof refDomNode !== 'undefined' ? refDomNode : null);\n\t\t\t\t\t}\n\t\t\t\t\tthis.parent = parentBlot;\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.isolate = function (index, length) {\n\t\t\t\t\tvar target = this.split(index);\n\t\t\t\t\ttarget.split(length);\n\t\t\t\t\treturn target;\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.length = function () {\n\t\t\t\t\treturn 1;\n\t\t\t\t};\n\t\t\t\t;\n\t\t\t\tShadowBlot.prototype.offset = function (root) {\n\t\t\t\t\tif (root === void 0) {\n\t\t\t\t\t\troot = this.parent;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.parent == null || this == root) return 0;\n\t\t\t\t\treturn this.parent.children.offset(this) + this.parent.offset(root);\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.optimize = function () {\n\t\t\t\t\t// TODO clean up once we use WeakMap\n\t\t\t\t\tif (this.domNode[Registry.DATA_KEY] != null) {\n\t\t\t\t\t\tdelete this.domNode[Registry.DATA_KEY].mutations;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.remove = function () {\n\t\t\t\t\tif (this.domNode.parentNode != null) {\n\t\t\t\t\t\tthis.domNode.parentNode.removeChild(this.domNode);\n\t\t\t\t\t}\n\t\t\t\t\tthis.detach();\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.replace = function (target) {\n\t\t\t\t\tif (target.parent == null) return;\n\t\t\t\t\ttarget.parent.insertBefore(this, target.next);\n\t\t\t\t\ttarget.remove();\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.replaceWith = function (name, value) {\n\t\t\t\t\tvar replacement = typeof name === 'string' ? Registry.create(name, value) : name;\n\t\t\t\t\treplacement.replace(this);\n\t\t\t\t\treturn replacement;\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.split = function (index, force) {\n\t\t\t\t\treturn index === 0 ? this : this.next;\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.update = function (mutations) {\n\t\t\t\t\tif (mutations === void 0) {\n\t\t\t\t\t\tmutations = [];\n\t\t\t\t\t}\n\t\t\t\t\t// Nothing to do by default\n\t\t\t\t};\n\t\t\t\tShadowBlot.prototype.wrap = function (name, value) {\n\t\t\t\t\tvar wrapper = typeof name === 'string' ? Registry.create(name, value) : name;\n\t\t\t\t\tif (this.parent != null) {\n\t\t\t\t\t\tthis.parent.insertBefore(wrapper, this.next);\n\t\t\t\t\t}\n\t\t\t\t\twrapper.appendChild(this);\n\t\t\t\t\treturn wrapper;\n\t\t\t\t};\n\t\t\t\treturn ShadowBlot;\n\t\t\t}();\n\t\t\tShadowBlot.blotName = 'abstract';\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = ShadowBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 6 */\n\t\t/***/function (module, exports) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar ParchmentError = function (_super) {\n\t\t\t\t__extends(ParchmentError, _super);\n\t\t\t\tfunction ParchmentError(message) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tmessage = '[Parchment] ' + message;\n\t\t\t\t\t_this = _super.call(this, message) || this;\n\t\t\t\t\t_this.message = message;\n\t\t\t\t\t_this.name = _this.constructor.name;\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\t\t\t\treturn ParchmentError;\n\t\t\t}(Error);\n\t\t\texports.ParchmentError = ParchmentError;\n\t\t\tvar attributes = {};\n\t\t\tvar classes = {};\n\t\t\tvar tags = {};\n\t\t\tvar types = {};\n\t\t\texports.DATA_KEY = '__blot';\n\t\t\tvar Scope;\n\t\t\t(function (Scope) {\n\t\t\t\tScope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n\t\t\t\tScope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n\t\t\t\tScope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n\t\t\t\tScope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n\t\t\t\tScope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n\t\t\t\tScope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n\t\t\t\tScope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n\t\t\t\tScope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n\t\t\t\tScope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n\t\t\t\tScope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n\t\t\t\tScope[Scope[\"ANY\"] = 15] = \"ANY\";\n\t\t\t})(Scope = exports.Scope || (exports.Scope = {}));\n\t\t\t;\n\t\t\tfunction create(input, value) {\n\t\t\t\tvar match = query(input);\n\t\t\t\tif (match == null) {\n\t\t\t\t\tthrow new ParchmentError(\"Unable to create \" + input + \" blot\");\n\t\t\t\t}\n\t\t\t\tvar BlotClass = match;\n\t\t\t\tvar node = input instanceof Node ? input : BlotClass.create(value);\n\t\t\t\treturn new BlotClass(node, value);\n\t\t\t}\n\t\t\texports.create = create;\n\t\t\tfunction find(node, bubble) {\n\t\t\t\tif (bubble === void 0) {\n\t\t\t\t\tbubble = false;\n\t\t\t\t}\n\t\t\t\tif (node == null) return null;\n\t\t\t\tif (node[exports.DATA_KEY] != null) return node[exports.DATA_KEY].blot;\n\t\t\t\tif (bubble) return find(node.parentNode, bubble);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\texports.find = find;\n\t\t\tfunction query(query, scope) {\n\t\t\t\tif (scope === void 0) {\n\t\t\t\t\tscope = Scope.ANY;\n\t\t\t\t}\n\t\t\t\tvar match;\n\t\t\t\tif (typeof query === 'string') {\n\t\t\t\t\tmatch = types[query] || attributes[query];\n\t\t\t\t} else if (query instanceof Text) {\n\t\t\t\t\tmatch = types['text'];\n\t\t\t\t} else if (typeof query === 'number') {\n\t\t\t\t\tif (query & Scope.LEVEL & Scope.BLOCK) {\n\t\t\t\t\t\tmatch = types['block'];\n\t\t\t\t\t} else if (query & Scope.LEVEL & Scope.INLINE) {\n\t\t\t\t\t\tmatch = types['inline'];\n\t\t\t\t\t}\n\t\t\t\t} else if (query instanceof HTMLElement) {\n\t\t\t\t\tvar names = (query.getAttribute('class') || '').split(/\\s+/);\n\t\t\t\t\tfor (var i in names) {\n\t\t\t\t\t\tmatch = classes[names[i]];\n\t\t\t\t\t\tif (match) break;\n\t\t\t\t\t}\n\t\t\t\t\tmatch = match || tags[query.tagName];\n\t\t\t\t}\n\t\t\t\tif (match == null) return null;\n\t\t\t\tif (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\texports.query = query;\n\t\t\tfunction register() {\n\t\t\t\tvar Definitions = [];\n\t\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\t\tDefinitions[_i] = arguments[_i];\n\t\t\t\t}\n\t\t\t\tif (Definitions.length > 1) {\n\t\t\t\t\treturn Definitions.map(function (d) {\n\t\t\t\t\t\treturn register(d);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tvar Definition = Definitions[0];\n\t\t\t\tif (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {\n\t\t\t\t\tthrow new ParchmentError('Invalid definition');\n\t\t\t\t} else if (Definition.blotName === 'abstract') {\n\t\t\t\t\tthrow new ParchmentError('Cannot register abstract class');\n\t\t\t\t}\n\t\t\t\ttypes[Definition.blotName || Definition.attrName] = Definition;\n\t\t\t\tif (typeof Definition.keyName === 'string') {\n\t\t\t\t\tattributes[Definition.keyName] = Definition;\n\t\t\t\t} else {\n\t\t\t\t\tif (Definition.className != null) {\n\t\t\t\t\t\tclasses[Definition.className] = Definition;\n\t\t\t\t\t}\n\t\t\t\t\tif (Definition.tagName != null) {\n\t\t\t\t\t\tif (Array.isArray(Definition.tagName)) {\n\t\t\t\t\t\t\tDefinition.tagName = Definition.tagName.map(function (tagName) {\n\t\t\t\t\t\t\t\treturn tagName.toUpperCase();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDefinition.tagName = Definition.tagName.toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];\n\t\t\t\t\t\ttagNames.forEach(function (tag) {\n\t\t\t\t\t\t\tif (tags[tag] == null || Definition.className == null) {\n\t\t\t\t\t\t\t\ttags[tag] = Definition;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Definition;\n\t\t\t}\n\t\t\texports.register = register;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 7 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar attributor_1 = __webpack_require__(8);\n\t\t\tvar store_1 = __webpack_require__(9);\n\t\t\tvar container_1 = __webpack_require__(3);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar FormatBlot = function (_super) {\n\t\t\t\t__extends(FormatBlot, _super);\n\t\t\t\tfunction FormatBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tFormatBlot.formats = function (domNode) {\n\t\t\t\t\tif (typeof this.tagName === 'string') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (Array.isArray(this.tagName)) {\n\t\t\t\t\t\treturn domNode.tagName.toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.attach = function () {\n\t\t\t\t\t_super.prototype.attach.call(this);\n\t\t\t\t\tthis.attributes = new store_1.default(this.domNode);\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.format = function (name, value) {\n\t\t\t\t\tvar format = Registry.query(name);\n\t\t\t\t\tif (format instanceof attributor_1.default) {\n\t\t\t\t\t\tthis.attributes.attribute(format, value);\n\t\t\t\t\t} else if (value) {\n\t\t\t\t\t\tif (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n\t\t\t\t\t\t\tthis.replaceWith(name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.formats = function () {\n\t\t\t\t\tvar formats = this.attributes.values();\n\t\t\t\t\tvar format = this.statics.formats(this.domNode);\n\t\t\t\t\tif (format != null) {\n\t\t\t\t\t\tformats[this.statics.blotName] = format;\n\t\t\t\t\t}\n\t\t\t\t\treturn formats;\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.replaceWith = function (name, value) {\n\t\t\t\t\tvar replacement = _super.prototype.replaceWith.call(this, name, value);\n\t\t\t\t\tthis.attributes.copy(replacement);\n\t\t\t\t\treturn replacement;\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.update = function (mutations) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\t_super.prototype.update.call(this, mutations);\n\t\t\t\t\tif (mutations.some(function (mutation) {\n\t\t\t\t\t\treturn mutation.target === _this.domNode && mutation.type === 'attributes';\n\t\t\t\t\t})) {\n\t\t\t\t\t\tthis.attributes.build();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tFormatBlot.prototype.wrap = function (name, value) {\n\t\t\t\t\tvar wrapper = _super.prototype.wrap.call(this, name, value);\n\t\t\t\t\tif (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {\n\t\t\t\t\t\tthis.attributes.move(wrapper);\n\t\t\t\t\t}\n\t\t\t\t\treturn wrapper;\n\t\t\t\t};\n\t\t\t\treturn FormatBlot;\n\t\t\t}(container_1.default);\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = FormatBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 8 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar Attributor = function () {\n\t\t\t\tfunction Attributor(attrName, keyName, options) {\n\t\t\t\t\tif (options === void 0) {\n\t\t\t\t\t\toptions = {};\n\t\t\t\t\t}\n\t\t\t\t\tthis.attrName = attrName;\n\t\t\t\t\tthis.keyName = keyName;\n\t\t\t\t\tvar attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;\n\t\t\t\t\tif (options.scope != null) {\n\t\t\t\t\t\t// Ignore type bits, force attribute bit\n\t\t\t\t\t\tthis.scope = options.scope & Registry.Scope.LEVEL | attributeBit;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.scope = Registry.Scope.ATTRIBUTE;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.whitelist != null) this.whitelist = options.whitelist;\n\t\t\t\t}\n\t\t\t\tAttributor.keys = function (node) {\n\t\t\t\t\treturn [].map.call(node.attributes, function (item) {\n\t\t\t\t\t\treturn item.name;\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tAttributor.prototype.add = function (node, value) {\n\t\t\t\t\tif (!this.canAdd(node, value)) return false;\n\t\t\t\t\tnode.setAttribute(this.keyName, value);\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\tAttributor.prototype.canAdd = function (node, value) {\n\t\t\t\t\tvar match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));\n\t\t\t\t\tif (match != null && (this.whitelist == null || this.whitelist.indexOf(value) > -1)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\tAttributor.prototype.remove = function (node) {\n\t\t\t\t\tnode.removeAttribute(this.keyName);\n\t\t\t\t};\n\t\t\t\tAttributor.prototype.value = function (node) {\n\t\t\t\t\tvar value = node.getAttribute(this.keyName);\n\t\t\t\t\treturn this.canAdd(node, value) ? value : '';\n\t\t\t\t};\n\t\t\t\treturn Attributor;\n\t\t\t}();\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = Attributor;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 9 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar attributor_1 = __webpack_require__(8);\n\t\t\tvar class_1 = __webpack_require__(10);\n\t\t\tvar style_1 = __webpack_require__(11);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar AttributorStore = function () {\n\t\t\t\tfunction AttributorStore(domNode) {\n\t\t\t\t\tthis.attributes = {};\n\t\t\t\t\tthis.domNode = domNode;\n\t\t\t\t\tthis.build();\n\t\t\t\t}\n\t\t\t\tAttributorStore.prototype.attribute = function (attribute, value) {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tif (attribute.add(this.domNode, value)) {\n\t\t\t\t\t\t\tif (attribute.value(this.domNode) != null) {\n\t\t\t\t\t\t\t\tthis.attributes[attribute.attrName] = attribute;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdelete this.attributes[attribute.attrName];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tattribute.remove(this.domNode);\n\t\t\t\t\t\tdelete this.attributes[attribute.attrName];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tAttributorStore.prototype.build = function () {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tthis.attributes = {};\n\t\t\t\t\tvar attributes = attributor_1.default.keys(this.domNode);\n\t\t\t\t\tvar classes = class_1.default.keys(this.domNode);\n\t\t\t\t\tvar styles = style_1.default.keys(this.domNode);\n\t\t\t\t\tattributes.concat(classes).concat(styles).forEach(function (name) {\n\t\t\t\t\t\tvar attr = Registry.query(name, Registry.Scope.ATTRIBUTE);\n\t\t\t\t\t\tif (attr instanceof attributor_1.default) {\n\t\t\t\t\t\t\t_this.attributes[attr.attrName] = attr;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tAttributorStore.prototype.copy = function (target) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tObject.keys(this.attributes).forEach(function (key) {\n\t\t\t\t\t\tvar value = _this.attributes[key].value(_this.domNode);\n\t\t\t\t\t\ttarget.format(key, value);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tAttributorStore.prototype.move = function (target) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tthis.copy(target);\n\t\t\t\t\tObject.keys(this.attributes).forEach(function (key) {\n\t\t\t\t\t\t_this.attributes[key].remove(_this.domNode);\n\t\t\t\t\t});\n\t\t\t\t\tthis.attributes = {};\n\t\t\t\t};\n\t\t\t\tAttributorStore.prototype.values = function () {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\treturn Object.keys(this.attributes).reduce(function (attributes, name) {\n\t\t\t\t\t\tattributes[name] = _this.attributes[name].value(_this.domNode);\n\t\t\t\t\t\treturn attributes;\n\t\t\t\t\t}, {});\n\t\t\t\t};\n\t\t\t\treturn AttributorStore;\n\t\t\t}();\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = AttributorStore;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 10 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar attributor_1 = __webpack_require__(8);\n\t\t\tfunction match(node, prefix) {\n\t\t\t\tvar className = node.getAttribute('class') || '';\n\t\t\t\treturn className.split(/\\s+/).filter(function (name) {\n\t\t\t\t\treturn name.indexOf(prefix + \"-\") === 0;\n\t\t\t\t});\n\t\t\t}\n\t\t\tvar ClassAttributor = function (_super) {\n\t\t\t\t__extends(ClassAttributor, _super);\n\t\t\t\tfunction ClassAttributor() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tClassAttributor.keys = function (node) {\n\t\t\t\t\treturn (node.getAttribute('class') || '').split(/\\s+/).map(function (name) {\n\t\t\t\t\t\treturn name.split('-').slice(0, -1).join('-');\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tClassAttributor.prototype.add = function (node, value) {\n\t\t\t\t\tif (!this.canAdd(node, value)) return false;\n\t\t\t\t\tthis.remove(node);\n\t\t\t\t\tnode.classList.add(this.keyName + \"-\" + value);\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\tClassAttributor.prototype.remove = function (node) {\n\t\t\t\t\tvar matches = match(node, this.keyName);\n\t\t\t\t\tmatches.forEach(function (name) {\n\t\t\t\t\t\tnode.classList.remove(name);\n\t\t\t\t\t});\n\t\t\t\t\tif (node.classList.length === 0) {\n\t\t\t\t\t\tnode.removeAttribute('class');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tClassAttributor.prototype.value = function (node) {\n\t\t\t\t\tvar result = match(node, this.keyName)[0] || '';\n\t\t\t\t\tvar value = result.slice(this.keyName.length + 1); // +1 for hyphen\n\t\t\t\t\treturn this.canAdd(node, value) ? value : '';\n\t\t\t\t};\n\t\t\t\treturn ClassAttributor;\n\t\t\t}(attributor_1.default);\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = ClassAttributor;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 11 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar attributor_1 = __webpack_require__(8);\n\t\t\tfunction camelize(name) {\n\t\t\t\tvar parts = name.split('-');\n\t\t\t\tvar rest = parts.slice(1).map(function (part) {\n\t\t\t\t\treturn part[0].toUpperCase() + part.slice(1);\n\t\t\t\t}).join('');\n\t\t\t\treturn parts[0] + rest;\n\t\t\t}\n\t\t\tvar StyleAttributor = function (_super) {\n\t\t\t\t__extends(StyleAttributor, _super);\n\t\t\t\tfunction StyleAttributor() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tStyleAttributor.keys = function (node) {\n\t\t\t\t\treturn (node.getAttribute('style') || '').split(';').map(function (value) {\n\t\t\t\t\t\tvar arr = value.split(':');\n\t\t\t\t\t\treturn arr[0].trim();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tStyleAttributor.prototype.add = function (node, value) {\n\t\t\t\t\tif (!this.canAdd(node, value)) return false;\n\t\t\t\t\tnode.style[camelize(this.keyName)] = value;\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\tStyleAttributor.prototype.remove = function (node) {\n\t\t\t\t\tnode.style[camelize(this.keyName)] = '';\n\t\t\t\t\tif (!node.getAttribute('style')) {\n\t\t\t\t\t\tnode.removeAttribute('style');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStyleAttributor.prototype.value = function (node) {\n\t\t\t\t\tvar value = node.style[camelize(this.keyName)];\n\t\t\t\t\treturn this.canAdd(node, value) ? value : '';\n\t\t\t\t};\n\t\t\t\treturn StyleAttributor;\n\t\t\t}(attributor_1.default);\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = StyleAttributor;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 12 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar shadow_1 = __webpack_require__(5);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar LeafBlot = function (_super) {\n\t\t\t\t__extends(LeafBlot, _super);\n\t\t\t\tfunction LeafBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tLeafBlot.value = function (domNode) {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\tLeafBlot.prototype.index = function (node, offset) {\n\t\t\t\t\tif (node !== this.domNode) return -1;\n\t\t\t\t\treturn Math.min(offset, 1);\n\t\t\t\t};\n\t\t\t\tLeafBlot.prototype.position = function (index, inclusive) {\n\t\t\t\t\tvar offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);\n\t\t\t\t\tif (index > 0) offset += 1;\n\t\t\t\t\treturn [this.parent.domNode, offset];\n\t\t\t\t};\n\t\t\t\tLeafBlot.prototype.value = function () {\n\t\t\t\t\treturn _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;\n\t\t\t\t\tvar _a;\n\t\t\t\t};\n\t\t\t\treturn LeafBlot;\n\t\t\t}(shadow_1.default);\n\t\t\tLeafBlot.scope = Registry.Scope.INLINE_BLOT;\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = LeafBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 13 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar container_1 = __webpack_require__(3);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar OBSERVER_CONFIG = {\n\t\t\t\tattributes: true,\n\t\t\t\tcharacterData: true,\n\t\t\t\tcharacterDataOldValue: true,\n\t\t\t\tchildList: true,\n\t\t\t\tsubtree: true\n\t\t\t};\n\t\t\tvar MAX_OPTIMIZE_ITERATIONS = 100;\n\t\t\tvar ScrollBlot = function (_super) {\n\t\t\t\t__extends(ScrollBlot, _super);\n\t\t\t\tfunction ScrollBlot(node) {\n\t\t\t\t\tvar _this = _super.call(this, node) || this;\n\t\t\t\t\t_this.parent = null;\n\t\t\t\t\t_this.observer = new MutationObserver(function (mutations) {\n\t\t\t\t\t\t_this.update(mutations);\n\t\t\t\t\t});\n\t\t\t\t\t_this.observer.observe(_this.domNode, OBSERVER_CONFIG);\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\t\t\t\tScrollBlot.prototype.detach = function () {\n\t\t\t\t\t_super.prototype.detach.call(this);\n\t\t\t\t\tthis.observer.disconnect();\n\t\t\t\t};\n\t\t\t\tScrollBlot.prototype.deleteAt = function (index, length) {\n\t\t\t\t\tthis.update();\n\t\t\t\t\tif (index === 0 && length === this.length()) {\n\t\t\t\t\t\tthis.children.forEach(function (child) {\n\t\t\t\t\t\t\tchild.remove();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.deleteAt.call(this, index, length);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tScrollBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tthis.update();\n\t\t\t\t\t_super.prototype.formatAt.call(this, index, length, name, value);\n\t\t\t\t};\n\t\t\t\tScrollBlot.prototype.insertAt = function (index, value, def) {\n\t\t\t\t\tthis.update();\n\t\t\t\t\t_super.prototype.insertAt.call(this, index, value, def);\n\t\t\t\t};\n\t\t\t\tScrollBlot.prototype.optimize = function (mutations) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tif (mutations === void 0) {\n\t\t\t\t\t\tmutations = [];\n\t\t\t\t\t}\n\t\t\t\t\t_super.prototype.optimize.call(this);\n\t\t\t\t\t// We must modify mutations directly, cannot make copy and then modify\n\t\t\t\t\tvar records = [].slice.call(this.observer.takeRecords());\n\t\t\t\t\t// Array.push currently seems to be implemented by a non-tail recursive function\n\t\t\t\t\t// so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n\t\t\t\t\twhile (records.length > 0) {\n\t\t\t\t\t\tmutations.push(records.pop());\n\t\t\t\t\t} // TODO use WeakMap\n\t\t\t\t\tvar mark = function mark(blot, markParent) {\n\t\t\t\t\t\tif (markParent === void 0) {\n\t\t\t\t\t\t\tmarkParent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (blot == null || blot === _this) return;\n\t\t\t\t\t\tif (blot.domNode.parentNode == null) return;\n\t\t\t\t\t\tif (blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t\t\t\t\t\t\tblot.domNode[Registry.DATA_KEY].mutations = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (markParent) mark(blot.parent);\n\t\t\t\t\t};\n\t\t\t\t\tvar optimize = function optimize(blot) {\n\t\t\t\t\t\tif (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (blot instanceof container_1.default) {\n\t\t\t\t\t\t\tblot.children.forEach(optimize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tblot.optimize();\n\t\t\t\t\t};\n\t\t\t\t\tvar remaining = mutations;\n\t\t\t\t\tfor (var i = 0; remaining.length > 0; i += 1) {\n\t\t\t\t\t\tif (i >= MAX_OPTIMIZE_ITERATIONS) {\n\t\t\t\t\t\t\tthrow new Error('[Parchment] Maximum optimize iterations reached');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremaining.forEach(function (mutation) {\n\t\t\t\t\t\t\tvar blot = Registry.find(mutation.target, true);\n\t\t\t\t\t\t\tif (blot == null) return;\n\t\t\t\t\t\t\tif (blot.domNode === mutation.target) {\n\t\t\t\t\t\t\t\tif (mutation.type === 'childList') {\n\t\t\t\t\t\t\t\t\tmark(Registry.find(mutation.previousSibling, false));\n\t\t\t\t\t\t\t\t\t[].forEach.call(mutation.addedNodes, function (node) {\n\t\t\t\t\t\t\t\t\t\tvar child = Registry.find(node, false);\n\t\t\t\t\t\t\t\t\t\tmark(child, false);\n\t\t\t\t\t\t\t\t\t\tif (child instanceof container_1.default) {\n\t\t\t\t\t\t\t\t\t\t\tchild.children.forEach(function (grandChild) {\n\t\t\t\t\t\t\t\t\t\t\t\tmark(grandChild, false);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (mutation.type === 'attributes') {\n\t\t\t\t\t\t\t\t\tmark(blot.prev);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmark(blot);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.children.forEach(optimize);\n\t\t\t\t\t\tremaining = [].slice.call(this.observer.takeRecords());\n\t\t\t\t\t\trecords = remaining.slice();\n\t\t\t\t\t\twhile (records.length > 0) {\n\t\t\t\t\t\t\tmutations.push(records.pop());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tScrollBlot.prototype.update = function (mutations) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tmutations = mutations || this.observer.takeRecords();\n\t\t\t\t\t// TODO use WeakMap\n\t\t\t\t\tmutations.map(function (mutation) {\n\t\t\t\t\t\tvar blot = Registry.find(mutation.target, true);\n\t\t\t\t\t\tif (blot == null) return;\n\t\t\t\t\t\tif (blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t\t\t\t\t\t\tblot.domNode[Registry.DATA_KEY].mutations = [mutation];\n\t\t\t\t\t\t\treturn blot;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tblot.domNode[Registry.DATA_KEY].mutations.push(mutation);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).forEach(function (blot) {\n\t\t\t\t\t\tif (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null) return;\n\t\t\t\t\t\tblot.update(blot.domNode[Registry.DATA_KEY].mutations || []);\n\t\t\t\t\t});\n\t\t\t\t\tif (this.domNode[Registry.DATA_KEY].mutations != null) {\n\t\t\t\t\t\t_super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations);\n\t\t\t\t\t}\n\t\t\t\t\tthis.optimize(mutations);\n\t\t\t\t};\n\t\t\t\treturn ScrollBlot;\n\t\t\t}(container_1.default);\n\t\t\tScrollBlot.blotName = 'scroll';\n\t\t\tScrollBlot.defaultChild = 'block';\n\t\t\tScrollBlot.scope = Registry.Scope.BLOCK_BLOT;\n\t\t\tScrollBlot.tagName = 'DIV';\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = ScrollBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 14 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar format_1 = __webpack_require__(7);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\t// Shallow object comparison\n\t\t\tfunction isEqual(obj1, obj2) {\n\t\t\t\tif (Object.keys(obj1).length !== Object.keys(obj2).length) return false;\n\t\t\t\tfor (var prop in obj1) {\n\t\t\t\t\tif (obj1[prop] !== obj2[prop]) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar InlineBlot = function (_super) {\n\t\t\t\t__extends(InlineBlot, _super);\n\t\t\t\tfunction InlineBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tInlineBlot.formats = function (domNode) {\n\t\t\t\t\tif (domNode.tagName === InlineBlot.tagName) return undefined;\n\t\t\t\t\treturn _super.formats.call(this, domNode);\n\t\t\t\t};\n\t\t\t\tInlineBlot.prototype.format = function (name, value) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tif (name === this.statics.blotName && !value) {\n\t\t\t\t\t\tthis.children.forEach(function (child) {\n\t\t\t\t\t\t\tif (!(child instanceof format_1.default)) {\n\t\t\t\t\t\t\t\tchild = child.wrap(InlineBlot.blotName, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this.attributes.copy(child);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.unwrap();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.format.call(this, name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tInlineBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tif (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {\n\t\t\t\t\t\tvar blot = this.isolate(index, length);\n\t\t\t\t\t\tblot.format(name, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.formatAt.call(this, index, length, name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tInlineBlot.prototype.optimize = function () {\n\t\t\t\t\t_super.prototype.optimize.call(this);\n\t\t\t\t\tvar formats = this.formats();\n\t\t\t\t\tif (Object.keys(formats).length === 0) {\n\t\t\t\t\t\treturn this.unwrap(); // unformatted span\n\t\t\t\t\t}\n\t\t\t\t\tvar next = this.next;\n\t\t\t\t\tif (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {\n\t\t\t\t\t\tnext.moveChildren(this);\n\t\t\t\t\t\tnext.remove();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn InlineBlot;\n\t\t\t}(format_1.default);\n\t\t\tInlineBlot.blotName = 'inline';\n\t\t\tInlineBlot.scope = Registry.Scope.INLINE_BLOT;\n\t\t\tInlineBlot.tagName = 'SPAN';\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = InlineBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 15 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar format_1 = __webpack_require__(7);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar BlockBlot = function (_super) {\n\t\t\t\t__extends(BlockBlot, _super);\n\t\t\t\tfunction BlockBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tBlockBlot.formats = function (domNode) {\n\t\t\t\t\tvar tagName = Registry.query(BlockBlot.blotName).tagName;\n\t\t\t\t\tif (domNode.tagName === tagName) return undefined;\n\t\t\t\t\treturn _super.formats.call(this, domNode);\n\t\t\t\t};\n\t\t\t\tBlockBlot.prototype.format = function (name, value) {\n\t\t\t\t\tif (Registry.query(name, Registry.Scope.BLOCK) == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (name === this.statics.blotName && !value) {\n\t\t\t\t\t\tthis.replaceWith(BlockBlot.blotName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.format.call(this, name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tBlockBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tif (Registry.query(name, Registry.Scope.BLOCK) != null) {\n\t\t\t\t\t\tthis.format(name, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.formatAt.call(this, index, length, name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tBlockBlot.prototype.insertAt = function (index, value, def) {\n\t\t\t\t\tif (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {\n\t\t\t\t\t\t// Insert text or inline\n\t\t\t\t\t\t_super.prototype.insertAt.call(this, index, value, def);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar after = this.split(index);\n\t\t\t\t\t\tvar blot = Registry.create(value, def);\n\t\t\t\t\t\tafter.parent.insertBefore(blot, after);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tBlockBlot.prototype.update = function (mutations) {\n\t\t\t\t\tif (navigator.userAgent.match(/Trident/)) {\n\t\t\t\t\t\tthis.attach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.update.call(this, mutations);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn BlockBlot;\n\t\t\t}(format_1.default);\n\t\t\tBlockBlot.blotName = 'block';\n\t\t\tBlockBlot.scope = Registry.Scope.BLOCK_BLOT;\n\t\t\tBlockBlot.tagName = 'P';\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = BlockBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 16 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar leaf_1 = __webpack_require__(12);\n\t\t\tvar EmbedBlot = function (_super) {\n\t\t\t\t__extends(EmbedBlot, _super);\n\t\t\t\tfunction EmbedBlot() {\n\t\t\t\t\treturn _super !== null && _super.apply(this, arguments) || this;\n\t\t\t\t}\n\t\t\t\tEmbedBlot.formats = function (domNode) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\t\t\t\tEmbedBlot.prototype.format = function (name, value) {\n\t\t\t\t\t// super.formatAt wraps, which is what we want in general,\n\t\t\t\t\t// but this allows subclasses to overwrite for formats\n\t\t\t\t\t// that just apply to particular embeds\n\t\t\t\t\t_super.prototype.formatAt.call(this, 0, this.length(), name, value);\n\t\t\t\t};\n\t\t\t\tEmbedBlot.prototype.formatAt = function (index, length, name, value) {\n\t\t\t\t\tif (index === 0 && length === this.length()) {\n\t\t\t\t\t\tthis.format(name, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.formatAt.call(this, index, length, name, value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tEmbedBlot.prototype.formats = function () {\n\t\t\t\t\treturn this.statics.formats(this.domNode);\n\t\t\t\t};\n\t\t\t\treturn EmbedBlot;\n\t\t\t}(leaf_1.default);\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = EmbedBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 17 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\tfor (var p in b) {\n\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t}function __() {\n\t\t\t\t\tthis.constructor = d;\n\t\t\t\t}\n\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t};\n\t\t\tvar leaf_1 = __webpack_require__(12);\n\t\t\tvar Registry = __webpack_require__(6);\n\t\t\tvar TextBlot = function (_super) {\n\t\t\t\t__extends(TextBlot, _super);\n\t\t\t\tfunction TextBlot(node) {\n\t\t\t\t\tvar _this = _super.call(this, node) || this;\n\t\t\t\t\t_this.text = _this.statics.value(_this.domNode);\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\t\t\t\tTextBlot.create = function (value) {\n\t\t\t\t\treturn document.createTextNode(value);\n\t\t\t\t};\n\t\t\t\tTextBlot.value = function (domNode) {\n\t\t\t\t\treturn domNode.data;\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.deleteAt = function (index, length) {\n\t\t\t\t\tthis.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.index = function (node, offset) {\n\t\t\t\t\tif (this.domNode === node) {\n\t\t\t\t\t\treturn offset;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.insertAt = function (index, value, def) {\n\t\t\t\t\tif (def == null) {\n\t\t\t\t\t\tthis.text = this.text.slice(0, index) + value + this.text.slice(index);\n\t\t\t\t\t\tthis.domNode.data = this.text;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_super.prototype.insertAt.call(this, index, value, def);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.length = function () {\n\t\t\t\t\treturn this.text.length;\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.optimize = function () {\n\t\t\t\t\t_super.prototype.optimize.call(this);\n\t\t\t\t\tthis.text = this.statics.value(this.domNode);\n\t\t\t\t\tif (this.text.length === 0) {\n\t\t\t\t\t\tthis.remove();\n\t\t\t\t\t} else if (this.next instanceof TextBlot && this.next.prev === this) {\n\t\t\t\t\t\tthis.insertAt(this.length(), this.next.value());\n\t\t\t\t\t\tthis.next.remove();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.position = function (index, inclusive) {\n\t\t\t\t\tif (inclusive === void 0) {\n\t\t\t\t\t\tinclusive = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn [this.domNode, index];\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.split = function (index, force) {\n\t\t\t\t\tif (force === void 0) {\n\t\t\t\t\t\tforce = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!force) {\n\t\t\t\t\t\tif (index === 0) return this;\n\t\t\t\t\t\tif (index === this.length()) return this.next;\n\t\t\t\t\t}\n\t\t\t\t\tvar after = Registry.create(this.domNode.splitText(index));\n\t\t\t\t\tthis.parent.insertBefore(after, this.next);\n\t\t\t\t\tthis.text = this.statics.value(this.domNode);\n\t\t\t\t\treturn after;\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.update = function (mutations) {\n\t\t\t\t\tvar _this = this;\n\t\t\t\t\tif (mutations.some(function (mutation) {\n\t\t\t\t\t\treturn mutation.type === 'characterData' && mutation.target === _this.domNode;\n\t\t\t\t\t})) {\n\t\t\t\t\t\tthis.text = this.statics.value(this.domNode);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tTextBlot.prototype.value = function () {\n\t\t\t\t\treturn this.text;\n\t\t\t\t};\n\t\t\t\treturn TextBlot;\n\t\t\t}(leaf_1.default);\n\t\t\tTextBlot.blotName = 'text';\n\t\t\tTextBlot.scope = Registry.Scope.INLINE_BLOT;\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.default = TextBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 18 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.overload = exports.expandConfig = undefined;\n\n\t\t\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t\t\t\treturn typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t} : function (obj) {\n\t\t\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t};\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\t__webpack_require__(19);\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _editor = __webpack_require__(27);\n\n\t\t\tvar _editor2 = _interopRequireDefault(_editor);\n\n\t\t\tvar _emitter3 = __webpack_require__(35);\n\n\t\t\tvar _emitter4 = _interopRequireDefault(_emitter3);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _selection = __webpack_require__(40);\n\n\t\t\tvar _selection2 = _interopRequireDefault(_selection);\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tvar _theme = __webpack_require__(41);\n\n\t\t\tvar _theme2 = _interopRequireDefault(_theme);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _defineProperty(obj, key, value) {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\tObject.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = value;\n\t\t\t\t}return obj;\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill');\n\n\t\t\tvar Quill = function () {\n\t\t\t\t_createClass(Quill, null, [{\n\t\t\t\t\tkey: 'debug',\n\t\t\t\t\tvalue: function debug(limit) {\n\t\t\t\t\t\tif (limit === true) {\n\t\t\t\t\t\t\tlimit = 'log';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_logger2.default.level(limit);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'find',\n\t\t\t\t\tvalue: function find(node) {\n\t\t\t\t\t\treturn node.__quill || _parchment2.default.find(node);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'import',\n\t\t\t\t\tvalue: function _import(name) {\n\t\t\t\t\t\tif (this.imports[name] == null) {\n\t\t\t\t\t\t\tdebug.error('Cannot import ' + name + '. Are you sure it was registered?');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.imports[name];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'register',\n\t\t\t\t\tvalue: function register(path, target) {\n\t\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t\tvar overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t\t\t\t\t\tif (typeof path !== 'string') {\n\t\t\t\t\t\t\tvar name = path.attrName || path.blotName;\n\t\t\t\t\t\t\tif (typeof name === 'string') {\n\t\t\t\t\t\t\t\t// register(Blot | Attributor, overwrite)\n\t\t\t\t\t\t\t\tthis.register('formats/' + name, path, target);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tObject.keys(path).forEach(function (key) {\n\t\t\t\t\t\t\t\t\t_this.register(key, path[key], target);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (this.imports[path] != null && !overwrite) {\n\t\t\t\t\t\t\t\tdebug.warn('Overwriting ' + path + ' with', target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.imports[path] = target;\n\t\t\t\t\t\t\tif ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {\n\t\t\t\t\t\t\t\t_parchment2.default.register(target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\tfunction Quill(container) {\n\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\t\t\t_classCallCheck(this, Quill);\n\n\t\t\t\t\tthis.options = expandConfig(container, options);\n\t\t\t\t\tthis.container = this.options.container;\n\t\t\t\t\tthis.scrollingContainer = this.options.scrollingContainer || document.body;\n\t\t\t\t\tif (this.container == null) {\n\t\t\t\t\t\treturn debug.error('Invalid Quill container', container);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.options.debug) {\n\t\t\t\t\t\tQuill.debug(this.options.debug);\n\t\t\t\t\t}\n\t\t\t\t\tvar html = this.container.innerHTML.trim();\n\t\t\t\t\tthis.container.classList.add('ql-container');\n\t\t\t\t\tthis.container.innerHTML = '';\n\t\t\t\t\tthis.container.__quill = this;\n\t\t\t\t\tthis.root = this.addContainer('ql-editor');\n\t\t\t\t\tthis.root.classList.add('ql-blank');\n\t\t\t\t\tthis.emitter = new _emitter4.default();\n\t\t\t\t\tthis.scroll = _parchment2.default.create(this.root, {\n\t\t\t\t\t\temitter: this.emitter,\n\t\t\t\t\t\twhitelist: this.options.formats\n\t\t\t\t\t});\n\t\t\t\t\tthis.editor = new _editor2.default(this.scroll);\n\t\t\t\t\tthis.selection = new _selection2.default(this.scroll, this.emitter);\n\t\t\t\t\tthis.theme = new this.options.theme(this, this.options);\n\t\t\t\t\tthis.keyboard = this.theme.addModule('keyboard');\n\t\t\t\t\tthis.clipboard = this.theme.addModule('clipboard');\n\t\t\t\t\tthis.history = this.theme.addModule('history');\n\t\t\t\t\tthis.theme.init();\n\t\t\t\t\tthis.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {\n\t\t\t\t\t\tif (type === _emitter4.default.events.TEXT_CHANGE) {\n\t\t\t\t\t\t\t_this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {\n\t\t\t\t\t\tvar range = _this2.selection.lastRange;\n\t\t\t\t\t\tvar index = range && range.length === 0 ? range.index : undefined;\n\t\t\t\t\t\tmodify.call(_this2, function () {\n\t\t\t\t\t\t\treturn _this2.editor.update(null, mutations, index);\n\t\t\t\t\t\t}, source);\n\t\t\t\t\t});\n\t\t\t\t\tvar contents = this.clipboard.convert('<div class=\\'ql-editor\\' style=\"white-space: normal;\">' + html + '<p><br></p></div>');\n\t\t\t\t\tthis.setContents(contents);\n\t\t\t\t\tthis.history.clear();\n\t\t\t\t\tif (this.options.placeholder) {\n\t\t\t\t\t\tthis.root.setAttribute('data-placeholder', this.options.placeholder);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.options.readOnly) {\n\t\t\t\t\t\tthis.disable();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_createClass(Quill, [{\n\t\t\t\t\tkey: 'addContainer',\n\t\t\t\t\tvalue: function addContainer(container) {\n\t\t\t\t\t\tvar refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\t\t\t\t\t\tif (typeof container === 'string') {\n\t\t\t\t\t\t\tvar className = container;\n\t\t\t\t\t\t\tcontainer = document.createElement('div');\n\t\t\t\t\t\t\tcontainer.classList.add(className);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.container.insertBefore(container, refNode);\n\t\t\t\t\t\treturn container;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'blur',\n\t\t\t\t\tvalue: function blur() {\n\t\t\t\t\t\tthis.selection.setRange(null);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'deleteText',\n\t\t\t\t\tvalue: function deleteText(index, length, source) {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar _overload = overload(index, length, source);\n\n\t\t\t\t\t\tvar _overload2 = _slicedToArray(_overload, 4);\n\n\t\t\t\t\t\tindex = _overload2[0];\n\t\t\t\t\t\tlength = _overload2[1];\n\t\t\t\t\t\tsource = _overload2[3];\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this3.editor.deleteText(index, length);\n\t\t\t\t\t\t}, source, index, -1 * length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'disable',\n\t\t\t\t\tvalue: function disable() {\n\t\t\t\t\t\tthis.enable(false);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'enable',\n\t\t\t\t\tvalue: function enable() {\n\t\t\t\t\t\tvar enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\t\t\t\t\t\tthis.scroll.enable(enabled);\n\t\t\t\t\t\tthis.container.classList.toggle('ql-disabled', !enabled);\n\t\t\t\t\t\tif (!enabled) {\n\t\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'focus',\n\t\t\t\t\tvalue: function focus() {\n\t\t\t\t\t\tvar scrollTop = this.scrollingContainer.scrollTop;\n\t\t\t\t\t\tthis.selection.focus();\n\t\t\t\t\t\tthis.scrollingContainer.scrollTop = scrollTop;\n\t\t\t\t\t\tthis.selection.scrollIntoView();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tvar _this4 = this;\n\n\t\t\t\t\t\tvar source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\tvar range = _this4.getSelection(true);\n\t\t\t\t\t\t\tvar change = new _quillDelta2.default();\n\t\t\t\t\t\t\tif (range == null) {\n\t\t\t\t\t\t\t\treturn change;\n\t\t\t\t\t\t\t} else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n\t\t\t\t\t\t\t\tchange = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));\n\t\t\t\t\t\t\t} else if (range.length === 0) {\n\t\t\t\t\t\t\t\t_this4.selection.format(name, value);\n\t\t\t\t\t\t\t\treturn change;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchange = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this4.setSelection(range, _emitter4.default.sources.SILENT);\n\t\t\t\t\t\t\treturn change;\n\t\t\t\t\t\t}, source);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatLine',\n\t\t\t\t\tvalue: function formatLine(index, length, name, value, source) {\n\t\t\t\t\t\tvar _this5 = this;\n\n\t\t\t\t\t\tvar formats = void 0;\n\n\t\t\t\t\t\tvar _overload3 = overload(index, length, name, value, source);\n\n\t\t\t\t\t\tvar _overload4 = _slicedToArray(_overload3, 4);\n\n\t\t\t\t\t\tindex = _overload4[0];\n\t\t\t\t\t\tlength = _overload4[1];\n\t\t\t\t\t\tformats = _overload4[2];\n\t\t\t\t\t\tsource = _overload4[3];\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this5.editor.formatLine(index, length, formats);\n\t\t\t\t\t\t}, source, index, 0);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatText',\n\t\t\t\t\tvalue: function formatText(index, length, name, value, source) {\n\t\t\t\t\t\tvar _this6 = this;\n\n\t\t\t\t\t\tvar formats = void 0;\n\n\t\t\t\t\t\tvar _overload5 = overload(index, length, name, value, source);\n\n\t\t\t\t\t\tvar _overload6 = _slicedToArray(_overload5, 4);\n\n\t\t\t\t\t\tindex = _overload6[0];\n\t\t\t\t\t\tlength = _overload6[1];\n\t\t\t\t\t\tformats = _overload6[2];\n\t\t\t\t\t\tsource = _overload6[3];\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this6.editor.formatText(index, length, formats);\n\t\t\t\t\t\t}, source, index, 0);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getBounds',\n\t\t\t\t\tvalue: function getBounds(index) {\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\t\t\t\tif (typeof index === 'number') {\n\t\t\t\t\t\t\treturn this.selection.getBounds(index, length);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.selection.getBounds(index.index, index.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getContents',\n\t\t\t\t\tvalue: function getContents() {\n\t\t\t\t\t\tvar index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n\t\t\t\t\t\tvar _overload7 = overload(index, length);\n\n\t\t\t\t\t\tvar _overload8 = _slicedToArray(_overload7, 2);\n\n\t\t\t\t\t\tindex = _overload8[0];\n\t\t\t\t\t\tlength = _overload8[1];\n\n\t\t\t\t\t\treturn this.editor.getContents(index, length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getFormat',\n\t\t\t\t\tvalue: function getFormat() {\n\t\t\t\t\t\tvar index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection();\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\t\t\t\tif (typeof index === 'number') {\n\t\t\t\t\t\t\treturn this.editor.getFormat(index, length);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.editor.getFormat(index.index, index.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getIndex',\n\t\t\t\t\tvalue: function getIndex(blot) {\n\t\t\t\t\t\treturn blot.offset(this.scroll);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getLength',\n\t\t\t\t\tvalue: function getLength() {\n\t\t\t\t\t\treturn this.scroll.length();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getLeaf',\n\t\t\t\t\tvalue: function getLeaf(index) {\n\t\t\t\t\t\treturn this.scroll.leaf(index);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getLine',\n\t\t\t\t\tvalue: function getLine(index) {\n\t\t\t\t\t\treturn this.scroll.line(index);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getLines',\n\t\t\t\t\tvalue: function getLines() {\n\t\t\t\t\t\tvar index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n\t\t\t\t\t\tif (typeof index !== 'number') {\n\t\t\t\t\t\t\treturn this.scroll.lines(index.index, index.length);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.scroll.lines(index, length);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getModule',\n\t\t\t\t\tvalue: function getModule(name) {\n\t\t\t\t\t\treturn this.theme.modules[name];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getSelection',\n\t\t\t\t\tvalue: function getSelection() {\n\t\t\t\t\t\tvar focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n\t\t\t\t\t\tif (focus) this.focus();\n\t\t\t\t\t\tthis.update(); // Make sure we access getRange with editor in consistent state\n\t\t\t\t\t\treturn this.selection.getRange()[0];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getText',\n\t\t\t\t\tvalue: function getText() {\n\t\t\t\t\t\tvar index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n\t\t\t\t\t\tvar _overload9 = overload(index, length);\n\n\t\t\t\t\t\tvar _overload10 = _slicedToArray(_overload9, 2);\n\n\t\t\t\t\t\tindex = _overload10[0];\n\t\t\t\t\t\tlength = _overload10[1];\n\n\t\t\t\t\t\treturn this.editor.getText(index, length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'hasFocus',\n\t\t\t\t\tvalue: function hasFocus() {\n\t\t\t\t\t\treturn this.selection.hasFocus();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertEmbed',\n\t\t\t\t\tvalue: function insertEmbed(index, embed, value) {\n\t\t\t\t\t\tvar _this7 = this;\n\n\t\t\t\t\t\tvar source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this7.editor.insertEmbed(index, embed, value);\n\t\t\t\t\t\t}, source, index);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertText',\n\t\t\t\t\tvalue: function insertText(index, text, name, value, source) {\n\t\t\t\t\t\tvar _this8 = this;\n\n\t\t\t\t\t\tvar formats = void 0;\n\n\t\t\t\t\t\tvar _overload11 = overload(index, 0, name, value, source);\n\n\t\t\t\t\t\tvar _overload12 = _slicedToArray(_overload11, 4);\n\n\t\t\t\t\t\tindex = _overload12[0];\n\t\t\t\t\t\tformats = _overload12[2];\n\t\t\t\t\t\tsource = _overload12[3];\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this8.editor.insertText(index, text, formats);\n\t\t\t\t\t\t}, source, index, text.length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'isEnabled',\n\t\t\t\t\tvalue: function isEnabled() {\n\t\t\t\t\t\treturn !this.container.classList.contains('ql-disabled');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'off',\n\t\t\t\t\tvalue: function off() {\n\t\t\t\t\t\treturn this.emitter.off.apply(this.emitter, arguments);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'on',\n\t\t\t\t\tvalue: function on() {\n\t\t\t\t\t\treturn this.emitter.on.apply(this.emitter, arguments);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'once',\n\t\t\t\t\tvalue: function once() {\n\t\t\t\t\t\treturn this.emitter.once.apply(this.emitter, arguments);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'pasteHTML',\n\t\t\t\t\tvalue: function pasteHTML(index, html, source) {\n\t\t\t\t\t\tthis.clipboard.dangerouslyPasteHTML(index, html, source);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'removeFormat',\n\t\t\t\t\tvalue: function removeFormat(index, length, source) {\n\t\t\t\t\t\tvar _this9 = this;\n\n\t\t\t\t\t\tvar _overload13 = overload(index, length, source);\n\n\t\t\t\t\t\tvar _overload14 = _slicedToArray(_overload13, 4);\n\n\t\t\t\t\t\tindex = _overload14[0];\n\t\t\t\t\t\tlength = _overload14[1];\n\t\t\t\t\t\tsource = _overload14[3];\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\treturn _this9.editor.removeFormat(index, length);\n\t\t\t\t\t\t}, source, index);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setContents',\n\t\t\t\t\tvalue: function setContents(delta) {\n\t\t\t\t\t\tvar _this10 = this;\n\n\t\t\t\t\t\tvar source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\tdelta = new _quillDelta2.default(delta);\n\t\t\t\t\t\t\tvar length = _this10.getLength();\n\t\t\t\t\t\t\tvar deleted = _this10.editor.deleteText(0, length);\n\t\t\t\t\t\t\tvar applied = _this10.editor.applyDelta(delta);\n\t\t\t\t\t\t\tvar lastOp = applied.ops[applied.ops.length - 1];\n\t\t\t\t\t\t\tif (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\\n') {\n\t\t\t\t\t\t\t\t_this10.editor.deleteText(_this10.getLength() - 1, 1);\n\t\t\t\t\t\t\t\tapplied.delete(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar ret = deleted.compose(applied);\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t}, source);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setSelection',\n\t\t\t\t\tvalue: function setSelection(index, length, source) {\n\t\t\t\t\t\tif (index == null) {\n\t\t\t\t\t\t\tthis.selection.setRange(null, length || Quill.sources.API);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _overload15 = overload(index, length, source);\n\n\t\t\t\t\t\t\tvar _overload16 = _slicedToArray(_overload15, 4);\n\n\t\t\t\t\t\t\tindex = _overload16[0];\n\t\t\t\t\t\t\tlength = _overload16[1];\n\t\t\t\t\t\t\tsource = _overload16[3];\n\n\t\t\t\t\t\t\tthis.selection.setRange(new _selection.Range(index, length), source);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (source !== _emitter4.default.sources.SILENT) {\n\t\t\t\t\t\t\tthis.selection.scrollIntoView();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setText',\n\t\t\t\t\tvalue: function setText(text) {\n\t\t\t\t\t\tvar source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t\t\t\t\t\tvar delta = new _quillDelta2.default().insert(text);\n\t\t\t\t\t\treturn this.setContents(delta, source);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update() {\n\t\t\t\t\t\tvar source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n\t\t\t\t\t\tvar change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n\t\t\t\t\t\tthis.selection.update(source);\n\t\t\t\t\t\treturn change;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'updateContents',\n\t\t\t\t\tvalue: function updateContents(delta) {\n\t\t\t\t\t\tvar _this11 = this;\n\n\t\t\t\t\t\tvar source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t\t\t\t\t\treturn modify.call(this, function () {\n\t\t\t\t\t\t\tdelta = new _quillDelta2.default(delta);\n\t\t\t\t\t\t\treturn _this11.editor.applyDelta(delta, source);\n\t\t\t\t\t\t}, source, true);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Quill;\n\t\t\t}();\n\n\t\t\tQuill.DEFAULTS = {\n\t\t\t\tbounds: null,\n\t\t\t\tformats: null,\n\t\t\t\tmodules: {},\n\t\t\t\tplaceholder: '',\n\t\t\t\treadOnly: false,\n\t\t\t\tscrollingContainer: null,\n\t\t\t\tstrict: true,\n\t\t\t\ttheme: 'default'\n\t\t\t};\n\t\t\tQuill.events = _emitter4.default.events;\n\t\t\tQuill.sources = _emitter4.default.sources;\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tQuill.version = false ? 'dev' : \"1.2.0\";\n\n\t\t\tQuill.imports = {\n\t\t\t\t'delta': _quillDelta2.default,\n\t\t\t\t'parchment': _parchment2.default,\n\t\t\t\t'core/module': _module2.default,\n\t\t\t\t'core/theme': _theme2.default\n\t\t\t};\n\n\t\t\tfunction expandConfig(container, userConfig) {\n\t\t\t\tuserConfig = (0, _extend2.default)(true, {\n\t\t\t\t\tcontainer: container,\n\t\t\t\t\tmodules: {\n\t\t\t\t\t\tclipboard: true,\n\t\t\t\t\t\tkeyboard: true,\n\t\t\t\t\t\thistory: true\n\t\t\t\t\t}\n\t\t\t\t}, userConfig);\n\t\t\t\tif (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n\t\t\t\t\tuserConfig.theme = _theme2.default;\n\t\t\t\t} else {\n\t\t\t\t\tuserConfig.theme = Quill.import('themes/' + userConfig.theme);\n\t\t\t\t\tif (userConfig.theme == null) {\n\t\t\t\t\t\tthrow new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);\n\t\t\t\t[themeConfig, userConfig].forEach(function (config) {\n\t\t\t\t\tconfig.modules = config.modules || {};\n\t\t\t\t\tObject.keys(config.modules).forEach(function (module) {\n\t\t\t\t\t\tif (config.modules[module] === true) {\n\t\t\t\t\t\t\tconfig.modules[module] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tvar moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n\t\t\t\tvar moduleConfig = moduleNames.reduce(function (config, name) {\n\t\t\t\t\tvar moduleClass = Quill.import('modules/' + name);\n\t\t\t\t\tif (moduleClass == null) {\n\t\t\t\t\t\tdebug.error('Cannot load ' + name + ' module. Are you sure you registered it?');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconfig[name] = moduleClass.DEFAULTS || {};\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}, {});\n\t\t\t\t// Special case toolbar shorthand\n\t\t\t\tif (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n\t\t\t\t\tuserConfig.modules.toolbar = {\n\t\t\t\t\t\tcontainer: userConfig.modules.toolbar\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tuserConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);\n\t\t\t\t['bounds', 'container', 'scrollingContainer'].forEach(function (key) {\n\t\t\t\t\tif (typeof userConfig[key] === 'string') {\n\t\t\t\t\t\tuserConfig[key] = document.querySelector(userConfig[key]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tuserConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {\n\t\t\t\t\tif (userConfig.modules[name]) {\n\t\t\t\t\t\tconfig[name] = userConfig.modules[name];\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}, {});\n\t\t\t\treturn userConfig;\n\t\t\t}\n\n\t\t\t// Handle selection preservation and TEXT_CHANGE emission\n\t\t\t// common to modification APIs\n\t\t\tfunction modify(modifier, source, index, shift) {\n\t\t\t\tif (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {\n\t\t\t\t\treturn new _quillDelta2.default();\n\t\t\t\t}\n\t\t\t\tvar range = index == null ? null : this.getSelection();\n\t\t\t\tvar oldDelta = this.editor.delta;\n\t\t\t\tvar change = modifier();\n\t\t\t\tif (range != null) {\n\t\t\t\t\tif (index === true) index = range.index;\n\t\t\t\t\tif (shift == null) {\n\t\t\t\t\t\trange = shiftRange(range, change, source);\n\t\t\t\t\t} else if (shift !== 0) {\n\t\t\t\t\t\trange = shiftRange(range, index, shift, source);\n\t\t\t\t\t}\n\t\t\t\t\tthis.setSelection(range, _emitter4.default.sources.SILENT);\n\t\t\t\t}\n\t\t\t\tif (change.length() > 0) {\n\t\t\t\t\tvar _emitter;\n\n\t\t\t\t\tvar args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];\n\t\t\t\t\t(_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n\t\t\t\t\tif (source !== _emitter4.default.sources.SILENT) {\n\t\t\t\t\t\tvar _emitter2;\n\n\t\t\t\t\t\t(_emitter2 = this.emitter).emit.apply(_emitter2, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn change;\n\t\t\t}\n\n\t\t\tfunction overload(index, length, name, value, source) {\n\t\t\t\tvar formats = {};\n\t\t\t\tif (typeof index.index === 'number' && typeof index.length === 'number') {\n\t\t\t\t\t// Allow for throwaway end (used by insertText/insertEmbed)\n\t\t\t\t\tif (typeof length !== 'number') {\n\t\t\t\t\t\tsource = value, value = name, name = length, length = index.length, index = index.index;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlength = index.length, index = index.index;\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof length !== 'number') {\n\t\t\t\t\tsource = value, value = name, name = length, length = 0;\n\t\t\t\t}\n\t\t\t\t// Handle format being object, two format name/value strings or excluded\n\t\t\t\tif ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n\t\t\t\t\tformats = name;\n\t\t\t\t\tsource = value;\n\t\t\t\t} else if (typeof name === 'string') {\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tformats[name] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsource = name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Handle optional source\n\t\t\t\tsource = source || _emitter4.default.sources.API;\n\t\t\t\treturn [index, length, formats, source];\n\t\t\t}\n\n\t\t\tfunction shiftRange(range, index, length, source) {\n\t\t\t\tif (range == null) return null;\n\t\t\t\tvar start = void 0,\n\t\t\t\t    end = void 0;\n\t\t\t\tif (index instanceof _quillDelta2.default) {\n\t\t\t\t\tvar _map = [range.index, range.index + range.length].map(function (pos) {\n\t\t\t\t\t\treturn index.transformPosition(pos, source === _emitter4.default.sources.USER);\n\t\t\t\t\t});\n\n\t\t\t\t\tvar _map2 = _slicedToArray(_map, 2);\n\n\t\t\t\t\tstart = _map2[0];\n\t\t\t\t\tend = _map2[1];\n\t\t\t\t} else {\n\t\t\t\t\tvar _map3 = [range.index, range.index + range.length].map(function (pos) {\n\t\t\t\t\t\tif (pos < index || pos === index && source !== _emitter4.default.sources.USER) return pos;\n\t\t\t\t\t\tif (length >= 0) {\n\t\t\t\t\t\t\treturn pos + length;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Math.max(index, pos + length);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tvar _map4 = _slicedToArray(_map3, 2);\n\n\t\t\t\t\tstart = _map4[0];\n\t\t\t\t\tend = _map4[1];\n\t\t\t\t}\n\t\t\t\treturn new _selection.Range(start, end - start);\n\t\t\t}\n\n\t\t\texports.expandConfig = expandConfig;\n\t\t\texports.overload = overload;\n\t\t\texports.default = Quill;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 19 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tvar elem = document.createElement('div');\n\t\t\telem.classList.toggle('test-class', false);\n\t\t\tif (elem.classList.contains('test-class')) {\n\t\t\t\t(function () {\n\t\t\t\t\tvar _toggle = DOMTokenList.prototype.toggle;\n\t\t\t\t\tDOMTokenList.prototype.toggle = function (token, force) {\n\t\t\t\t\t\tif (arguments.length > 1 && !this.contains(token) === !force) {\n\t\t\t\t\t\t\treturn force;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _toggle.call(this, token);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})();\n\t\t\t}\n\n\t\t\tif (!String.prototype.startsWith) {\n\t\t\t\tString.prototype.startsWith = function (searchString, position) {\n\t\t\t\t\tposition = position || 0;\n\t\t\t\t\treturn this.substr(position, searchString.length) === searchString;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!String.prototype.endsWith) {\n\t\t\t\tString.prototype.endsWith = function (searchString, position) {\n\t\t\t\t\tvar subjectString = this.toString();\n\t\t\t\t\tif (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n\t\t\t\t\t\tposition = subjectString.length;\n\t\t\t\t\t}\n\t\t\t\t\tposition -= searchString.length;\n\t\t\t\t\tvar lastIndex = subjectString.indexOf(searchString, position);\n\t\t\t\t\treturn lastIndex !== -1 && lastIndex === position;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!Array.prototype.find) {\n\t\t\t\tObject.defineProperty(Array.prototype, \"find\", {\n\t\t\t\t\tvalue: function value(predicate) {\n\t\t\t\t\t\tif (this === null) {\n\t\t\t\t\t\t\tthrow new TypeError('Array.prototype.find called on null or undefined');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof predicate !== 'function') {\n\t\t\t\t\t\t\tthrow new TypeError('predicate must be a function');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar list = Object(this);\n\t\t\t\t\t\tvar length = list.length >>> 0;\n\t\t\t\t\t\tvar thisArg = arguments[1];\n\t\t\t\t\t\tvar value;\n\n\t\t\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\t\t\tvalue = list[i];\n\t\t\t\t\t\t\tif (predicate.call(thisArg, value, i, list)) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Disable resizing in Firefox\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", function () {\n\t\t\t\tdocument.execCommand(\"enableObjectResizing\", false, false);\n\t\t\t});\n\n\t\t\t/***/\n\t\t},\n\t\t/* 20 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\tvar diff = __webpack_require__(21);\n\t\t\tvar equal = __webpack_require__(22);\n\t\t\tvar extend = __webpack_require__(25);\n\t\t\tvar op = __webpack_require__(26);\n\n\t\t\tvar NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\n\n\n\t\t\tvar Delta = function Delta(ops) {\n\t\t\t\t// Assume we are given a well formed ops\n\t\t\t\tif (Array.isArray(ops)) {\n\t\t\t\t\tthis.ops = ops;\n\t\t\t\t} else if (ops != null && Array.isArray(ops.ops)) {\n\t\t\t\t\tthis.ops = ops.ops;\n\t\t\t\t} else {\n\t\t\t\t\tthis.ops = [];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tDelta.prototype.insert = function (text, attributes) {\n\t\t\t\tvar newOp = {};\n\t\t\t\tif (text.length === 0) return this;\n\t\t\t\tnewOp.insert = text;\n\t\t\t\tif (attributes != null && (typeof attributes === 'undefined' ? 'undefined' : _typeof2(attributes)) === 'object' && Object.keys(attributes).length > 0) {\n\t\t\t\t\tnewOp.attributes = attributes;\n\t\t\t\t}\n\t\t\t\treturn this.push(newOp);\n\t\t\t};\n\n\t\t\tDelta.prototype['delete'] = function (length) {\n\t\t\t\tif (length <= 0) return this;\n\t\t\t\treturn this.push({ 'delete': length });\n\t\t\t};\n\n\t\t\tDelta.prototype.retain = function (length, attributes) {\n\t\t\t\tif (length <= 0) return this;\n\t\t\t\tvar newOp = { retain: length };\n\t\t\t\tif (attributes != null && (typeof attributes === 'undefined' ? 'undefined' : _typeof2(attributes)) === 'object' && Object.keys(attributes).length > 0) {\n\t\t\t\t\tnewOp.attributes = attributes;\n\t\t\t\t}\n\t\t\t\treturn this.push(newOp);\n\t\t\t};\n\n\t\t\tDelta.prototype.push = function (newOp) {\n\t\t\t\tvar index = this.ops.length;\n\t\t\t\tvar lastOp = this.ops[index - 1];\n\t\t\t\tnewOp = extend(true, {}, newOp);\n\t\t\t\tif ((typeof lastOp === 'undefined' ? 'undefined' : _typeof2(lastOp)) === 'object') {\n\t\t\t\t\tif (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {\n\t\t\t\t\t\tthis.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}\n\t\t\t\t\t// Since it does not matter if we insert before or after deleting at the same index,\n\t\t\t\t\t// always prefer to insert first\n\t\t\t\t\tif (typeof lastOp['delete'] === 'number' && newOp.insert != null) {\n\t\t\t\t\t\tindex -= 1;\n\t\t\t\t\t\tlastOp = this.ops[index - 1];\n\t\t\t\t\t\tif ((typeof lastOp === 'undefined' ? 'undefined' : _typeof2(lastOp)) !== 'object') {\n\t\t\t\t\t\t\tthis.ops.unshift(newOp);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (equal(newOp.attributes, lastOp.attributes)) {\n\t\t\t\t\t\tif (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n\t\t\t\t\t\t\tthis.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n\t\t\t\t\t\t\tif (_typeof2(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t} else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n\t\t\t\t\t\t\tthis.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n\t\t\t\t\t\t\tif (_typeof2(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (index === this.ops.length) {\n\t\t\t\t\tthis.ops.push(newOp);\n\t\t\t\t} else {\n\t\t\t\t\tthis.ops.splice(index, 0, newOp);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tDelta.prototype.filter = function (predicate) {\n\t\t\t\treturn this.ops.filter(predicate);\n\t\t\t};\n\n\t\t\tDelta.prototype.forEach = function (predicate) {\n\t\t\t\tthis.ops.forEach(predicate);\n\t\t\t};\n\n\t\t\tDelta.prototype.map = function (predicate) {\n\t\t\t\treturn this.ops.map(predicate);\n\t\t\t};\n\n\t\t\tDelta.prototype.partition = function (predicate) {\n\t\t\t\tvar passed = [],\n\t\t\t\t    failed = [];\n\t\t\t\tthis.forEach(function (op) {\n\t\t\t\t\tvar target = predicate(op) ? passed : failed;\n\t\t\t\t\ttarget.push(op);\n\t\t\t\t});\n\t\t\t\treturn [passed, failed];\n\t\t\t};\n\n\t\t\tDelta.prototype.reduce = function (predicate, initial) {\n\t\t\t\treturn this.ops.reduce(predicate, initial);\n\t\t\t};\n\n\t\t\tDelta.prototype.chop = function () {\n\t\t\t\tvar lastOp = this.ops[this.ops.length - 1];\n\t\t\t\tif (lastOp && lastOp.retain && !lastOp.attributes) {\n\t\t\t\t\tthis.ops.pop();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tDelta.prototype.length = function () {\n\t\t\t\treturn this.reduce(function (length, elem) {\n\t\t\t\t\treturn length + op.length(elem);\n\t\t\t\t}, 0);\n\t\t\t};\n\n\t\t\tDelta.prototype.slice = function (start, end) {\n\t\t\t\tstart = start || 0;\n\t\t\t\tif (typeof end !== 'number') end = Infinity;\n\t\t\t\tvar ops = [];\n\t\t\t\tvar iter = op.iterator(this.ops);\n\t\t\t\tvar index = 0;\n\t\t\t\twhile (index < end && iter.hasNext()) {\n\t\t\t\t\tvar nextOp;\n\t\t\t\t\tif (index < start) {\n\t\t\t\t\t\tnextOp = iter.next(start - index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextOp = iter.next(end - index);\n\t\t\t\t\t\tops.push(nextOp);\n\t\t\t\t\t}\n\t\t\t\t\tindex += op.length(nextOp);\n\t\t\t\t}\n\t\t\t\treturn new Delta(ops);\n\t\t\t};\n\n\t\t\tDelta.prototype.compose = function (other) {\n\t\t\t\tvar thisIter = op.iterator(this.ops);\n\t\t\t\tvar otherIter = op.iterator(other.ops);\n\t\t\t\tvar delta = new Delta();\n\t\t\t\twhile (thisIter.hasNext() || otherIter.hasNext()) {\n\t\t\t\t\tif (otherIter.peekType() === 'insert') {\n\t\t\t\t\t\tdelta.push(otherIter.next());\n\t\t\t\t\t} else if (thisIter.peekType() === 'delete') {\n\t\t\t\t\t\tdelta.push(thisIter.next());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n\t\t\t\t\t\tvar thisOp = thisIter.next(length);\n\t\t\t\t\t\tvar otherOp = otherIter.next(length);\n\t\t\t\t\t\tif (typeof otherOp.retain === 'number') {\n\t\t\t\t\t\t\tvar newOp = {};\n\t\t\t\t\t\t\tif (typeof thisOp.retain === 'number') {\n\t\t\t\t\t\t\t\tnewOp.retain = length;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewOp.insert = thisOp.insert;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Preserve null when composing with a retain, otherwise remove it for inserts\n\t\t\t\t\t\t\tvar attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n\t\t\t\t\t\t\tif (attributes) newOp.attributes = attributes;\n\t\t\t\t\t\t\tdelta.push(newOp);\n\t\t\t\t\t\t\t// Other op should be delete, we could be an insert or retain\n\t\t\t\t\t\t\t// Insert + delete cancels out\n\t\t\t\t\t\t} else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {\n\t\t\t\t\t\t\tdelta.push(otherOp);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn delta.chop();\n\t\t\t};\n\n\t\t\tDelta.prototype.concat = function (other) {\n\t\t\t\tvar delta = new Delta(this.ops.slice());\n\t\t\t\tif (other.ops.length > 0) {\n\t\t\t\t\tdelta.push(other.ops[0]);\n\t\t\t\t\tdelta.ops = delta.ops.concat(other.ops.slice(1));\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t};\n\n\t\t\tDelta.prototype.diff = function (other, index) {\n\t\t\t\tif (this.ops === other.ops) {\n\t\t\t\t\treturn new Delta();\n\t\t\t\t}\n\t\t\t\tvar strings = [this, other].map(function (delta) {\n\t\t\t\t\treturn delta.map(function (op) {\n\t\t\t\t\t\tif (op.insert != null) {\n\t\t\t\t\t\t\treturn typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar prep = ops === other.ops ? 'on' : 'with';\n\t\t\t\t\t\tthrow new Error('diff() called ' + prep + ' non-document');\n\t\t\t\t\t}).join('');\n\t\t\t\t});\n\t\t\t\tvar delta = new Delta();\n\t\t\t\tvar diffResult = diff(strings[0], strings[1], index);\n\t\t\t\tvar thisIter = op.iterator(this.ops);\n\t\t\t\tvar otherIter = op.iterator(other.ops);\n\t\t\t\tdiffResult.forEach(function (component) {\n\t\t\t\t\tvar length = component[1].length;\n\t\t\t\t\twhile (length > 0) {\n\t\t\t\t\t\tvar opLength = 0;\n\t\t\t\t\t\tswitch (component[0]) {\n\t\t\t\t\t\t\tcase diff.INSERT:\n\t\t\t\t\t\t\t\topLength = Math.min(otherIter.peekLength(), length);\n\t\t\t\t\t\t\t\tdelta.push(otherIter.next(opLength));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase diff.DELETE:\n\t\t\t\t\t\t\t\topLength = Math.min(length, thisIter.peekLength());\n\t\t\t\t\t\t\t\tthisIter.next(opLength);\n\t\t\t\t\t\t\t\tdelta['delete'](opLength);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase diff.EQUAL:\n\t\t\t\t\t\t\t\topLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n\t\t\t\t\t\t\t\tvar thisOp = thisIter.next(opLength);\n\t\t\t\t\t\t\t\tvar otherOp = otherIter.next(opLength);\n\t\t\t\t\t\t\t\tif (equal(thisOp.insert, otherOp.insert)) {\n\t\t\t\t\t\t\t\t\tdelta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdelta.push(otherOp)['delete'](opLength);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlength -= opLength;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn delta.chop();\n\t\t\t};\n\n\t\t\tDelta.prototype.eachLine = function (predicate, newline) {\n\t\t\t\tnewline = newline || '\\n';\n\t\t\t\tvar iter = op.iterator(this.ops);\n\t\t\t\tvar line = new Delta();\n\t\t\t\twhile (iter.hasNext()) {\n\t\t\t\t\tif (iter.peekType() !== 'insert') return;\n\t\t\t\t\tvar thisOp = iter.peek();\n\t\t\t\t\tvar start = op.length(thisOp) - iter.peekLength();\n\t\t\t\t\tvar index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;\n\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\tline.push(iter.next());\n\t\t\t\t\t} else if (index > 0) {\n\t\t\t\t\t\tline.push(iter.next(index));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpredicate(line, iter.next(1).attributes || {});\n\t\t\t\t\t\tline = new Delta();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line.length() > 0) {\n\t\t\t\t\tpredicate(line, {});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tDelta.prototype.transform = function (other, priority) {\n\t\t\t\tpriority = !!priority;\n\t\t\t\tif (typeof other === 'number') {\n\t\t\t\t\treturn this.transformPosition(other, priority);\n\t\t\t\t}\n\t\t\t\tvar thisIter = op.iterator(this.ops);\n\t\t\t\tvar otherIter = op.iterator(other.ops);\n\t\t\t\tvar delta = new Delta();\n\t\t\t\twhile (thisIter.hasNext() || otherIter.hasNext()) {\n\t\t\t\t\tif (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n\t\t\t\t\t\tdelta.retain(op.length(thisIter.next()));\n\t\t\t\t\t} else if (otherIter.peekType() === 'insert') {\n\t\t\t\t\t\tdelta.push(otherIter.next());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n\t\t\t\t\t\tvar thisOp = thisIter.next(length);\n\t\t\t\t\t\tvar otherOp = otherIter.next(length);\n\t\t\t\t\t\tif (thisOp['delete']) {\n\t\t\t\t\t\t\t// Our delete either makes their delete redundant or removes their retain\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (otherOp['delete']) {\n\t\t\t\t\t\t\tdelta.push(otherOp);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// We retain either their retain or insert\n\t\t\t\t\t\t\tdelta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn delta.chop();\n\t\t\t};\n\n\t\t\tDelta.prototype.transformPosition = function (index, priority) {\n\t\t\t\tpriority = !!priority;\n\t\t\t\tvar thisIter = op.iterator(this.ops);\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile (thisIter.hasNext() && offset <= index) {\n\t\t\t\t\tvar length = thisIter.peekLength();\n\t\t\t\t\tvar nextType = thisIter.peekType();\n\t\t\t\t\tthisIter.next();\n\t\t\t\t\tif (nextType === 'delete') {\n\t\t\t\t\t\tindex -= Math.min(length, index - offset);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (nextType === 'insert' && (offset < index || !priority)) {\n\t\t\t\t\t\tindex += length;\n\t\t\t\t\t}\n\t\t\t\t\toffset += length;\n\t\t\t\t}\n\t\t\t\treturn index;\n\t\t\t};\n\n\t\t\tmodule.exports = Delta;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 21 */\n\t\t/***/function (module, exports) {\n\n\t\t\t/**\n    * This library modifies the diff-patch-match library by Neil Fraser\n    * by removing the patch and match functionality and certain advanced\n    * options in the diff function. The original license is as follows:\n    *\n    * ===\n    *\n    * Diff Match and Patch\n    *\n    * Copyright 2006 Google Inc.\n    * http://code.google.com/p/google-diff-match-patch/\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n\n\t\t\t/**\n    * The data structure representing a diff is an array of tuples:\n    * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n    * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n    */\n\t\t\tvar DIFF_DELETE = -1;\n\t\t\tvar DIFF_INSERT = 1;\n\t\t\tvar DIFF_EQUAL = 0;\n\n\t\t\t/**\n    * Find the differences between two texts.  Simplifies the problem by stripping\n    * any common prefix or suffix off the texts before diffing.\n    * @param {string} text1 Old string to be diffed.\n    * @param {string} text2 New string to be diffed.\n    * @param {Int} cursor_pos Expected edit position in text1 (optional)\n    * @return {Array} Array of diff tuples.\n    */\n\t\t\tfunction diff_main(text1, text2, cursor_pos) {\n\t\t\t\t// Check for equality (speedup).\n\t\t\t\tif (text1 == text2) {\n\t\t\t\t\tif (text1) {\n\t\t\t\t\t\treturn [[DIFF_EQUAL, text1]];\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// Check cursor_pos within bounds\n\t\t\t\tif (cursor_pos < 0 || text1.length < cursor_pos) {\n\t\t\t\t\tcursor_pos = null;\n\t\t\t\t}\n\n\t\t\t\t// Trim off common prefix (speedup).\n\t\t\t\tvar commonlength = diff_commonPrefix(text1, text2);\n\t\t\t\tvar commonprefix = text1.substring(0, commonlength);\n\t\t\t\ttext1 = text1.substring(commonlength);\n\t\t\t\ttext2 = text2.substring(commonlength);\n\n\t\t\t\t// Trim off common suffix (speedup).\n\t\t\t\tcommonlength = diff_commonSuffix(text1, text2);\n\t\t\t\tvar commonsuffix = text1.substring(text1.length - commonlength);\n\t\t\t\ttext1 = text1.substring(0, text1.length - commonlength);\n\t\t\t\ttext2 = text2.substring(0, text2.length - commonlength);\n\n\t\t\t\t// Compute the diff on the middle block.\n\t\t\t\tvar diffs = diff_compute_(text1, text2);\n\n\t\t\t\t// Restore the prefix and suffix.\n\t\t\t\tif (commonprefix) {\n\t\t\t\t\tdiffs.unshift([DIFF_EQUAL, commonprefix]);\n\t\t\t\t}\n\t\t\t\tif (commonsuffix) {\n\t\t\t\t\tdiffs.push([DIFF_EQUAL, commonsuffix]);\n\t\t\t\t}\n\t\t\t\tdiff_cleanupMerge(diffs);\n\t\t\t\tif (cursor_pos != null) {\n\t\t\t\t\tdiffs = fix_cursor(diffs, cursor_pos);\n\t\t\t\t}\n\t\t\t\treturn diffs;\n\t\t\t};\n\n\t\t\t/**\n    * Find the differences between two texts.  Assumes that the texts do not\n    * have any common prefix or suffix.\n    * @param {string} text1 Old string to be diffed.\n    * @param {string} text2 New string to be diffed.\n    * @return {Array} Array of diff tuples.\n    */\n\t\t\tfunction diff_compute_(text1, text2) {\n\t\t\t\tvar diffs;\n\n\t\t\t\tif (!text1) {\n\t\t\t\t\t// Just add some text (speedup).\n\t\t\t\t\treturn [[DIFF_INSERT, text2]];\n\t\t\t\t}\n\n\t\t\t\tif (!text2) {\n\t\t\t\t\t// Just delete some text (speedup).\n\t\t\t\t\treturn [[DIFF_DELETE, text1]];\n\t\t\t\t}\n\n\t\t\t\tvar longtext = text1.length > text2.length ? text1 : text2;\n\t\t\t\tvar shorttext = text1.length > text2.length ? text2 : text1;\n\t\t\t\tvar i = longtext.indexOf(shorttext);\n\t\t\t\tif (i != -1) {\n\t\t\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\t\t\tdiffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n\t\t\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\t\t\tif (text1.length > text2.length) {\n\t\t\t\t\t\tdiffs[0][0] = diffs[2][0] = DIFF_DELETE;\n\t\t\t\t\t}\n\t\t\t\t\treturn diffs;\n\t\t\t\t}\n\n\t\t\t\tif (shorttext.length == 1) {\n\t\t\t\t\t// Single character string.\n\t\t\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\t\t\treturn [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t\t\t\t}\n\n\t\t\t\t// Check to see if the problem can be split in two.\n\t\t\t\tvar hm = diff_halfMatch_(text1, text2);\n\t\t\t\tif (hm) {\n\t\t\t\t\t// A half-match was found, sort out the return data.\n\t\t\t\t\tvar text1_a = hm[0];\n\t\t\t\t\tvar text1_b = hm[1];\n\t\t\t\t\tvar text2_a = hm[2];\n\t\t\t\t\tvar text2_b = hm[3];\n\t\t\t\t\tvar mid_common = hm[4];\n\t\t\t\t\t// Send both pairs off for separate processing.\n\t\t\t\t\tvar diffs_a = diff_main(text1_a, text2_a);\n\t\t\t\t\tvar diffs_b = diff_main(text1_b, text2_b);\n\t\t\t\t\t// Merge the results.\n\t\t\t\t\treturn diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n\t\t\t\t}\n\n\t\t\t\treturn diff_bisect_(text1, text2);\n\t\t\t};\n\n\t\t\t/**\n    * Find the 'middle snake' of a diff, split the problem in two\n    * and return the recursively constructed diff.\n    * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n    * @param {string} text1 Old string to be diffed.\n    * @param {string} text2 New string to be diffed.\n    * @return {Array} Array of diff tuples.\n    * @private\n    */\n\t\t\tfunction diff_bisect_(text1, text2) {\n\t\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\t\tvar text1_length = text1.length;\n\t\t\t\tvar text2_length = text2.length;\n\t\t\t\tvar max_d = Math.ceil((text1_length + text2_length) / 2);\n\t\t\t\tvar v_offset = max_d;\n\t\t\t\tvar v_length = 2 * max_d;\n\t\t\t\tvar v1 = new Array(v_length);\n\t\t\t\tvar v2 = new Array(v_length);\n\t\t\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t\t\t// integers and undefined.\n\t\t\t\tfor (var x = 0; x < v_length; x++) {\n\t\t\t\t\tv1[x] = -1;\n\t\t\t\t\tv2[x] = -1;\n\t\t\t\t}\n\t\t\t\tv1[v_offset + 1] = 0;\n\t\t\t\tv2[v_offset + 1] = 0;\n\t\t\t\tvar delta = text1_length - text2_length;\n\t\t\t\t// If the total number of characters is odd, then the front path will collide\n\t\t\t\t// with the reverse path.\n\t\t\t\tvar front = delta % 2 != 0;\n\t\t\t\t// Offsets for start and end of k loop.\n\t\t\t\t// Prevents mapping of space beyond the grid.\n\t\t\t\tvar k1start = 0;\n\t\t\t\tvar k1end = 0;\n\t\t\t\tvar k2start = 0;\n\t\t\t\tvar k2end = 0;\n\t\t\t\tfor (var d = 0; d < max_d; d++) {\n\t\t\t\t\t// Walk the front path one step.\n\t\t\t\t\tfor (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n\t\t\t\t\t\tvar k1_offset = v_offset + k1;\n\t\t\t\t\t\tvar x1;\n\t\t\t\t\t\tif (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n\t\t\t\t\t\t\tx1 = v1[k1_offset + 1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tx1 = v1[k1_offset - 1] + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y1 = x1 - k1;\n\t\t\t\t\t\twhile (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n\t\t\t\t\t\t\tx1++;\n\t\t\t\t\t\t\ty1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv1[k1_offset] = x1;\n\t\t\t\t\t\tif (x1 > text1_length) {\n\t\t\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\t\t\tk1end += 2;\n\t\t\t\t\t\t} else if (y1 > text2_length) {\n\t\t\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\t\t\tk1start += 2;\n\t\t\t\t\t\t} else if (front) {\n\t\t\t\t\t\t\tvar k2_offset = v_offset + delta - k1;\n\t\t\t\t\t\t\tif (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n\t\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\t\tvar x2 = text1_length - v2[k2_offset];\n\t\t\t\t\t\t\t\tif (x1 >= x2) {\n\t\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\t\treturn diff_bisectSplit_(text1, text2, x1, y1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Walk the reverse path one step.\n\t\t\t\t\tfor (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n\t\t\t\t\t\tvar k2_offset = v_offset + k2;\n\t\t\t\t\t\tvar x2;\n\t\t\t\t\t\tif (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n\t\t\t\t\t\t\tx2 = v2[k2_offset + 1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tx2 = v2[k2_offset - 1] + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y2 = x2 - k2;\n\t\t\t\t\t\twhile (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n\t\t\t\t\t\t\tx2++;\n\t\t\t\t\t\t\ty2++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv2[k2_offset] = x2;\n\t\t\t\t\t\tif (x2 > text1_length) {\n\t\t\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\t\t\tk2end += 2;\n\t\t\t\t\t\t} else if (y2 > text2_length) {\n\t\t\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\t\t\tk2start += 2;\n\t\t\t\t\t\t} else if (!front) {\n\t\t\t\t\t\t\tvar k1_offset = v_offset + delta - k2;\n\t\t\t\t\t\t\tif (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n\t\t\t\t\t\t\t\tvar x1 = v1[k1_offset];\n\t\t\t\t\t\t\t\tvar y1 = v_offset + x1 - k1_offset;\n\t\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\t\tx2 = text1_length - x2;\n\t\t\t\t\t\t\t\tif (x1 >= x2) {\n\t\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\t\treturn diff_bisectSplit_(text1, text2, x1, y1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Diff took too long and hit the deadline or\n\t\t\t\t// number of diffs equals number of characters, no commonality at all.\n\t\t\t\treturn [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t\t\t};\n\n\t\t\t/**\n    * Given the location of the 'middle snake', split the diff in two parts\n    * and recurse.\n    * @param {string} text1 Old string to be diffed.\n    * @param {string} text2 New string to be diffed.\n    * @param {number} x Index of split point in text1.\n    * @param {number} y Index of split point in text2.\n    * @return {Array} Array of diff tuples.\n    */\n\t\t\tfunction diff_bisectSplit_(text1, text2, x, y) {\n\t\t\t\tvar text1a = text1.substring(0, x);\n\t\t\t\tvar text2a = text2.substring(0, y);\n\t\t\t\tvar text1b = text1.substring(x);\n\t\t\t\tvar text2b = text2.substring(y);\n\n\t\t\t\t// Compute both diffs serially.\n\t\t\t\tvar diffs = diff_main(text1a, text2a);\n\t\t\t\tvar diffsb = diff_main(text1b, text2b);\n\n\t\t\t\treturn diffs.concat(diffsb);\n\t\t\t};\n\n\t\t\t/**\n    * Determine the common prefix of two strings.\n    * @param {string} text1 First string.\n    * @param {string} text2 Second string.\n    * @return {number} The number of characters common to the start of each\n    *     string.\n    */\n\t\t\tfunction diff_commonPrefix(text1, text2) {\n\t\t\t\t// Quick check for common null cases.\n\t\t\t\tif (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\t// Binary search.\n\t\t\t\t// Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\t\t\t\tvar pointermin = 0;\n\t\t\t\tvar pointermax = Math.min(text1.length, text2.length);\n\t\t\t\tvar pointermid = pointermax;\n\t\t\t\tvar pointerstart = 0;\n\t\t\t\twhile (pointermin < pointermid) {\n\t\t\t\t\tif (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n\t\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\t\tpointerstart = pointermin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t\t}\n\t\t\t\t\tpointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t\t\t\t}\n\t\t\t\treturn pointermid;\n\t\t\t};\n\n\t\t\t/**\n    * Determine the common suffix of two strings.\n    * @param {string} text1 First string.\n    * @param {string} text2 Second string.\n    * @return {number} The number of characters common to the end of each string.\n    */\n\t\t\tfunction diff_commonSuffix(text1, text2) {\n\t\t\t\t// Quick check for common null cases.\n\t\t\t\tif (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\t// Binary search.\n\t\t\t\t// Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\t\t\t\tvar pointermin = 0;\n\t\t\t\tvar pointermax = Math.min(text1.length, text2.length);\n\t\t\t\tvar pointermid = pointermax;\n\t\t\t\tvar pointerend = 0;\n\t\t\t\twhile (pointermin < pointermid) {\n\t\t\t\t\tif (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n\t\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\t\tpointerend = pointermin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t\t}\n\t\t\t\t\tpointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t\t\t\t}\n\t\t\t\treturn pointermid;\n\t\t\t};\n\n\t\t\t/**\n    * Do the two texts share a substring which is at least half the length of the\n    * longer text?\n    * This speedup can produce non-minimal diffs.\n    * @param {string} text1 First string.\n    * @param {string} text2 Second string.\n    * @return {Array.<string>} Five element Array, containing the prefix of\n    *     text1, the suffix of text1, the prefix of text2, the suffix of\n    *     text2 and the common middle.  Or null if there was no match.\n    */\n\t\t\tfunction diff_halfMatch_(text1, text2) {\n\t\t\t\tvar longtext = text1.length > text2.length ? text1 : text2;\n\t\t\t\tvar shorttext = text1.length > text2.length ? text2 : text1;\n\t\t\t\tif (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n\t\t\t\t\treturn null; // Pointless.\n\t\t\t\t}\n\n\t\t\t\t/**\n     * Does a substring of shorttext exist within longtext such that the substring\n     * is at least half the length of longtext?\n     * Closure, but does not reference any external variables.\n     * @param {string} longtext Longer string.\n     * @param {string} shorttext Shorter string.\n     * @param {number} i Start index of quarter length substring within longtext.\n     * @return {Array.<string>} Five element Array, containing the prefix of\n     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n     *     of shorttext and the common middle.  Or null if there was no match.\n     * @private\n     */\n\t\t\t\tfunction diff_halfMatchI_(longtext, shorttext, i) {\n\t\t\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\t\t\tvar seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n\t\t\t\t\tvar j = -1;\n\t\t\t\t\tvar best_common = '';\n\t\t\t\t\tvar best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\t\t\t\t\twhile ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n\t\t\t\t\t\tvar prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n\t\t\t\t\t\tvar suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\t\t\t\t\t\tif (best_common.length < suffixLength + prefixLength) {\n\t\t\t\t\t\t\tbest_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n\t\t\t\t\t\t\tbest_longtext_a = longtext.substring(0, i - suffixLength);\n\t\t\t\t\t\t\tbest_longtext_b = longtext.substring(i + prefixLength);\n\t\t\t\t\t\t\tbest_shorttext_a = shorttext.substring(0, j - suffixLength);\n\t\t\t\t\t\t\tbest_shorttext_b = shorttext.substring(j + prefixLength);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (best_common.length * 2 >= longtext.length) {\n\t\t\t\t\t\treturn [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// First check if the second quarter is the seed for a half-match.\n\t\t\t\tvar hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n\t\t\t\t// Check again based on the third quarter.\n\t\t\t\tvar hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n\t\t\t\tvar hm;\n\t\t\t\tif (!hm1 && !hm2) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (!hm2) {\n\t\t\t\t\thm = hm1;\n\t\t\t\t} else if (!hm1) {\n\t\t\t\t\thm = hm2;\n\t\t\t\t} else {\n\t\t\t\t\t// Both matched.  Select the longest.\n\t\t\t\t\thm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n\t\t\t\t}\n\n\t\t\t\t// A half-match was found, sort out the return data.\n\t\t\t\tvar text1_a, text1_b, text2_a, text2_b;\n\t\t\t\tif (text1.length > text2.length) {\n\t\t\t\t\ttext1_a = hm[0];\n\t\t\t\t\ttext1_b = hm[1];\n\t\t\t\t\ttext2_a = hm[2];\n\t\t\t\t\ttext2_b = hm[3];\n\t\t\t\t} else {\n\t\t\t\t\ttext2_a = hm[0];\n\t\t\t\t\ttext2_b = hm[1];\n\t\t\t\t\ttext1_a = hm[2];\n\t\t\t\t\ttext1_b = hm[3];\n\t\t\t\t}\n\t\t\t\tvar mid_common = hm[4];\n\t\t\t\treturn [text1_a, text1_b, text2_a, text2_b, mid_common];\n\t\t\t};\n\n\t\t\t/**\n    * Reorder and merge like edit sections.  Merge equalities.\n    * Any edit section can move as long as it doesn't cross an equality.\n    * @param {Array} diffs Array of diff tuples.\n    */\n\t\t\tfunction diff_cleanupMerge(diffs) {\n\t\t\t\tdiffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n\t\t\t\tvar pointer = 0;\n\t\t\t\tvar count_delete = 0;\n\t\t\t\tvar count_insert = 0;\n\t\t\t\tvar text_delete = '';\n\t\t\t\tvar text_insert = '';\n\t\t\t\tvar commonlength;\n\t\t\t\twhile (pointer < diffs.length) {\n\t\t\t\t\tswitch (diffs[pointer][0]) {\n\t\t\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\t\t\tcount_insert++;\n\t\t\t\t\t\t\ttext_insert += diffs[pointer][1];\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\t\t\tcount_delete++;\n\t\t\t\t\t\t\ttext_delete += diffs[pointer][1];\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase DIFF_EQUAL:\n\t\t\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\t\t\tif (count_delete + count_insert > 1) {\n\t\t\t\t\t\t\t\tif (count_delete !== 0 && count_insert !== 0) {\n\t\t\t\t\t\t\t\t\t// Factor out any common prefixies.\n\t\t\t\t\t\t\t\t\tcommonlength = diff_commonPrefix(text_insert, text_delete);\n\t\t\t\t\t\t\t\t\tif (commonlength !== 0) {\n\t\t\t\t\t\t\t\t\t\tif (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n\t\t\t\t\t\t\t\t\t\t\tdiffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tdiffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n\t\t\t\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\ttext_insert = text_insert.substring(commonlength);\n\t\t\t\t\t\t\t\t\t\ttext_delete = text_delete.substring(commonlength);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\t\t\t\tcommonlength = diff_commonSuffix(text_insert, text_delete);\n\t\t\t\t\t\t\t\t\tif (commonlength !== 0) {\n\t\t\t\t\t\t\t\t\t\tdiffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n\t\t\t\t\t\t\t\t\t\ttext_insert = text_insert.substring(0, text_insert.length - commonlength);\n\t\t\t\t\t\t\t\t\t\ttext_delete = text_delete.substring(0, text_delete.length - commonlength);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\t\t\tif (count_delete === 0) {\n\t\t\t\t\t\t\t\t\tdiffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n\t\t\t\t\t\t\t\t} else if (count_insert === 0) {\n\t\t\t\t\t\t\t\t\tdiffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdiffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n\t\t\t\t\t\t\t} else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n\t\t\t\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\t\t\t\tdiffs[pointer - 1][1] += diffs[pointer][1];\n\t\t\t\t\t\t\t\tdiffs.splice(pointer, 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcount_insert = 0;\n\t\t\t\t\t\t\tcount_delete = 0;\n\t\t\t\t\t\t\ttext_delete = '';\n\t\t\t\t\t\t\ttext_insert = '';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diffs[diffs.length - 1][1] === '') {\n\t\t\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t\t\t}\n\n\t\t\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t\t\t// which can be shifted sideways to eliminate an equality.\n\t\t\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\t\t\tvar changes = false;\n\t\t\t\tpointer = 1;\n\t\t\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\t\t\twhile (pointer < diffs.length - 1) {\n\t\t\t\t\tif (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n\t\t\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\t\t\tif (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n\t\t\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\t\t\tdiffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n\t\t\t\t\t\t\tdiffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n\t\t\t\t\t\t\tdiffs.splice(pointer - 1, 1);\n\t\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t\t} else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n\t\t\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\t\t\tdiffs[pointer - 1][1] += diffs[pointer + 1][1];\n\t\t\t\t\t\t\tdiffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n\t\t\t\t\t\t\tdiffs.splice(pointer + 1, 1);\n\t\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\t\t\tif (changes) {\n\t\t\t\t\tdiff_cleanupMerge(diffs);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar diff = diff_main;\n\t\t\tdiff.INSERT = DIFF_INSERT;\n\t\t\tdiff.DELETE = DIFF_DELETE;\n\t\t\tdiff.EQUAL = DIFF_EQUAL;\n\n\t\t\tmodule.exports = diff;\n\n\t\t\t/*\n    * Modify a diff such that the cursor position points to the start of a change:\n    * E.g.\n    *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n    *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n    *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n    *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n    *\n    * @param {Array} diffs Array of diff tuples\n    * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n    * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n    */\n\t\t\tfunction cursor_normalize_diff(diffs, cursor_pos) {\n\t\t\t\tif (cursor_pos === 0) {\n\t\t\t\t\treturn [DIFF_EQUAL, diffs];\n\t\t\t\t}\n\t\t\t\tfor (var current_pos = 0, i = 0; i < diffs.length; i++) {\n\t\t\t\t\tvar d = diffs[i];\n\t\t\t\t\tif (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n\t\t\t\t\t\tvar next_pos = current_pos + d[1].length;\n\t\t\t\t\t\tif (cursor_pos === next_pos) {\n\t\t\t\t\t\t\treturn [i + 1, diffs];\n\t\t\t\t\t\t} else if (cursor_pos < next_pos) {\n\t\t\t\t\t\t\t// copy to prevent side effects\n\t\t\t\t\t\t\tdiffs = diffs.slice();\n\t\t\t\t\t\t\t// split d into two diff changes\n\t\t\t\t\t\t\tvar split_pos = cursor_pos - current_pos;\n\t\t\t\t\t\t\tvar d_left = [d[0], d[1].slice(0, split_pos)];\n\t\t\t\t\t\t\tvar d_right = [d[0], d[1].slice(split_pos)];\n\t\t\t\t\t\t\tdiffs.splice(i, 1, d_left, d_right);\n\t\t\t\t\t\t\treturn [i + 1, diffs];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrent_pos = next_pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error('cursor_pos is out of bounds!');\n\t\t\t}\n\n\t\t\t/*\n    * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n    *\n    * Case 1)\n    *   Check if a naive shift is possible:\n    *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n    *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n    * Case 2)\n    *   Check if the following shifts are possible:\n    *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n    *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n    *         ^            ^\n    *         d          d_next\n    *\n    * @param {Array} diffs Array of diff tuples\n    * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n    * @return {Array} Array of diff tuples\n    */\n\t\t\tfunction fix_cursor(diffs, cursor_pos) {\n\t\t\t\tvar norm = cursor_normalize_diff(diffs, cursor_pos);\n\t\t\t\tvar ndiffs = norm[1];\n\t\t\t\tvar cursor_pointer = norm[0];\n\t\t\t\tvar d = ndiffs[cursor_pointer];\n\t\t\t\tvar d_next = ndiffs[cursor_pointer + 1];\n\n\t\t\t\tif (d == null) {\n\t\t\t\t\t// Text was deleted from end of original string,\n\t\t\t\t\t// cursor is now out of bounds in new string\n\t\t\t\t\treturn diffs;\n\t\t\t\t} else if (d[0] !== DIFF_EQUAL) {\n\t\t\t\t\t// A modification happened at the cursor location.\n\t\t\t\t\t// This is the expected outcome, so we can return the original diff.\n\t\t\t\t\treturn diffs;\n\t\t\t\t} else {\n\t\t\t\t\tif (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n\t\t\t\t\t\t// Case 1)\n\t\t\t\t\t\t// It is possible to perform a naive shift\n\t\t\t\t\t\tndiffs.splice(cursor_pointer, 2, d_next, d);\n\t\t\t\t\t\treturn merge_tuples(ndiffs, cursor_pointer, 2);\n\t\t\t\t\t} else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n\t\t\t\t\t\t// Case 2)\n\t\t\t\t\t\t// d[1] is a prefix of d_next[1]\n\t\t\t\t\t\t// We can assume that d_next[0] !== 0, since d[0] === 0\n\t\t\t\t\t\t// Shift edit locations..\n\t\t\t\t\t\tndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n\t\t\t\t\t\tvar suffix = d_next[1].slice(d[1].length);\n\t\t\t\t\t\tif (suffix.length > 0) {\n\t\t\t\t\t\t\tndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn merge_tuples(ndiffs, cursor_pointer, 3);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Not possible to perform any modification\n\t\t\t\t\t\treturn diffs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n    * Try to merge tuples with their neigbors in a given range.\n    * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n    *\n    * @param {Array} diffs Array of diff tuples.\n    * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n    * @param {Int} length Number of consecutive elements to check.\n    * @return {Array} Array of merged diff tuples.\n    */\n\t\t\tfunction merge_tuples(diffs, start, length) {\n\t\t\t\t// Check from (start-1) to (start+length).\n\t\t\t\tfor (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n\t\t\t\t\tif (i + 1 < diffs.length) {\n\t\t\t\t\t\tvar left_d = diffs[i];\n\t\t\t\t\t\tvar right_d = diffs[i + 1];\n\t\t\t\t\t\tif (left_d[0] === right_d[1]) {\n\t\t\t\t\t\t\tdiffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn diffs;\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 22 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\tvar pSlice = Array.prototype.slice;\n\t\t\tvar objectKeys = __webpack_require__(23);\n\t\t\tvar isArguments = __webpack_require__(24);\n\n\t\t\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t\t\t\tif (!opts) opts = {};\n\t\t\t\t// 7.1. All identical values are equivalent, as determined by ===.\n\t\t\t\tif (actual === expected) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (actual instanceof Date && expected instanceof Date) {\n\t\t\t\t\treturn actual.getTime() === expected.getTime();\n\n\t\t\t\t\t// 7.3. Other pairs that do not both pass typeof value == 'object',\n\t\t\t\t\t// equivalence is determined by ==.\n\t\t\t\t} else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof2(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof2(expected)) != 'object') {\n\t\t\t\t\treturn opts.strict ? actual === expected : actual == expected;\n\n\t\t\t\t\t// 7.4. For all other Object pairs, including Array objects, equivalence is\n\t\t\t\t\t// determined by having the same number of owned properties (as verified\n\t\t\t\t\t// with Object.prototype.hasOwnProperty.call), the same set of keys\n\t\t\t\t\t// (although not necessarily the same order), equivalent values for every\n\t\t\t\t\t// corresponding key, and an identical 'prototype' property. Note: this\n\t\t\t\t\t// accounts for both named and indexed properties on Arrays.\n\t\t\t\t} else {\n\t\t\t\t\treturn objEquiv(actual, expected, opts);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction isUndefinedOrNull(value) {\n\t\t\t\treturn value === null || value === undefined;\n\t\t\t}\n\n\t\t\tfunction isBuffer(x) {\n\t\t\t\tif (!x || (typeof x === 'undefined' ? 'undefined' : _typeof2(x)) !== 'object' || typeof x.length !== 'number') return false;\n\t\t\t\tif (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (x.length > 0 && typeof x[0] !== 'number') return false;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tfunction objEquiv(a, b, opts) {\n\t\t\t\tvar i, key;\n\t\t\t\tif (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;\n\t\t\t\t// an identical 'prototype' property.\n\t\t\t\tif (a.prototype !== b.prototype) return false;\n\t\t\t\t//~~~I've managed to break Object.keys through screwy arguments passing.\n\t\t\t\t//   Converting to array solves the problem.\n\t\t\t\tif (isArguments(a)) {\n\t\t\t\t\tif (!isArguments(b)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\ta = pSlice.call(a);\n\t\t\t\t\tb = pSlice.call(b);\n\t\t\t\t\treturn deepEqual(a, b, opts);\n\t\t\t\t}\n\t\t\t\tif (isBuffer(a)) {\n\t\t\t\t\tif (!isBuffer(b)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.length !== b.length) return false;\n\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\tif (a[i] !== b[i]) return false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tvar ka = objectKeys(a),\n\t\t\t\t\t    kb = objectKeys(b);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//happens when one is a string literal and the other isn't\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// having the same number of owned properties (keys incorporates\n\t\t\t\t// hasOwnProperty)\n\t\t\t\tif (ka.length != kb.length) return false;\n\t\t\t\t//the same set of keys (although not necessarily the same order),\n\t\t\t\tka.sort();\n\t\t\t\tkb.sort();\n\t\t\t\t//~~~cheap key test\n\t\t\t\tfor (i = ka.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (ka[i] != kb[i]) return false;\n\t\t\t\t}\n\t\t\t\t//equivalent values for every corresponding key, and\n\t\t\t\t//~~~possibly expensive deep test\n\t\t\t\tfor (i = ka.length - 1; i >= 0; i--) {\n\t\t\t\t\tkey = ka[i];\n\t\t\t\t\tif (!deepEqual(a[key], b[key], opts)) return false;\n\t\t\t\t}\n\t\t\t\treturn (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof2(b));\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 23 */\n\t\t/***/function (module, exports) {\n\n\t\t\texports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;\n\n\t\t\texports.shim = shim;\n\t\t\tfunction shim(obj) {\n\t\t\t\tvar keys = [];\n\t\t\t\tfor (var key in obj) {\n\t\t\t\t\tkeys.push(key);\n\t\t\t\t}return keys;\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 24 */\n\t\t/***/function (module, exports) {\n\n\t\t\tvar supportsArgumentsClass = function () {\n\t\t\t\treturn Object.prototype.toString.call(arguments);\n\t\t\t}() == '[object Arguments]';\n\n\t\t\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\n\t\t\texports.supported = supported;\n\t\t\tfunction supported(object) {\n\t\t\t\treturn Object.prototype.toString.call(object) == '[object Arguments]';\n\t\t\t};\n\n\t\t\texports.unsupported = unsupported;\n\t\t\tfunction unsupported(object) {\n\t\t\t\treturn object && (typeof object === 'undefined' ? 'undefined' : _typeof2(object)) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;\n\t\t\t};\n\n\t\t\t/***/\n\t\t},\n\t\t/* 25 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tvar hasOwn = Object.prototype.hasOwnProperty;\n\t\t\tvar toStr = Object.prototype.toString;\n\n\t\t\tvar isArray = function isArray(arr) {\n\t\t\t\tif (typeof Array.isArray === 'function') {\n\t\t\t\t\treturn Array.isArray(arr);\n\t\t\t\t}\n\n\t\t\t\treturn toStr.call(arr) === '[object Array]';\n\t\t\t};\n\n\t\t\tvar isPlainObject = function isPlainObject(obj) {\n\t\t\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\t\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t\t\t// Not own constructor property must be Object\n\t\t\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t\t\t// if last one is own, then all properties are own.\n\t\t\t\tvar key;\n\t\t\t\tfor (key in obj) {/**/}\n\n\t\t\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t\t\t};\n\n\t\t\tmodule.exports = function extend() {\n\t\t\t\tvar options,\n\t\t\t\t    name,\n\t\t\t\t    src,\n\t\t\t\t    copy,\n\t\t\t\t    copyIsArray,\n\t\t\t\t    clone,\n\t\t\t\t    target = arguments[0],\n\t\t\t\t    i = 1,\n\t\t\t\t    length = arguments.length,\n\t\t\t\t    deep = false;\n\n\t\t\t\t// Handle a deep copy situation\n\t\t\t\tif (typeof target === 'boolean') {\n\t\t\t\t\tdeep = target;\n\t\t\t\t\ttarget = arguments[1] || {};\n\t\t\t\t\t// skip the boolean and the target\n\t\t\t\t\ti = 2;\n\t\t\t\t} else if ((typeof target === 'undefined' ? 'undefined' : _typeof2(target)) !== 'object' && typeof target !== 'function' || target == null) {\n\t\t\t\t\ttarget = {};\n\t\t\t\t}\n\n\t\t\t\tfor (; i < length; ++i) {\n\t\t\t\t\toptions = arguments[i];\n\t\t\t\t\t// Only deal with non-null/undefined values\n\t\t\t\t\tif (options != null) {\n\t\t\t\t\t\t// Extend the base object\n\t\t\t\t\t\tfor (name in options) {\n\t\t\t\t\t\t\tsrc = target[name];\n\t\t\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Return the modified object\n\t\t\t\treturn target;\n\t\t\t};\n\n\t\t\t/***/\n\t\t},\n\t\t/* 26 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\tvar equal = __webpack_require__(22);\n\t\t\tvar extend = __webpack_require__(25);\n\n\t\t\tvar lib = {\n\t\t\t\tattributes: {\n\t\t\t\t\tcompose: function compose(a, b, keepNull) {\n\t\t\t\t\t\tif ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') a = {};\n\t\t\t\t\t\tif ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') b = {};\n\t\t\t\t\t\tvar attributes = extend(true, {}, b);\n\t\t\t\t\t\tif (!keepNull) {\n\t\t\t\t\t\t\tattributes = Object.keys(attributes).reduce(function (copy, key) {\n\t\t\t\t\t\t\t\tif (attributes[key] != null) {\n\t\t\t\t\t\t\t\t\tcopy[key] = attributes[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn copy;\n\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var key in a) {\n\t\t\t\t\t\t\tif (a[key] !== undefined && b[key] === undefined) {\n\t\t\t\t\t\t\t\tattributes[key] = a[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Object.keys(attributes).length > 0 ? attributes : undefined;\n\t\t\t\t\t},\n\n\t\t\t\t\tdiff: function diff(a, b) {\n\t\t\t\t\t\tif ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') a = {};\n\t\t\t\t\t\tif ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') b = {};\n\t\t\t\t\t\tvar attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {\n\t\t\t\t\t\t\tif (!equal(a[key], b[key])) {\n\t\t\t\t\t\t\t\tattributes[key] = b[key] === undefined ? null : b[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn attributes;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t\treturn Object.keys(attributes).length > 0 ? attributes : undefined;\n\t\t\t\t\t},\n\n\t\t\t\t\ttransform: function transform(a, b, priority) {\n\t\t\t\t\t\tif ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') return b;\n\t\t\t\t\t\tif ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') return undefined;\n\t\t\t\t\t\tif (!priority) return b; // b simply overwrites us without priority\n\t\t\t\t\t\tvar attributes = Object.keys(b).reduce(function (attributes, key) {\n\t\t\t\t\t\t\tif (a[key] === undefined) attributes[key] = b[key]; // null is a valid value\n\t\t\t\t\t\t\treturn attributes;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t\treturn Object.keys(attributes).length > 0 ? attributes : undefined;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\titerator: function iterator(ops) {\n\t\t\t\t\treturn new Iterator(ops);\n\t\t\t\t},\n\n\t\t\t\tlength: function length(op) {\n\t\t\t\t\tif (typeof op['delete'] === 'number') {\n\t\t\t\t\t\treturn op['delete'];\n\t\t\t\t\t} else if (typeof op.retain === 'number') {\n\t\t\t\t\t\treturn op.retain;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn typeof op.insert === 'string' ? op.insert.length : 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction Iterator(ops) {\n\t\t\t\tthis.ops = ops;\n\t\t\t\tthis.index = 0;\n\t\t\t\tthis.offset = 0;\n\t\t\t};\n\n\t\t\tIterator.prototype.hasNext = function () {\n\t\t\t\treturn this.peekLength() < Infinity;\n\t\t\t};\n\n\t\t\tIterator.prototype.next = function (length) {\n\t\t\t\tif (!length) length = Infinity;\n\t\t\t\tvar nextOp = this.ops[this.index];\n\t\t\t\tif (nextOp) {\n\t\t\t\t\tvar offset = this.offset;\n\t\t\t\t\tvar opLength = lib.length(nextOp);\n\t\t\t\t\tif (length >= opLength - offset) {\n\t\t\t\t\t\tlength = opLength - offset;\n\t\t\t\t\t\tthis.index += 1;\n\t\t\t\t\t\tthis.offset = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.offset += length;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof nextOp['delete'] === 'number') {\n\t\t\t\t\t\treturn { 'delete': length };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar retOp = {};\n\t\t\t\t\t\tif (nextOp.attributes) {\n\t\t\t\t\t\t\tretOp.attributes = nextOp.attributes;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof nextOp.retain === 'number') {\n\t\t\t\t\t\t\tretOp.retain = length;\n\t\t\t\t\t\t} else if (typeof nextOp.insert === 'string') {\n\t\t\t\t\t\t\tretOp.insert = nextOp.insert.substr(offset, length);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// offset should === 0, length should === 1\n\t\t\t\t\t\t\tretOp.insert = nextOp.insert;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retOp;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn { retain: Infinity };\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tIterator.prototype.peek = function () {\n\t\t\t\treturn this.ops[this.index];\n\t\t\t};\n\n\t\t\tIterator.prototype.peekLength = function () {\n\t\t\t\tif (this.ops[this.index]) {\n\t\t\t\t\t// Should never return 0 if our index is being managed correctly\n\t\t\t\t\treturn lib.length(this.ops[this.index]) - this.offset;\n\t\t\t\t} else {\n\t\t\t\t\treturn Infinity;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tIterator.prototype.peekType = function () {\n\t\t\t\tif (this.ops[this.index]) {\n\t\t\t\t\tif (typeof this.ops[this.index]['delete'] === 'number') {\n\t\t\t\t\t\treturn 'delete';\n\t\t\t\t\t} else if (typeof this.ops[this.index].retain === 'number') {\n\t\t\t\t\t\treturn 'retain';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'insert';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 'retain';\n\t\t\t};\n\n\t\t\tmodule.exports = lib;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 27 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t\t\t\treturn typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t} : function (obj) {\n\t\t\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t};\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _op = __webpack_require__(26);\n\n\t\t\tvar _op2 = _interopRequireDefault(_op);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _code = __webpack_require__(28);\n\n\t\t\tvar _code2 = _interopRequireDefault(_code);\n\n\t\t\tvar _cursor = __webpack_require__(34);\n\n\t\t\tvar _cursor2 = _interopRequireDefault(_cursor);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tvar _clone = __webpack_require__(38);\n\n\t\t\tvar _clone2 = _interopRequireDefault(_clone);\n\n\t\t\tvar _deepEqual = __webpack_require__(22);\n\n\t\t\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _defineProperty(obj, key, value) {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\tObject.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = value;\n\t\t\t\t}return obj;\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar Editor = function () {\n\t\t\t\tfunction Editor(scroll) {\n\t\t\t\t\t_classCallCheck(this, Editor);\n\n\t\t\t\t\tthis.scroll = scroll;\n\t\t\t\t\tthis.delta = this.getDelta();\n\t\t\t\t}\n\n\t\t\t\t_createClass(Editor, [{\n\t\t\t\t\tkey: 'applyDelta',\n\t\t\t\t\tvalue: function applyDelta(delta) {\n\t\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t\tvar consumeNextNewline = false;\n\t\t\t\t\t\tthis.scroll.update();\n\t\t\t\t\t\tvar scrollLength = this.scroll.length();\n\t\t\t\t\t\tthis.scroll.batch = true;\n\t\t\t\t\t\tdelta = normalizeDelta(delta);\n\t\t\t\t\t\tdelta.reduce(function (index, op) {\n\t\t\t\t\t\t\tvar length = op.retain || op.delete || op.insert.length || 1;\n\t\t\t\t\t\t\tvar attributes = op.attributes || {};\n\t\t\t\t\t\t\tif (op.insert != null) {\n\t\t\t\t\t\t\t\tif (typeof op.insert === 'string') {\n\t\t\t\t\t\t\t\t\tvar text = op.insert;\n\t\t\t\t\t\t\t\t\tif (text.endsWith('\\n') && consumeNextNewline) {\n\t\t\t\t\t\t\t\t\t\tconsumeNextNewline = false;\n\t\t\t\t\t\t\t\t\t\ttext = text.slice(0, -1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (index >= scrollLength && !text.endsWith('\\n')) {\n\t\t\t\t\t\t\t\t\t\tconsumeNextNewline = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t_this.scroll.insertAt(index, text);\n\n\t\t\t\t\t\t\t\t\tvar _scroll$line = _this.scroll.line(index),\n\t\t\t\t\t\t\t\t\t    _scroll$line2 = _slicedToArray(_scroll$line, 2),\n\t\t\t\t\t\t\t\t\t    line = _scroll$line2[0],\n\t\t\t\t\t\t\t\t\t    offset = _scroll$line2[1];\n\n\t\t\t\t\t\t\t\t\tvar formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));\n\t\t\t\t\t\t\t\t\tif (line instanceof _block2.default) {\n\t\t\t\t\t\t\t\t\t\tvar _line$descendant = line.descendant(_parchment2.default.Leaf, offset),\n\t\t\t\t\t\t\t\t\t\t    _line$descendant2 = _slicedToArray(_line$descendant, 1),\n\t\t\t\t\t\t\t\t\t\t    leaf = _line$descendant2[0];\n\n\t\t\t\t\t\t\t\t\t\tformats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tattributes = _op2.default.attributes.diff(formats, attributes) || {};\n\t\t\t\t\t\t\t\t} else if (_typeof(op.insert) === 'object') {\n\t\t\t\t\t\t\t\t\tvar key = Object.keys(op.insert)[0]; // There should only be one key\n\t\t\t\t\t\t\t\t\tif (key == null) return index;\n\t\t\t\t\t\t\t\t\t_this.scroll.insertAt(index, key, op.insert[key]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tscrollLength += length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tObject.keys(attributes).forEach(function (name) {\n\t\t\t\t\t\t\t\t_this.scroll.formatAt(index, length, name, attributes[name]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn index + length;\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\tdelta.reduce(function (index, op) {\n\t\t\t\t\t\t\tif (typeof op.delete === 'number') {\n\t\t\t\t\t\t\t\t_this.scroll.deleteAt(index, op.delete);\n\t\t\t\t\t\t\t\treturn index;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn index + (op.retain || op.insert.length || 1);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\tthis.scroll.batch = false;\n\t\t\t\t\t\tthis.scroll.optimize();\n\t\t\t\t\t\treturn this.update(delta);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'deleteText',\n\t\t\t\t\tvalue: function deleteText(index, length) {\n\t\t\t\t\t\tthis.scroll.deleteAt(index, length);\n\t\t\t\t\t\treturn this.update(new _quillDelta2.default().retain(index).delete(length));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatLine',\n\t\t\t\t\tvalue: function formatLine(index, length) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tvar formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t\t\t\t\t\tthis.scroll.update();\n\t\t\t\t\t\tObject.keys(formats).forEach(function (format) {\n\t\t\t\t\t\t\tif (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;\n\t\t\t\t\t\t\tvar lines = _this2.scroll.lines(index, Math.max(length, 1));\n\t\t\t\t\t\t\tvar lengthRemaining = length;\n\t\t\t\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\t\t\t\tvar lineLength = line.length();\n\t\t\t\t\t\t\t\tif (!(line instanceof _code2.default)) {\n\t\t\t\t\t\t\t\t\tline.format(format, formats[format]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar codeIndex = index - line.offset(_this2.scroll);\n\t\t\t\t\t\t\t\t\tvar codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;\n\t\t\t\t\t\t\t\t\tline.formatAt(codeIndex, codeLength, format, formats[format]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlengthRemaining -= lineLength;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.scroll.optimize();\n\t\t\t\t\t\treturn this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatText',\n\t\t\t\t\tvalue: function formatText(index, length) {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t\t\t\t\t\tObject.keys(formats).forEach(function (format) {\n\t\t\t\t\t\t\t_this3.scroll.formatAt(index, length, format, formats[format]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getContents',\n\t\t\t\t\tvalue: function getContents(index, length) {\n\t\t\t\t\t\treturn this.delta.slice(index, index + length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getDelta',\n\t\t\t\t\tvalue: function getDelta() {\n\t\t\t\t\t\treturn this.scroll.lines().reduce(function (delta, line) {\n\t\t\t\t\t\t\treturn delta.concat(line.delta());\n\t\t\t\t\t\t}, new _quillDelta2.default());\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getFormat',\n\t\t\t\t\tvalue: function getFormat(index) {\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\t\t\t\tvar lines = [],\n\t\t\t\t\t\t    leaves = [];\n\t\t\t\t\t\tif (length === 0) {\n\t\t\t\t\t\t\tthis.scroll.path(index).forEach(function (path) {\n\t\t\t\t\t\t\t\tvar _path = _slicedToArray(path, 1),\n\t\t\t\t\t\t\t\t    blot = _path[0];\n\n\t\t\t\t\t\t\t\tif (blot instanceof _block2.default) {\n\t\t\t\t\t\t\t\t\tlines.push(blot);\n\t\t\t\t\t\t\t\t} else if (blot instanceof _parchment2.default.Leaf) {\n\t\t\t\t\t\t\t\t\tleaves.push(blot);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlines = this.scroll.lines(index, length);\n\t\t\t\t\t\t\tleaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar formatsArr = [lines, leaves].map(function (blots) {\n\t\t\t\t\t\t\tif (blots.length === 0) return {};\n\t\t\t\t\t\t\tvar formats = (0, _block.bubbleFormats)(blots.shift());\n\t\t\t\t\t\t\twhile (Object.keys(formats).length > 0) {\n\t\t\t\t\t\t\t\tvar blot = blots.shift();\n\t\t\t\t\t\t\t\tif (blot == null) return formats;\n\t\t\t\t\t\t\t\tformats = combineFormats((0, _block.bubbleFormats)(blot), formats);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn formats;\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn _extend2.default.apply(_extend2.default, formatsArr);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getText',\n\t\t\t\t\tvalue: function getText(index, length) {\n\t\t\t\t\t\treturn this.getContents(index, length).filter(function (op) {\n\t\t\t\t\t\t\treturn typeof op.insert === 'string';\n\t\t\t\t\t\t}).map(function (op) {\n\t\t\t\t\t\t\treturn op.insert;\n\t\t\t\t\t\t}).join('');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertEmbed',\n\t\t\t\t\tvalue: function insertEmbed(index, embed, value) {\n\t\t\t\t\t\tthis.scroll.insertAt(index, embed, value);\n\t\t\t\t\t\treturn this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertText',\n\t\t\t\t\tvalue: function insertText(index, text) {\n\t\t\t\t\t\tvar _this4 = this;\n\n\t\t\t\t\t\tvar formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t\t\t\t\t\ttext = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\t\t\t\t\t\tthis.scroll.insertAt(index, text);\n\t\t\t\t\t\tObject.keys(formats).forEach(function (format) {\n\t\t\t\t\t\t\t_this4.scroll.formatAt(index, text.length, format, formats[format]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'isBlank',\n\t\t\t\t\tvalue: function isBlank() {\n\t\t\t\t\t\tif (this.scroll.children.length == 0) return true;\n\t\t\t\t\t\tif (this.scroll.children.length > 1) return false;\n\t\t\t\t\t\tvar child = this.scroll.children.head;\n\t\t\t\t\t\treturn child.length() <= 1 && Object.keys(child.formats()).length == 0;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'removeFormat',\n\t\t\t\t\tvalue: function removeFormat(index, length) {\n\t\t\t\t\t\tvar text = this.getText(index, length);\n\n\t\t\t\t\t\tvar _scroll$line3 = this.scroll.line(index + length),\n\t\t\t\t\t\t    _scroll$line4 = _slicedToArray(_scroll$line3, 2),\n\t\t\t\t\t\t    line = _scroll$line4[0],\n\t\t\t\t\t\t    offset = _scroll$line4[1];\n\n\t\t\t\t\t\tvar suffixLength = 0,\n\t\t\t\t\t\t    suffix = new _quillDelta2.default();\n\t\t\t\t\t\tif (line != null) {\n\t\t\t\t\t\t\tif (!(line instanceof _code2.default)) {\n\t\t\t\t\t\t\t\tsuffixLength = line.length() - offset;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsuffixLength = line.newlineIndex(offset) - offset + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsuffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar contents = this.getContents(index, length + suffixLength);\n\t\t\t\t\t\tvar diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));\n\t\t\t\t\t\tvar delta = new _quillDelta2.default().retain(index).concat(diff);\n\t\t\t\t\t\treturn this.applyDelta(delta);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update(change) {\n\t\t\t\t\t\tvar _this5 = this;\n\n\t\t\t\t\t\tvar mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t\t\t\t\t\tvar cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n\t\t\t\t\t\tvar oldDelta = this.delta;\n\t\t\t\t\t\tif (mutations.length === 1 && mutations[0].type === 'characterData' && _parchment2.default.find(mutations[0].target)) {\n\t\t\t\t\t\t\t(function () {\n\t\t\t\t\t\t\t\t// Optimization for character changes\n\t\t\t\t\t\t\t\tvar textBlot = _parchment2.default.find(mutations[0].target);\n\t\t\t\t\t\t\t\tvar formats = (0, _block.bubbleFormats)(textBlot);\n\t\t\t\t\t\t\t\tvar index = textBlot.offset(_this5.scroll);\n\t\t\t\t\t\t\t\tvar oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');\n\t\t\t\t\t\t\t\tvar oldText = new _quillDelta2.default().insert(oldValue);\n\t\t\t\t\t\t\t\tvar newText = new _quillDelta2.default().insert(textBlot.value());\n\t\t\t\t\t\t\t\tvar diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));\n\t\t\t\t\t\t\t\tchange = diffDelta.reduce(function (delta, op) {\n\t\t\t\t\t\t\t\t\tif (op.insert) {\n\t\t\t\t\t\t\t\t\t\treturn delta.insert(op.insert, formats);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn delta.push(op);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, new _quillDelta2.default());\n\t\t\t\t\t\t\t\t_this5.delta = oldDelta.compose(change);\n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.delta = this.getDelta();\n\t\t\t\t\t\t\tif (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {\n\t\t\t\t\t\t\t\tchange = oldDelta.diff(this.delta, cursorIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn change;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Editor;\n\t\t\t}();\n\n\t\t\tfunction combineFormats(formats, combined) {\n\t\t\t\treturn Object.keys(combined).reduce(function (merged, name) {\n\t\t\t\t\tif (formats[name] == null) return merged;\n\t\t\t\t\tif (combined[name] === formats[name]) {\n\t\t\t\t\t\tmerged[name] = combined[name];\n\t\t\t\t\t} else if (Array.isArray(combined[name])) {\n\t\t\t\t\t\tif (combined[name].indexOf(formats[name]) < 0) {\n\t\t\t\t\t\t\tmerged[name] = combined[name].concat([formats[name]]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmerged[name] = [combined[name], formats[name]];\n\t\t\t\t\t}\n\t\t\t\t\treturn merged;\n\t\t\t\t}, {});\n\t\t\t}\n\n\t\t\tfunction normalizeDelta(delta) {\n\t\t\t\treturn delta.reduce(function (delta, op) {\n\t\t\t\t\tif (op.insert === 1) {\n\t\t\t\t\t\tvar attributes = (0, _clone2.default)(op.attributes);\n\t\t\t\t\t\tdelete attributes['image'];\n\t\t\t\t\t\treturn delta.insert({ image: op.attributes.image }, attributes);\n\t\t\t\t\t}\n\t\t\t\t\tif (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {\n\t\t\t\t\t\top = (0, _clone2.default)(op);\n\t\t\t\t\t\tif (op.attributes.list) {\n\t\t\t\t\t\t\top.attributes.list = 'ordered';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\top.attributes.list = 'bullet';\n\t\t\t\t\t\t\tdelete op.attributes.bullet;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof op.insert === 'string') {\n\t\t\t\t\t\tvar text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\t\t\t\t\t\treturn delta.insert(text, op.attributes);\n\t\t\t\t\t}\n\t\t\t\t\treturn delta.push(op);\n\t\t\t\t}, new _quillDelta2.default());\n\t\t\t}\n\n\t\t\texports.default = Editor;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 28 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.Code = undefined;\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tvar _text = __webpack_require__(33);\n\n\t\t\tvar _text2 = _interopRequireDefault(_text);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Code = function (_Inline) {\n\t\t\t\t_inherits(Code, _Inline);\n\n\t\t\t\tfunction Code() {\n\t\t\t\t\t_classCallCheck(this, Code);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Code;\n\t\t\t}(_inline2.default);\n\n\t\t\tCode.blotName = 'code';\n\t\t\tCode.tagName = 'CODE';\n\n\t\t\tvar CodeBlock = function (_Block) {\n\t\t\t\t_inherits(CodeBlock, _Block);\n\n\t\t\t\tfunction CodeBlock() {\n\t\t\t\t\t_classCallCheck(this, CodeBlock);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(CodeBlock, [{\n\t\t\t\t\tkey: 'delta',\n\t\t\t\t\tvalue: function delta() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar text = this.domNode.textContent;\n\t\t\t\t\t\tif (text.endsWith('\\n')) {\n\t\t\t\t\t\t\t// Should always be true\n\t\t\t\t\t\t\ttext = text.slice(0, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn text.split('\\n').reduce(function (delta, frag) {\n\t\t\t\t\t\t\treturn delta.insert(frag).insert('\\n', _this3.formats());\n\t\t\t\t\t\t}, new _quillDelta2.default());\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (name === this.statics.blotName && value) return;\n\n\t\t\t\t\t\tvar _descendant = this.descendant(_text2.default, this.length() - 1),\n\t\t\t\t\t\t    _descendant2 = _slicedToArray(_descendant, 1),\n\t\t\t\t\t\t    text = _descendant2[0];\n\n\t\t\t\t\t\tif (text != null) {\n\t\t\t\t\t\t\ttext.deleteAt(text.length() - 1, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatAt',\n\t\t\t\t\tvalue: function formatAt(index, length, name, value) {\n\t\t\t\t\t\tif (length === 0) return;\n\t\t\t\t\t\tif (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar nextNewline = this.newlineIndex(index);\n\t\t\t\t\t\tif (nextNewline < 0 || nextNewline >= index + length) return;\n\t\t\t\t\t\tvar prevNewline = this.newlineIndex(index, true) + 1;\n\t\t\t\t\t\tvar isolateLength = nextNewline - prevNewline + 1;\n\t\t\t\t\t\tvar blot = this.isolate(prevNewline, isolateLength);\n\t\t\t\t\t\tvar next = blot.next;\n\t\t\t\t\t\tblot.format(name, value);\n\t\t\t\t\t\tif (next instanceof CodeBlock) {\n\t\t\t\t\t\t\tnext.formatAt(0, index - prevNewline + length - isolateLength, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertAt',\n\t\t\t\t\tvalue: function insertAt(index, value, def) {\n\t\t\t\t\t\tif (def != null) return;\n\n\t\t\t\t\t\tvar _descendant3 = this.descendant(_text2.default, index),\n\t\t\t\t\t\t    _descendant4 = _slicedToArray(_descendant3, 2),\n\t\t\t\t\t\t    text = _descendant4[0],\n\t\t\t\t\t\t    offset = _descendant4[1];\n\n\t\t\t\t\t\ttext.insertAt(offset, value);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'length',\n\t\t\t\t\tvalue: function length() {\n\t\t\t\t\t\tvar length = this.domNode.textContent.length;\n\t\t\t\t\t\tif (!this.domNode.textContent.endsWith('\\n')) {\n\t\t\t\t\t\t\treturn length + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn length;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'newlineIndex',\n\t\t\t\t\tvalue: function newlineIndex(searchIndex) {\n\t\t\t\t\t\tvar reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t\t\t\t\tif (!reverse) {\n\t\t\t\t\t\t\tvar offset = this.domNode.textContent.slice(searchIndex).indexOf('\\n');\n\t\t\t\t\t\t\treturn offset > -1 ? searchIndex + offset : -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\tif (!this.domNode.textContent.endsWith('\\n')) {\n\t\t\t\t\t\t\tthis.appendChild(_parchment2.default.create('text', '\\n'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this);\n\t\t\t\t\t\tvar next = this.next;\n\t\t\t\t\t\tif (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {\n\t\t\t\t\t\t\tnext.optimize();\n\t\t\t\t\t\t\tnext.moveChildren(this);\n\t\t\t\t\t\t\tnext.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'replace',\n\t\t\t\t\tvalue: function replace(target) {\n\t\t\t\t\t\t_get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);\n\t\t\t\t\t\t[].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {\n\t\t\t\t\t\t\tvar blot = _parchment2.default.find(node);\n\t\t\t\t\t\t\tif (blot == null) {\n\t\t\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t\t\t} else if (blot instanceof _parchment2.default.Embed) {\n\t\t\t\t\t\t\t\tblot.remove();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tblot.unwrap();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);\n\t\t\t\t\t\tdomNode.setAttribute('spellcheck', false);\n\t\t\t\t\t\treturn domNode;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn CodeBlock;\n\t\t\t}(_block2.default);\n\n\t\t\tCodeBlock.blotName = 'code-block';\n\t\t\tCodeBlock.tagName = 'PRE';\n\t\t\tCodeBlock.TAB = '  ';\n\n\t\t\texports.Code = Code;\n\t\t\texports.default = CodeBlock;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 29 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _break = __webpack_require__(30);\n\n\t\t\tvar _break2 = _interopRequireDefault(_break);\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tvar _text = __webpack_require__(33);\n\n\t\t\tvar _text2 = _interopRequireDefault(_text);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar NEWLINE_LENGTH = 1;\n\n\t\t\tvar BlockEmbed = function (_Embed) {\n\t\t\t\t_inherits(BlockEmbed, _Embed);\n\n\t\t\t\tfunction BlockEmbed() {\n\t\t\t\t\t_classCallCheck(this, BlockEmbed);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(BlockEmbed, [{\n\t\t\t\t\tkey: 'attach',\n\t\t\t\t\tvalue: function attach() {\n\t\t\t\t\t\t_get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);\n\t\t\t\t\t\tthis.attributes = new _parchment2.default.Attributor.Store(this.domNode);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'delta',\n\t\t\t\t\tvalue: function delta() {\n\t\t\t\t\t\treturn new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tvar attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);\n\t\t\t\t\t\tif (attribute != null) {\n\t\t\t\t\t\t\tthis.attributes.attribute(attribute, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatAt',\n\t\t\t\t\tvalue: function formatAt(index, length, name, value) {\n\t\t\t\t\t\tthis.format(name, value);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertAt',\n\t\t\t\t\tvalue: function insertAt(index, value, def) {\n\t\t\t\t\t\tif (typeof value === 'string' && value.endsWith('\\n')) {\n\t\t\t\t\t\t\tvar block = _parchment2.default.create(Block.blotName);\n\t\t\t\t\t\t\tthis.parent.insertBefore(block, index === 0 ? this : this.next);\n\t\t\t\t\t\t\tblock.insertAt(0, value.slice(0, -1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn BlockEmbed;\n\t\t\t}(_embed2.default);\n\n\t\t\tBlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;\n\t\t\t// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\n\n\t\t\tvar Block = function (_Parchment$Block) {\n\t\t\t\t_inherits(Block, _Parchment$Block);\n\n\t\t\t\tfunction Block(domNode) {\n\t\t\t\t\t_classCallCheck(this, Block);\n\n\t\t\t\t\tvar _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));\n\n\t\t\t\t\t_this2.cache = {};\n\t\t\t\t\treturn _this2;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Block, [{\n\t\t\t\t\tkey: 'delta',\n\t\t\t\t\tvalue: function delta() {\n\t\t\t\t\t\tif (this.cache.delta == null) {\n\t\t\t\t\t\t\tthis.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {\n\t\t\t\t\t\t\t\tif (leaf.length() === 0) {\n\t\t\t\t\t\t\t\t\treturn delta;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn delta.insert(leaf.value(), bubbleFormats(leaf));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, new _quillDelta2.default()).insert('\\n', bubbleFormats(this));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.cache.delta;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'deleteAt',\n\t\t\t\t\tvalue: function deleteAt(index, length) {\n\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatAt',\n\t\t\t\t\tvalue: function formatAt(index, length, name, value) {\n\t\t\t\t\t\tif (length <= 0) return;\n\t\t\t\t\t\tif (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n\t\t\t\t\t\t\tif (index + length === this.length()) {\n\t\t\t\t\t\t\t\tthis.format(name, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertAt',\n\t\t\t\t\tvalue: function insertAt(index, value, def) {\n\t\t\t\t\t\tif (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);\n\t\t\t\t\t\tif (value.length === 0) return;\n\t\t\t\t\t\tvar lines = value.split('\\n');\n\t\t\t\t\t\tvar text = lines.shift();\n\t\t\t\t\t\tif (text.length > 0) {\n\t\t\t\t\t\t\tif (index < this.length() - 1 || this.children.tail == null) {\n\t\t\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.children.tail.insertAt(this.children.tail.length(), text);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar block = this;\n\t\t\t\t\t\tlines.reduce(function (index, line) {\n\t\t\t\t\t\t\tblock = block.split(index, true);\n\t\t\t\t\t\t\tblock.insertAt(0, line);\n\t\t\t\t\t\t\treturn line.length;\n\t\t\t\t\t\t}, index + text.length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertBefore',\n\t\t\t\t\tvalue: function insertBefore(blot, ref) {\n\t\t\t\t\t\tvar head = this.children.head;\n\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);\n\t\t\t\t\t\tif (head instanceof _break2.default) {\n\t\t\t\t\t\t\thead.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'length',\n\t\t\t\t\tvalue: function length() {\n\t\t\t\t\t\tif (this.cache.length == null) {\n\t\t\t\t\t\t\tthis.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.cache.length;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'moveChildren',\n\t\t\t\t\tvalue: function moveChildren(target, ref) {\n\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this);\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'path',\n\t\t\t\t\tvalue: function path(index) {\n\t\t\t\t\t\treturn _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'removeChild',\n\t\t\t\t\tvalue: function removeChild(child) {\n\t\t\t\t\t\t_get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);\n\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'split',\n\t\t\t\t\tvalue: function split(index) {\n\t\t\t\t\t\tvar force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t\t\t\t\tif (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n\t\t\t\t\t\t\tvar clone = this.clone();\n\t\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\t\tthis.parent.insertBefore(clone, this);\n\t\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.parent.insertBefore(clone, this.next);\n\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);\n\t\t\t\t\t\t\tthis.cache = {};\n\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Block;\n\t\t\t}(_parchment2.default.Block);\n\n\t\t\tBlock.blotName = 'block';\n\t\t\tBlock.tagName = 'P';\n\t\t\tBlock.defaultChild = 'break';\n\t\t\tBlock.allowedChildren = [_inline2.default, _embed2.default, _text2.default];\n\n\t\t\tfunction bubbleFormats(blot) {\n\t\t\t\tvar formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\t\tif (blot == null) return formats;\n\t\t\t\tif (typeof blot.formats === 'function') {\n\t\t\t\t\tformats = (0, _extend2.default)(formats, blot.formats());\n\t\t\t\t}\n\t\t\t\tif (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n\t\t\t\t\treturn formats;\n\t\t\t\t}\n\t\t\t\treturn bubbleFormats(blot.parent, formats);\n\t\t\t}\n\n\t\t\texports.bubbleFormats = bubbleFormats;\n\t\t\texports.BlockEmbed = BlockEmbed;\n\t\t\texports.default = Block;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 30 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Break = function (_Embed) {\n\t\t\t\t_inherits(Break, _Embed);\n\n\t\t\t\tfunction Break() {\n\t\t\t\t\t_classCallCheck(this, Break);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Break, [{\n\t\t\t\t\tkey: 'insertInto',\n\t\t\t\t\tvalue: function insertInto(parent, ref) {\n\t\t\t\t\t\tif (parent.children.length === 0) {\n\t\t\t\t\t\t\t_get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'length',\n\t\t\t\t\tvalue: function length() {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value() {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value() {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Break;\n\t\t\t}(_embed2.default);\n\n\t\t\tBreak.blotName = 'break';\n\t\t\tBreak.tagName = 'BR';\n\n\t\t\texports.default = Break;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 31 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Embed = function (_Parchment$Embed) {\n\t\t\t\t_inherits(Embed, _Parchment$Embed);\n\n\t\t\t\tfunction Embed() {\n\t\t\t\t\t_classCallCheck(this, Embed);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Embed;\n\t\t\t}(_parchment2.default.Embed);\n\n\t\t\texports.default = Embed;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 32 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _text = __webpack_require__(33);\n\n\t\t\tvar _text2 = _interopRequireDefault(_text);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Inline = function (_Parchment$Inline) {\n\t\t\t\t_inherits(Inline, _Parchment$Inline);\n\n\t\t\t\tfunction Inline() {\n\t\t\t\t\t_classCallCheck(this, Inline);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Inline, [{\n\t\t\t\t\tkey: 'formatAt',\n\t\t\t\t\tvalue: function formatAt(index, length, name, value) {\n\t\t\t\t\t\tif (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {\n\t\t\t\t\t\t\tvar blot = this.isolate(index, length);\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\tblot.wrap(name, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\t_get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this);\n\t\t\t\t\t\tif (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n\t\t\t\t\t\t\tvar parent = this.parent.isolate(this.offset(), this.length());\n\t\t\t\t\t\t\tthis.moveChildren(parent);\n\t\t\t\t\t\t\tparent.wrap(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'compare',\n\t\t\t\t\tvalue: function compare(self, other) {\n\t\t\t\t\t\tvar selfIndex = Inline.order.indexOf(self);\n\t\t\t\t\t\tvar otherIndex = Inline.order.indexOf(other);\n\t\t\t\t\t\tif (selfIndex >= 0 || otherIndex >= 0) {\n\t\t\t\t\t\t\treturn selfIndex - otherIndex;\n\t\t\t\t\t\t} else if (self === other) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t} else if (self < other) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Inline;\n\t\t\t}(_parchment2.default.Inline);\n\n\t\t\tInline.allowedChildren = [Inline, _embed2.default, _text2.default];\n\t\t\t// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\n\t\t\tInline.order = ['cursor', 'inline', // Must be lower\n\t\t\t'code', 'underline', 'strike', 'italic', 'bold', 'script', 'link' // Must be higher\n\t\t\t];\n\n\t\t\texports.default = Inline;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 33 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar TextBlot = function (_Parchment$Text) {\n\t\t\t\t_inherits(TextBlot, _Parchment$Text);\n\n\t\t\t\tfunction TextBlot() {\n\t\t\t\t\t_classCallCheck(this, TextBlot);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn TextBlot;\n\t\t\t}(_parchment2.default.Text);\n\n\t\t\texports.default = TextBlot;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 34 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _text = __webpack_require__(33);\n\n\t\t\tvar _text2 = _interopRequireDefault(_text);\n\n\t\t\tvar _emitter = __webpack_require__(35);\n\n\t\t\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Cursor = function (_Embed) {\n\t\t\t\t_inherits(Cursor, _Embed);\n\n\t\t\t\t_createClass(Cursor, null, [{\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value() {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\tfunction Cursor(domNode, selection) {\n\t\t\t\t\t_classCallCheck(this, Cursor);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));\n\n\t\t\t\t\t_this.selection = selection;\n\t\t\t\t\t_this.textNode = document.createTextNode(Cursor.CONTENTS);\n\t\t\t\t\t_this.domNode.appendChild(_this.textNode);\n\t\t\t\t\t_this._length = 0;\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Cursor, [{\n\t\t\t\t\tkey: 'detach',\n\t\t\t\t\tvalue: function detach() {\n\t\t\t\t\t\t// super.detach() will also clear domNode.__blot\n\t\t\t\t\t\tif (this.parent != null) this.parent.removeChild(this);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (this._length !== 0) {\n\t\t\t\t\t\t\treturn _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar target = this,\n\t\t\t\t\t\t    index = 0;\n\t\t\t\t\t\twhile (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {\n\t\t\t\t\t\t\tindex += target.offset(target.parent);\n\t\t\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (target != null) {\n\t\t\t\t\t\t\tthis._length = Cursor.CONTENTS.length;\n\t\t\t\t\t\t\ttarget.optimize();\n\t\t\t\t\t\t\ttarget.formatAt(index, Cursor.CONTENTS.length, name, value);\n\t\t\t\t\t\t\tthis._length = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'index',\n\t\t\t\t\tvalue: function index(node, offset) {\n\t\t\t\t\t\tif (node === this.textNode) return 0;\n\t\t\t\t\t\treturn _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'length',\n\t\t\t\t\tvalue: function length() {\n\t\t\t\t\t\treturn this._length;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'position',\n\t\t\t\t\tvalue: function position() {\n\t\t\t\t\t\treturn [this.textNode, this.textNode.data.length];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'remove',\n\t\t\t\t\tvalue: function remove() {\n\t\t\t\t\t\t_get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);\n\t\t\t\t\t\tthis.parent = null;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'restore',\n\t\t\t\t\tvalue: function restore() {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tif (this.selection.composing) return;\n\t\t\t\t\t\tif (this.parent == null) return;\n\t\t\t\t\t\tvar textNode = this.textNode;\n\t\t\t\t\t\tvar range = this.selection.getNativeRange();\n\t\t\t\t\t\tvar restoreText = void 0,\n\t\t\t\t\t\t    start = void 0,\n\t\t\t\t\t\t    end = void 0;\n\t\t\t\t\t\tif (range != null && range.start.node === textNode && range.end.node === textNode) {\n\t\t\t\t\t\t\tvar _ref = [textNode, range.start.offset, range.end.offset];\n\t\t\t\t\t\t\trestoreText = _ref[0];\n\t\t\t\t\t\t\tstart = _ref[1];\n\t\t\t\t\t\t\tend = _ref[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Link format will insert text outside of anchor tag\n\t\t\t\t\t\twhile (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {\n\t\t\t\t\t\t\tthis.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.textNode.data !== Cursor.CONTENTS) {\n\t\t\t\t\t\t\tvar text = this.textNode.data.split(Cursor.CONTENTS).join('');\n\t\t\t\t\t\t\tif (this.next instanceof _text2.default) {\n\t\t\t\t\t\t\t\trestoreText = this.next.domNode;\n\t\t\t\t\t\t\t\tthis.next.insertAt(0, text);\n\t\t\t\t\t\t\t\tthis.textNode.data = Cursor.CONTENTS;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.textNode.data = text;\n\t\t\t\t\t\t\t\tthis.parent.insertBefore(_parchment2.default.create(this.textNode), this);\n\t\t\t\t\t\t\t\tthis.textNode = document.createTextNode(Cursor.CONTENTS);\n\t\t\t\t\t\t\t\tthis.domNode.appendChild(this.textNode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.remove();\n\t\t\t\t\t\tif (start == null) return;\n\t\t\t\t\t\tthis.selection.emitter.once(_emitter2.default.events.SCROLL_OPTIMIZE, function () {\n\t\t\t\t\t\t\tvar _map = [start, end].map(function (offset) {\n\t\t\t\t\t\t\t\treturn Math.max(0, Math.min(restoreText.data.length, offset - 1));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tvar _map2 = _slicedToArray(_map, 2);\n\n\t\t\t\t\t\t\tstart = _map2[0];\n\t\t\t\t\t\t\tend = _map2[1];\n\n\t\t\t\t\t\t\t_this2.selection.setNativeRange(restoreText, start, restoreText, end);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update(mutations) {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tmutations.forEach(function (mutation) {\n\t\t\t\t\t\t\tif (mutation.type === 'characterData' && mutation.target === _this3.textNode) {\n\t\t\t\t\t\t\t\t_this3.restore();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value() {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Cursor;\n\t\t\t}(_embed2.default);\n\n\t\t\tCursor.blotName = 'cursor';\n\t\t\tCursor.className = 'ql-cursor';\n\t\t\tCursor.tagName = 'span';\n\t\t\tCursor.CONTENTS = '\\uFEFF'; // Zero width no break space\n\n\n\t\t\texports.default = Cursor;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 35 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _eventemitter = __webpack_require__(36);\n\n\t\t\tvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill:events');\n\n\t\t\tvar Emitter = function (_EventEmitter) {\n\t\t\t\t_inherits(Emitter, _EventEmitter);\n\n\t\t\t\tfunction Emitter() {\n\t\t\t\t\t_classCallCheck(this, Emitter);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));\n\n\t\t\t\t\t_this.on('error', debug.error);\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Emitter, [{\n\t\t\t\t\tkey: 'emit',\n\t\t\t\t\tvalue: function emit() {\n\t\t\t\t\t\tdebug.log.apply(debug, arguments);\n\t\t\t\t\t\t_get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Emitter;\n\t\t\t}(_eventemitter2.default);\n\n\t\t\tEmitter.events = {\n\t\t\t\tEDITOR_CHANGE: 'editor-change',\n\t\t\t\tSCROLL_BEFORE_UPDATE: 'scroll-before-update',\n\t\t\t\tSCROLL_OPTIMIZE: 'scroll-optimize',\n\t\t\t\tSCROLL_UPDATE: 'scroll-update',\n\t\t\t\tSELECTION_CHANGE: 'selection-change',\n\t\t\t\tTEXT_CHANGE: 'text-change'\n\t\t\t};\n\t\t\tEmitter.sources = {\n\t\t\t\tAPI: 'api',\n\t\t\t\tSILENT: 'silent',\n\t\t\t\tUSER: 'user'\n\t\t\t};\n\n\t\t\texports.default = Emitter;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 36 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tvar has = Object.prototype.hasOwnProperty,\n\t\t\t    prefix = '~';\n\n\t\t\t/**\n    * Constructor to create a storage for our `EE` objects.\n    * An `Events` instance is a plain object whose properties are event names.\n    *\n    * @constructor\n    * @api private\n    */\n\t\t\tfunction Events() {}\n\n\t\t\t//\n\t\t\t// We try to not inherit from `Object.prototype`. In some engines creating an\n\t\t\t// instance in this way is faster than calling `Object.create(null)` directly.\n\t\t\t// If `Object.create(null)` is not supported we prefix the event names with a\n\t\t\t// character to make sure that the built-in object properties are not\n\t\t\t// overridden or used as an attack vector.\n\t\t\t//\n\t\t\tif (Object.create) {\n\t\t\t\tEvents.prototype = Object.create(null);\n\n\t\t\t\t//\n\t\t\t\t// This hack is needed because the `__proto__` property is still inherited in\n\t\t\t\t// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n\t\t\t\t//\n\t\t\t\tif (!new Events().__proto__) prefix = false;\n\t\t\t}\n\n\t\t\t/**\n    * Representation of a single event listener.\n    *\n    * @param {Function} fn The listener function.\n    * @param {Mixed} context The context to invoke the listener with.\n    * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n    * @constructor\n    * @api private\n    */\n\t\t\tfunction EE(fn, context, once) {\n\t\t\t\tthis.fn = fn;\n\t\t\t\tthis.context = context;\n\t\t\t\tthis.once = once || false;\n\t\t\t}\n\n\t\t\t/**\n    * Minimal `EventEmitter` interface that is molded against the Node.js\n    * `EventEmitter` interface.\n    *\n    * @constructor\n    * @api public\n    */\n\t\t\tfunction EventEmitter() {\n\t\t\t\tthis._events = new Events();\n\t\t\t\tthis._eventsCount = 0;\n\t\t\t}\n\n\t\t\t/**\n    * Return an array listing the events for which the emitter has registered\n    * listeners.\n    *\n    * @returns {Array}\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.eventNames = function eventNames() {\n\t\t\t\tvar names = [],\n\t\t\t\t    events,\n\t\t\t\t    name;\n\n\t\t\t\tif (this._eventsCount === 0) return names;\n\n\t\t\t\tfor (name in events = this._events) {\n\t\t\t\t\tif (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n\t\t\t\t}\n\n\t\t\t\tif (Object.getOwnPropertySymbols) {\n\t\t\t\t\treturn names.concat(Object.getOwnPropertySymbols(events));\n\t\t\t\t}\n\n\t\t\t\treturn names;\n\t\t\t};\n\n\t\t\t/**\n    * Return the listeners registered for a given event.\n    *\n    * @param {String|Symbol} event The event name.\n    * @param {Boolean} exists Only check if there are listeners.\n    * @returns {Array|Boolean}\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.listeners = function listeners(event, exists) {\n\t\t\t\tvar evt = prefix ? prefix + event : event,\n\t\t\t\t    available = this._events[evt];\n\n\t\t\t\tif (exists) return !!available;\n\t\t\t\tif (!available) return [];\n\t\t\t\tif (available.fn) return [available.fn];\n\n\t\t\t\tfor (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n\t\t\t\t\tee[i] = available[i].fn;\n\t\t\t\t}\n\n\t\t\t\treturn ee;\n\t\t\t};\n\n\t\t\t/**\n    * Calls each of the listeners registered for a given event.\n    *\n    * @param {String|Symbol} event The event name.\n    * @returns {Boolean} `true` if the event had listeners, else `false`.\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n\t\t\t\tvar evt = prefix ? prefix + event : event;\n\n\t\t\t\tif (!this._events[evt]) return false;\n\n\t\t\t\tvar listeners = this._events[evt],\n\t\t\t\t    len = arguments.length,\n\t\t\t\t    args,\n\t\t\t\t    i;\n\n\t\t\t\tif (listeners.fn) {\n\t\t\t\t\tif (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n\t\t\t\t\tswitch (len) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context), true;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context, a1), true;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context, a1, a2), true;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context, a1, a2, a3), true;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (i = 1, args = new Array(len - 1); i < len; i++) {\n\t\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tlisteners.fn.apply(listeners.context, args);\n\t\t\t\t} else {\n\t\t\t\t\tvar length = listeners.length,\n\t\t\t\t\t    j;\n\n\t\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\t\tif (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n\t\t\t\t\t\tswitch (len) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tlisteners[i].fn.call(listeners[i].context);break;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tlisteners[i].fn.call(listeners[i].context, a1);break;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tlisteners[i].fn.call(listeners[i].context, a1, a2);break;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tlisteners[i].fn.call(listeners[i].context, a1, a2, a3);break;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {\n\t\t\t\t\t\t\t\t\targs[j - 1] = arguments[j];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlisteners[i].fn.apply(listeners[i].context, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\t/**\n    * Add a listener for a given event.\n    *\n    * @param {String|Symbol} event The event name.\n    * @param {Function} fn The listener function.\n    * @param {Mixed} [context=this] The context to invoke the listener with.\n    * @returns {EventEmitter} `this`.\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.on = function on(event, fn, context) {\n\t\t\t\tvar listener = new EE(fn, context || this),\n\t\t\t\t    evt = prefix ? prefix + event : event;\n\n\t\t\t\tif (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t/**\n    * Add a one-time listener for a given event.\n    *\n    * @param {String|Symbol} event The event name.\n    * @param {Function} fn The listener function.\n    * @param {Mixed} [context=this] The context to invoke the listener with.\n    * @returns {EventEmitter} `this`.\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.once = function once(event, fn, context) {\n\t\t\t\tvar listener = new EE(fn, context || this, true),\n\t\t\t\t    evt = prefix ? prefix + event : event;\n\n\t\t\t\tif (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t/**\n    * Remove the listeners of a given event.\n    *\n    * @param {String|Symbol} event The event name.\n    * @param {Function} fn Only remove the listeners that match this function.\n    * @param {Mixed} context Only remove the listeners that have this context.\n    * @param {Boolean} once Only remove one-time listeners.\n    * @returns {EventEmitter} `this`.\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n\t\t\t\tvar evt = prefix ? prefix + event : event;\n\n\t\t\t\tif (!this._events[evt]) return this;\n\t\t\t\tif (!fn) {\n\t\t\t\t\tif (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tvar listeners = this._events[evt];\n\n\t\t\t\tif (listeners.fn) {\n\t\t\t\t\tif (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n\t\t\t\t\t\tif (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i = 0, events = [], length = listeners.length; i < length; i++) {\n\t\t\t\t\t\tif (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n\t\t\t\t\t\t\tevents.push(listeners[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//\n\t\t\t\t\t// Reset the array, or remove it completely if we have no more listeners.\n\t\t\t\t\t//\n\t\t\t\t\tif (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t/**\n    * Remove all listeners, or those of the specified event.\n    *\n    * @param {String|Symbol} [event] The event name.\n    * @returns {EventEmitter} `this`.\n    * @api public\n    */\n\t\t\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n\t\t\t\tvar evt;\n\n\t\t\t\tif (event) {\n\t\t\t\t\tevt = prefix ? prefix + event : event;\n\t\t\t\t\tif (this._events[evt]) {\n\t\t\t\t\t\tif (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._events = new Events();\n\t\t\t\t\tthis._eventsCount = 0;\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t//\n\t\t\t// Alias methods names because people roll like that.\n\t\t\t//\n\t\t\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\t\t\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n\t\t\t//\n\t\t\t// This function doesn't apply anymore.\n\t\t\t//\n\t\t\tEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t//\n\t\t\t// Expose the prefix.\n\t\t\t//\n\t\t\tEventEmitter.prefixed = prefix;\n\n\t\t\t//\n\t\t\t// Allow `EventEmitter` to be imported as module namespace.\n\t\t\t//\n\t\t\tEventEmitter.EventEmitter = EventEmitter;\n\n\t\t\t//\n\t\t\t// Expose the module.\n\t\t\t//\n\t\t\tif ('undefined' !== typeof module) {\n\t\t\t\tmodule.exports = EventEmitter;\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 37 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tvar levels = ['error', 'warn', 'log', 'info'];\n\t\t\tvar level = 'warn';\n\n\t\t\tfunction debug(method) {\n\t\t\t\tif (levels.indexOf(method) <= levels.indexOf(level)) {\n\t\t\t\t\tfor (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t\t\t\t\t\targs[_key - 1] = arguments[_key];\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole[method].apply(console, args); // eslint-disable-line no-console\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction namespace(ns) {\n\t\t\t\treturn levels.reduce(function (logger, method) {\n\t\t\t\t\tlogger[method] = debug.bind(console, method, ns);\n\t\t\t\t\treturn logger;\n\t\t\t\t}, {});\n\t\t\t}\n\n\t\t\tdebug.level = namespace.level = function (newLevel) {\n\t\t\t\tlevel = newLevel;\n\t\t\t};\n\n\t\t\texports.default = namespace;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 38 */\n\t\t/***/function (module, exports) {\n\n\t\t\tvar clone = function () {\n\t\t\t\t'use strict';\n\n\t\t\t\tvar nativeMap;\n\t\t\t\ttry {\n\t\t\t\t\tnativeMap = Map;\n\t\t\t\t} catch (_) {\n\t\t\t\t\t// maybe a reference error because no `Map`. Give it a dummy value that no\n\t\t\t\t\t// value will ever be an instanceof.\n\t\t\t\t\tnativeMap = function nativeMap() {};\n\t\t\t\t}\n\n\t\t\t\tvar nativeSet;\n\t\t\t\ttry {\n\t\t\t\t\tnativeSet = Set;\n\t\t\t\t} catch (_) {\n\t\t\t\t\tnativeSet = function nativeSet() {};\n\t\t\t\t}\n\n\t\t\t\tvar nativePromise;\n\t\t\t\ttry {\n\t\t\t\t\tnativePromise = Promise;\n\t\t\t\t} catch (_) {\n\t\t\t\t\tnativePromise = function nativePromise() {};\n\t\t\t\t}\n\n\t\t\t\t/**\n     * Clones (copies) an Object using deep copying.\n     *\n     * This function supports circular references by default, but if you are certain\n     * there are no circular references in your object, you can save some CPU time\n     * by calling clone(obj, false).\n     *\n     * Caution: if `circular` is false and `parent` contains circular references,\n     * your program may enter an infinite loop and crash.\n     *\n     * @param `parent` - the object to be cloned\n     * @param `circular` - set to true if the object to be cloned may contain\n     *    circular references. (optional - true by default)\n     * @param `depth` - set to a number if the object is only to be cloned to\n     *    a particular depth. (optional - defaults to Infinity)\n     * @param `prototype` - sets the prototype to be used when cloning an object.\n     *    (optional - defaults to parent prototype).\n     * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n     *    should be cloned as well. Non-enumerable properties on the prototype\n     *    chain will be ignored. (optional - false by default)\n    */\n\t\t\t\tfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n\t\t\t\t\tif ((typeof circular === 'undefined' ? 'undefined' : _typeof2(circular)) === 'object') {\n\t\t\t\t\t\tdepth = circular.depth;\n\t\t\t\t\t\tprototype = circular.prototype;\n\t\t\t\t\t\tincludeNonEnumerable = circular.includeNonEnumerable;\n\t\t\t\t\t\tcircular = circular.circular;\n\t\t\t\t\t}\n\t\t\t\t\t// maintain two arrays for circular references, where corresponding parents\n\t\t\t\t\t// and children have the same index\n\t\t\t\t\tvar allParents = [];\n\t\t\t\t\tvar allChildren = [];\n\n\t\t\t\t\tvar useBuffer = typeof Buffer != 'undefined';\n\n\t\t\t\t\tif (typeof circular == 'undefined') circular = true;\n\n\t\t\t\t\tif (typeof depth == 'undefined') depth = Infinity;\n\n\t\t\t\t\t// recurse this function so we don't reset allParents and allChildren\n\t\t\t\t\tfunction _clone(parent, depth) {\n\t\t\t\t\t\t// cloning null always returns null\n\t\t\t\t\t\tif (parent === null) return null;\n\n\t\t\t\t\t\tif (depth === 0) return parent;\n\n\t\t\t\t\t\tvar child;\n\t\t\t\t\t\tvar proto;\n\t\t\t\t\t\tif ((typeof parent === 'undefined' ? 'undefined' : _typeof2(parent)) != 'object') {\n\t\t\t\t\t\t\treturn parent;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (parent instanceof nativeMap) {\n\t\t\t\t\t\t\tchild = new nativeMap();\n\t\t\t\t\t\t} else if (parent instanceof nativeSet) {\n\t\t\t\t\t\t\tchild = new nativeSet();\n\t\t\t\t\t\t} else if (parent instanceof nativePromise) {\n\t\t\t\t\t\t\tchild = new nativePromise(function (resolve, reject) {\n\t\t\t\t\t\t\t\tparent.then(function (value) {\n\t\t\t\t\t\t\t\t\tresolve(_clone(value, depth - 1));\n\t\t\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\t\t\treject(_clone(err, depth - 1));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (clone.__isArray(parent)) {\n\t\t\t\t\t\t\tchild = [];\n\t\t\t\t\t\t} else if (clone.__isRegExp(parent)) {\n\t\t\t\t\t\t\tchild = new RegExp(parent.source, __getRegExpFlags(parent));\n\t\t\t\t\t\t\tif (parent.lastIndex) child.lastIndex = parent.lastIndex;\n\t\t\t\t\t\t} else if (clone.__isDate(parent)) {\n\t\t\t\t\t\t\tchild = new Date(parent.getTime());\n\t\t\t\t\t\t} else if (useBuffer && Buffer.isBuffer(parent)) {\n\t\t\t\t\t\t\tchild = new Buffer(parent.length);\n\t\t\t\t\t\t\tparent.copy(child);\n\t\t\t\t\t\t\treturn child;\n\t\t\t\t\t\t} else if (parent instanceof Error) {\n\t\t\t\t\t\t\tchild = Object.create(parent);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (typeof prototype == 'undefined') {\n\t\t\t\t\t\t\t\tproto = Object.getPrototypeOf(parent);\n\t\t\t\t\t\t\t\tchild = Object.create(proto);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchild = Object.create(prototype);\n\t\t\t\t\t\t\t\tproto = prototype;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (circular) {\n\t\t\t\t\t\t\tvar index = allParents.indexOf(parent);\n\n\t\t\t\t\t\t\tif (index != -1) {\n\t\t\t\t\t\t\t\treturn allChildren[index];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tallParents.push(parent);\n\t\t\t\t\t\t\tallChildren.push(child);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (parent instanceof nativeMap) {\n\t\t\t\t\t\t\tvar keyIterator = parent.keys();\n\t\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\t\tvar next = keyIterator.next();\n\t\t\t\t\t\t\t\tif (next.done) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar keyChild = _clone(next.value, depth - 1);\n\t\t\t\t\t\t\t\tvar valueChild = _clone(parent.get(next.value), depth - 1);\n\t\t\t\t\t\t\t\tchild.set(keyChild, valueChild);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (parent instanceof nativeSet) {\n\t\t\t\t\t\t\tvar iterator = parent.keys();\n\t\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\t\tvar next = iterator.next();\n\t\t\t\t\t\t\t\tif (next.done) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar entryChild = _clone(next.value, depth - 1);\n\t\t\t\t\t\t\t\tchild.add(entryChild);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (var i in parent) {\n\t\t\t\t\t\t\tvar attrs;\n\t\t\t\t\t\t\tif (proto) {\n\t\t\t\t\t\t\t\tattrs = Object.getOwnPropertyDescriptor(proto, i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (attrs && attrs.set == null) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchild[i] = _clone(parent[i], depth - 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.getOwnPropertySymbols) {\n\t\t\t\t\t\t\tvar symbols = Object.getOwnPropertySymbols(parent);\n\t\t\t\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\t\t\t\t// Don't need to worry about cloning a symbol because it is a primitive,\n\t\t\t\t\t\t\t\t// like a number or string.\n\t\t\t\t\t\t\t\tvar symbol = symbols[i];\n\t\t\t\t\t\t\t\tvar descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n\t\t\t\t\t\t\t\tif (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchild[symbol] = _clone(parent[symbol], depth - 1);\n\t\t\t\t\t\t\t\tif (!descriptor.enumerable) {\n\t\t\t\t\t\t\t\t\tObject.defineProperty(child, symbol, {\n\t\t\t\t\t\t\t\t\t\tenumerable: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (includeNonEnumerable) {\n\t\t\t\t\t\t\tvar allPropertyNames = Object.getOwnPropertyNames(parent);\n\t\t\t\t\t\t\tfor (var i = 0; i < allPropertyNames.length; i++) {\n\t\t\t\t\t\t\t\tvar propertyName = allPropertyNames[i];\n\t\t\t\t\t\t\t\tvar descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n\t\t\t\t\t\t\t\tif (descriptor && descriptor.enumerable) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchild[propertyName] = _clone(parent[propertyName], depth - 1);\n\t\t\t\t\t\t\t\tObject.defineProperty(child, propertyName, {\n\t\t\t\t\t\t\t\t\tenumerable: false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn _clone(parent, depth);\n\t\t\t\t}\n\n\t\t\t\t/**\n     * Simple flat clone using prototype, accepts only objects, usefull for property\n     * override on FLAT configuration object (no nested props).\n     *\n     * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n     * works.\n     */\n\t\t\t\tclone.clonePrototype = function clonePrototype(parent) {\n\t\t\t\t\tif (parent === null) return null;\n\n\t\t\t\t\tvar c = function c() {};\n\t\t\t\t\tc.prototype = parent;\n\t\t\t\t\treturn new c();\n\t\t\t\t};\n\n\t\t\t\t// private utility functions\n\n\t\t\t\tfunction __objToStr(o) {\n\t\t\t\t\treturn Object.prototype.toString.call(o);\n\t\t\t\t}\n\t\t\t\tclone.__objToStr = __objToStr;\n\n\t\t\t\tfunction __isDate(o) {\n\t\t\t\t\treturn (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object Date]';\n\t\t\t\t}\n\t\t\t\tclone.__isDate = __isDate;\n\n\t\t\t\tfunction __isArray(o) {\n\t\t\t\t\treturn (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object Array]';\n\t\t\t\t}\n\t\t\t\tclone.__isArray = __isArray;\n\n\t\t\t\tfunction __isRegExp(o) {\n\t\t\t\t\treturn (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object RegExp]';\n\t\t\t\t}\n\t\t\t\tclone.__isRegExp = __isRegExp;\n\n\t\t\t\tfunction __getRegExpFlags(re) {\n\t\t\t\t\tvar flags = '';\n\t\t\t\t\tif (re.global) flags += 'g';\n\t\t\t\t\tif (re.ignoreCase) flags += 'i';\n\t\t\t\t\tif (re.multiline) flags += 'm';\n\t\t\t\t\treturn flags;\n\t\t\t\t}\n\t\t\t\tclone.__getRegExpFlags = __getRegExpFlags;\n\n\t\t\t\treturn clone;\n\t\t\t}();\n\n\t\t\tif ((typeof module === 'undefined' ? 'undefined' : _typeof2(module)) === 'object' && module.exports) {\n\t\t\t\tmodule.exports = clone;\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 39 */\n\t\t/***/function (module, exports) {\n\n\t\t\t\"use strict\";\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar Module = function Module(quill) {\n\t\t\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\t\t_classCallCheck(this, Module);\n\n\t\t\t\tthis.quill = quill;\n\t\t\t\tthis.options = options;\n\t\t\t};\n\n\t\t\tModule.DEFAULTS = {};\n\n\t\t\texports.default = Module;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 40 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.Range = undefined;\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _clone = __webpack_require__(38);\n\n\t\t\tvar _clone2 = _interopRequireDefault(_clone);\n\n\t\t\tvar _deepEqual = __webpack_require__(22);\n\n\t\t\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\t\t\tvar _emitter3 = __webpack_require__(35);\n\n\t\t\tvar _emitter4 = _interopRequireDefault(_emitter3);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _toConsumableArray(arr) {\n\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\tfor (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n\t\t\t\t\t\tarr2[i] = arr[i];\n\t\t\t\t\t}return arr2;\n\t\t\t\t} else {\n\t\t\t\t\treturn Array.from(arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill:selection');\n\n\t\t\tvar Range = function Range(index) {\n\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\t\t_classCallCheck(this, Range);\n\n\t\t\t\tthis.index = index;\n\t\t\t\tthis.length = length;\n\t\t\t};\n\n\t\t\tvar Selection = function () {\n\t\t\t\tfunction Selection(scroll, emitter) {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t_classCallCheck(this, Selection);\n\n\t\t\t\t\tthis.emitter = emitter;\n\t\t\t\t\tthis.scroll = scroll;\n\t\t\t\t\tthis.composing = false;\n\t\t\t\t\tthis.root = this.scroll.domNode;\n\t\t\t\t\tthis.root.addEventListener('compositionstart', function () {\n\t\t\t\t\t\t_this.composing = true;\n\t\t\t\t\t});\n\t\t\t\t\tthis.root.addEventListener('compositionend', function () {\n\t\t\t\t\t\t_this.composing = false;\n\t\t\t\t\t});\n\t\t\t\t\tthis.cursor = _parchment2.default.create('cursor', this);\n\t\t\t\t\t// savedRange is last non-null range\n\t\t\t\t\tthis.lastRange = this.savedRange = new Range(0, 0);\n\t\t\t\t\t['keyup', 'mouseup', 'mouseleave', 'touchend', 'touchleave', 'focus', 'blur'].forEach(function (eventName) {\n\t\t\t\t\t\t_this.root.addEventListener(eventName, function () {\n\t\t\t\t\t\t\t// When range used to be a selection and user click within the selection,\n\t\t\t\t\t\t\t// the range now being a cursor has not updated yet without setTimeout\n\t\t\t\t\t\t\tsetTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 100);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthis.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {\n\t\t\t\t\t\tif (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {\n\t\t\t\t\t\t\t_this.update(_emitter4.default.sources.SILENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {\n\t\t\t\t\t\tvar native = _this.getNativeRange();\n\t\t\t\t\t\tif (native == null) return;\n\t\t\t\t\t\tif (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle\n\t\t\t\t\t\t// TODO unclear if this has negative side effects\n\t\t\t\t\t\t_this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t_this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n\t\t\t\t\t\t\t} catch (ignored) {}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthis.update(_emitter4.default.sources.SILENT);\n\t\t\t\t}\n\n\t\t\t\t_createClass(Selection, [{\n\t\t\t\t\tkey: 'focus',\n\t\t\t\t\tvalue: function focus() {\n\t\t\t\t\t\tif (this.hasFocus()) return;\n\t\t\t\t\t\tthis.root.focus();\n\t\t\t\t\t\tthis.setRange(this.savedRange);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(_format, value) {\n\t\t\t\t\t\tif (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;\n\t\t\t\t\t\tthis.scroll.update();\n\t\t\t\t\t\tvar nativeRange = this.getNativeRange();\n\t\t\t\t\t\tif (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;\n\t\t\t\t\t\tif (nativeRange.start.node !== this.cursor.textNode) {\n\t\t\t\t\t\t\tvar blot = _parchment2.default.find(nativeRange.start.node, false);\n\t\t\t\t\t\t\tif (blot == null) return;\n\t\t\t\t\t\t\t// TODO Give blot ability to not split\n\t\t\t\t\t\t\tif (blot instanceof _parchment2.default.Leaf) {\n\t\t\t\t\t\t\t\tvar after = blot.split(nativeRange.start.offset);\n\t\t\t\t\t\t\t\tblot.parent.insertBefore(this.cursor, after);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tblot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.cursor.attach();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.cursor.format(_format, value);\n\t\t\t\t\t\tthis.scroll.optimize();\n\t\t\t\t\t\tthis.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n\t\t\t\t\t\tthis.update();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getBounds',\n\t\t\t\t\tvalue: function getBounds(index) {\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\t\t\t\tvar scrollLength = this.scroll.length();\n\t\t\t\t\t\tindex = Math.min(index, scrollLength - 1);\n\t\t\t\t\t\tlength = Math.min(index + length, scrollLength - 1) - index;\n\t\t\t\t\t\tvar bounds = void 0,\n\t\t\t\t\t\t    node = void 0,\n\t\t\t\t\t\t    _scroll$leaf = this.scroll.leaf(index),\n\t\t\t\t\t\t    _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),\n\t\t\t\t\t\t    leaf = _scroll$leaf2[0],\n\t\t\t\t\t\t    offset = _scroll$leaf2[1];\n\t\t\t\t\t\tif (leaf == null) return null;\n\n\t\t\t\t\t\tvar _leaf$position = leaf.position(offset, true);\n\n\t\t\t\t\t\tvar _leaf$position2 = _slicedToArray(_leaf$position, 2);\n\n\t\t\t\t\t\tnode = _leaf$position2[0];\n\t\t\t\t\t\toffset = _leaf$position2[1];\n\n\t\t\t\t\t\tvar range = document.createRange();\n\t\t\t\t\t\tif (length > 0) {\n\t\t\t\t\t\t\trange.setStart(node, offset);\n\n\t\t\t\t\t\t\tvar _scroll$leaf3 = this.scroll.leaf(index + length);\n\n\t\t\t\t\t\t\tvar _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);\n\n\t\t\t\t\t\t\tleaf = _scroll$leaf4[0];\n\t\t\t\t\t\t\toffset = _scroll$leaf4[1];\n\n\t\t\t\t\t\t\tif (leaf == null) return null;\n\n\t\t\t\t\t\t\tvar _leaf$position3 = leaf.position(offset, true);\n\n\t\t\t\t\t\t\tvar _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n\n\t\t\t\t\t\t\tnode = _leaf$position4[0];\n\t\t\t\t\t\t\toffset = _leaf$position4[1];\n\n\t\t\t\t\t\t\trange.setEnd(node, offset);\n\t\t\t\t\t\t\tbounds = range.getBoundingClientRect();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar side = 'left';\n\t\t\t\t\t\t\tvar rect = void 0;\n\t\t\t\t\t\t\tif (node instanceof Text) {\n\t\t\t\t\t\t\t\tif (offset < node.data.length) {\n\t\t\t\t\t\t\t\t\trange.setStart(node, offset);\n\t\t\t\t\t\t\t\t\trange.setEnd(node, offset + 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\trange.setStart(node, offset - 1);\n\t\t\t\t\t\t\t\t\trange.setEnd(node, offset);\n\t\t\t\t\t\t\t\t\tside = 'right';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trect = range.getBoundingClientRect();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\trect = leaf.domNode.getBoundingClientRect();\n\t\t\t\t\t\t\t\tif (offset > 0) side = 'right';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbounds = {\n\t\t\t\t\t\t\t\theight: rect.height,\n\t\t\t\t\t\t\t\tleft: rect[side],\n\t\t\t\t\t\t\t\twidth: 0,\n\t\t\t\t\t\t\t\ttop: rect.top\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar containerBounds = this.root.parentNode.getBoundingClientRect();\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tleft: bounds.left - containerBounds.left,\n\t\t\t\t\t\t\tright: bounds.left + bounds.width - containerBounds.left,\n\t\t\t\t\t\t\ttop: bounds.top - containerBounds.top,\n\t\t\t\t\t\t\tbottom: bounds.top + bounds.height - containerBounds.top,\n\t\t\t\t\t\t\theight: bounds.height,\n\t\t\t\t\t\t\twidth: bounds.width\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getNativeRange',\n\t\t\t\t\tvalue: function getNativeRange() {\n\t\t\t\t\t\tvar selection = document.getSelection();\n\t\t\t\t\t\tif (selection == null || selection.rangeCount <= 0) return null;\n\t\t\t\t\t\tvar nativeRange = selection.getRangeAt(0);\n\t\t\t\t\t\tif (nativeRange == null) return null;\n\t\t\t\t\t\tif (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar range = {\n\t\t\t\t\t\t\tstart: { node: nativeRange.startContainer, offset: nativeRange.startOffset },\n\t\t\t\t\t\t\tend: { node: nativeRange.endContainer, offset: nativeRange.endOffset },\n\t\t\t\t\t\t\tnative: nativeRange\n\t\t\t\t\t\t};\n\t\t\t\t\t\t[range.start, range.end].forEach(function (position) {\n\t\t\t\t\t\t\tvar node = position.node,\n\t\t\t\t\t\t\t    offset = position.offset;\n\t\t\t\t\t\t\twhile (!(node instanceof Text) && node.childNodes.length > 0) {\n\t\t\t\t\t\t\t\tif (node.childNodes.length > offset) {\n\t\t\t\t\t\t\t\t\tnode = node.childNodes[offset];\n\t\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\t} else if (node.childNodes.length === offset) {\n\t\t\t\t\t\t\t\t\tnode = node.lastChild;\n\t\t\t\t\t\t\t\t\toffset = node instanceof Text ? node.data.length : node.childNodes.length + 1;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tposition.node = node, position.offset = offset;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdebug.info('getNativeRange', range);\n\t\t\t\t\t\treturn range;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getRange',\n\t\t\t\t\tvalue: function getRange() {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tvar range = this.getNativeRange();\n\t\t\t\t\t\tif (range == null) return [null, null];\n\t\t\t\t\t\tvar positions = [[range.start.node, range.start.offset]];\n\t\t\t\t\t\tif (!range.native.collapsed) {\n\t\t\t\t\t\t\tpositions.push([range.end.node, range.end.offset]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar indexes = positions.map(function (position) {\n\t\t\t\t\t\t\tvar _position = _slicedToArray(position, 2),\n\t\t\t\t\t\t\t    node = _position[0],\n\t\t\t\t\t\t\t    offset = _position[1];\n\n\t\t\t\t\t\t\tvar blot = _parchment2.default.find(node, true);\n\t\t\t\t\t\t\tvar index = blot.offset(_this2.scroll);\n\t\t\t\t\t\t\tif (offset === 0) {\n\t\t\t\t\t\t\t\treturn index;\n\t\t\t\t\t\t\t} else if (blot instanceof _parchment2.default.Container) {\n\t\t\t\t\t\t\t\treturn index + blot.length();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn index + blot.index(node, offset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar start = Math.min.apply(Math, _toConsumableArray(indexes)),\n\t\t\t\t\t\t    end = Math.max.apply(Math, _toConsumableArray(indexes));\n\t\t\t\t\t\tend = Math.min(end, this.scroll.length() - 1);\n\t\t\t\t\t\treturn [new Range(start, end - start), range];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'hasFocus',\n\t\t\t\t\tvalue: function hasFocus() {\n\t\t\t\t\t\treturn document.activeElement === this.root;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'scrollIntoView',\n\t\t\t\t\tvalue: function scrollIntoView() {\n\t\t\t\t\t\tvar range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastRange;\n\n\t\t\t\t\t\tif (range == null) return;\n\t\t\t\t\t\tvar bounds = this.getBounds(range.index, range.length);\n\t\t\t\t\t\tif (bounds == null) return;\n\t\t\t\t\t\tif (this.root.offsetHeight < bounds.bottom) {\n\t\t\t\t\t\t\tvar _scroll$line = this.scroll.line(Math.min(range.index + range.length, this.scroll.length() - 1)),\n\t\t\t\t\t\t\t    _scroll$line2 = _slicedToArray(_scroll$line, 1),\n\t\t\t\t\t\t\t    line = _scroll$line2[0];\n\n\t\t\t\t\t\t\tthis.root.scrollTop = line.domNode.offsetTop + line.domNode.offsetHeight - this.root.offsetHeight;\n\t\t\t\t\t\t} else if (bounds.top < 0) {\n\t\t\t\t\t\t\tvar _scroll$line3 = this.scroll.line(Math.min(range.index, this.scroll.length() - 1)),\n\t\t\t\t\t\t\t    _scroll$line4 = _slicedToArray(_scroll$line3, 1),\n\t\t\t\t\t\t\t    _line = _scroll$line4[0];\n\n\t\t\t\t\t\t\tthis.root.scrollTop = _line.domNode.offsetTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setNativeRange',\n\t\t\t\t\tvalue: function setNativeRange(startNode, startOffset) {\n\t\t\t\t\t\tvar endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n\t\t\t\t\t\tvar endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n\t\t\t\t\t\tvar force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n\t\t\t\t\t\tdebug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n\t\t\t\t\t\tif (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar selection = document.getSelection();\n\t\t\t\t\t\tif (selection == null) return;\n\t\t\t\t\t\tif (startNode != null) {\n\t\t\t\t\t\t\tif (!this.hasFocus()) this.root.focus();\n\t\t\t\t\t\t\tvar native = (this.getNativeRange() || {}).native;\n\t\t\t\t\t\t\tif (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n\n\t\t\t\t\t\t\t\tif (startNode.tagName == \"BR\") {\n\t\t\t\t\t\t\t\t\tstartOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);\n\t\t\t\t\t\t\t\t\tstartNode = startNode.parentNode;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (endNode.tagName == \"BR\") {\n\t\t\t\t\t\t\t\t\tendOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);\n\t\t\t\t\t\t\t\t\tendNode = endNode.parentNode;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar range = document.createRange();\n\t\t\t\t\t\t\t\trange.setStart(startNode, startOffset);\n\t\t\t\t\t\t\t\trange.setEnd(endNode, endOffset);\n\t\t\t\t\t\t\t\tselection.removeAllRanges();\n\t\t\t\t\t\t\t\tselection.addRange(range);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tselection.removeAllRanges();\n\t\t\t\t\t\t\tthis.root.blur();\n\t\t\t\t\t\t\tdocument.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setRange',\n\t\t\t\t\tvalue: function setRange(range) {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t\t\t\t\t\tvar source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n\t\t\t\t\t\tif (typeof force === 'string') {\n\t\t\t\t\t\t\tsource = force;\n\t\t\t\t\t\t\tforce = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdebug.info('setRange', range);\n\t\t\t\t\t\tif (range != null) {\n\t\t\t\t\t\t\t(function () {\n\t\t\t\t\t\t\t\tvar indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];\n\t\t\t\t\t\t\t\tvar args = [];\n\t\t\t\t\t\t\t\tvar scrollLength = _this3.scroll.length();\n\t\t\t\t\t\t\t\tindexes.forEach(function (index, i) {\n\t\t\t\t\t\t\t\t\tindex = Math.min(scrollLength - 1, index);\n\t\t\t\t\t\t\t\t\tvar node = void 0,\n\t\t\t\t\t\t\t\t\t    _scroll$leaf5 = _this3.scroll.leaf(index),\n\t\t\t\t\t\t\t\t\t    _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),\n\t\t\t\t\t\t\t\t\t    leaf = _scroll$leaf6[0],\n\t\t\t\t\t\t\t\t\t    offset = _scroll$leaf6[1];\n\t\t\t\t\t\t\t\t\tvar _leaf$position5 = leaf.position(offset, i !== 0);\n\n\t\t\t\t\t\t\t\t\tvar _leaf$position6 = _slicedToArray(_leaf$position5, 2);\n\n\t\t\t\t\t\t\t\t\tnode = _leaf$position6[0];\n\t\t\t\t\t\t\t\t\toffset = _leaf$position6[1];\n\n\t\t\t\t\t\t\t\t\targs.push(node, offset);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (args.length < 2) {\n\t\t\t\t\t\t\t\t\targs = args.concat(args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_this3.setNativeRange.apply(_this3, _toConsumableArray(args).concat([force]));\n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setNativeRange(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.update(source);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update() {\n\t\t\t\t\t\tvar source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n\t\t\t\t\t\tvar oldRange = this.lastRange;\n\n\t\t\t\t\t\tvar _getRange = this.getRange(),\n\t\t\t\t\t\t    _getRange2 = _slicedToArray(_getRange, 2),\n\t\t\t\t\t\t    lastRange = _getRange2[0],\n\t\t\t\t\t\t    nativeRange = _getRange2[1];\n\n\t\t\t\t\t\tthis.lastRange = lastRange;\n\t\t\t\t\t\tif (this.lastRange != null) {\n\t\t\t\t\t\t\tthis.savedRange = this.lastRange;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {\n\t\t\t\t\t\t\tvar _emitter;\n\n\t\t\t\t\t\t\tif (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n\t\t\t\t\t\t\t\tthis.cursor.restore();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];\n\t\t\t\t\t\t\t(_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n\t\t\t\t\t\t\tif (source !== _emitter4.default.sources.SILENT) {\n\t\t\t\t\t\t\t\tvar _emitter2;\n\n\t\t\t\t\t\t\t\t(_emitter2 = this.emitter).emit.apply(_emitter2, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Selection;\n\t\t\t}();\n\n\t\t\tfunction contains(parent, descendant) {\n\t\t\t\ttry {\n\t\t\t\t\t// Firefox inserts inaccessible nodes around video elements\n\t\t\t\t\tdescendant.parentNode;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// IE11 has bug with Text nodes\n\t\t\t\t// https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n\t\t\t\tif (descendant instanceof Text) {\n\t\t\t\t\tdescendant = descendant.parentNode;\n\t\t\t\t}\n\t\t\t\treturn parent.contains(descendant);\n\t\t\t}\n\n\t\t\texports.Range = Range;\n\t\t\texports.default = Selection;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 41 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar Theme = function () {\n\t\t\t\tfunction Theme(quill, options) {\n\t\t\t\t\t_classCallCheck(this, Theme);\n\n\t\t\t\t\tthis.quill = quill;\n\t\t\t\t\tthis.options = options;\n\t\t\t\t\tthis.modules = {};\n\t\t\t\t}\n\n\t\t\t\t_createClass(Theme, [{\n\t\t\t\t\tkey: 'init',\n\t\t\t\t\tvalue: function init() {\n\t\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t\tObject.keys(this.options.modules).forEach(function (name) {\n\t\t\t\t\t\t\tif (_this.modules[name] == null) {\n\t\t\t\t\t\t\t\t_this.addModule(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'addModule',\n\t\t\t\t\tvalue: function addModule(name) {\n\t\t\t\t\t\tvar moduleClass = this.quill.constructor.import('modules/' + name);\n\t\t\t\t\t\tthis.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});\n\t\t\t\t\t\treturn this.modules[name];\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Theme;\n\t\t\t}();\n\n\t\t\tTheme.DEFAULTS = {\n\t\t\t\tmodules: {}\n\t\t\t};\n\t\t\tTheme.themes = {\n\t\t\t\t'default': Theme\n\t\t\t};\n\n\t\t\texports.default = Theme;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 42 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Container = function (_Parchment$Container) {\n\t\t\t\t_inherits(Container, _Parchment$Container);\n\n\t\t\t\tfunction Container() {\n\t\t\t\t\t_classCallCheck(this, Container);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Container;\n\t\t\t}(_parchment2.default.Container);\n\n\t\t\tContainer.allowedChildren = [_block2.default, _block.BlockEmbed, Container];\n\n\t\t\texports.default = Container;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 43 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _emitter = __webpack_require__(35);\n\n\t\t\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tvar _break = __webpack_require__(30);\n\n\t\t\tvar _break2 = _interopRequireDefault(_break);\n\n\t\t\tvar _container = __webpack_require__(42);\n\n\t\t\tvar _container2 = _interopRequireDefault(_container);\n\n\t\t\tvar _code = __webpack_require__(28);\n\n\t\t\tvar _code2 = _interopRequireDefault(_code);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tfunction isLine(blot) {\n\t\t\t\treturn blot instanceof _block2.default || blot instanceof _block.BlockEmbed;\n\t\t\t}\n\n\t\t\tvar Scroll = function (_Parchment$Scroll) {\n\t\t\t\t_inherits(Scroll, _Parchment$Scroll);\n\n\t\t\t\tfunction Scroll(domNode, config) {\n\t\t\t\t\t_classCallCheck(this, Scroll);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));\n\n\t\t\t\t\t_this.emitter = config.emitter;\n\t\t\t\t\tif (Array.isArray(config.whitelist)) {\n\t\t\t\t\t\t_this.whitelist = config.whitelist.reduce(function (whitelist, format) {\n\t\t\t\t\t\t\twhitelist[format] = true;\n\t\t\t\t\t\t\treturn whitelist;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t}\n\t\t\t\t\t_this.optimize();\n\t\t\t\t\t_this.enable();\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Scroll, [{\n\t\t\t\t\tkey: 'deleteAt',\n\t\t\t\t\tvalue: function deleteAt(index, length) {\n\t\t\t\t\t\tvar _line = this.line(index),\n\t\t\t\t\t\t    _line2 = _slicedToArray(_line, 2),\n\t\t\t\t\t\t    first = _line2[0],\n\t\t\t\t\t\t    offset = _line2[1];\n\n\t\t\t\t\t\tvar _line3 = this.line(index + length),\n\t\t\t\t\t\t    _line4 = _slicedToArray(_line3, 1),\n\t\t\t\t\t\t    last = _line4[0];\n\n\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);\n\t\t\t\t\t\tif (last != null && first !== last && offset > 0 && !(first instanceof _block.BlockEmbed) && !(last instanceof _block.BlockEmbed)) {\n\t\t\t\t\t\t\tif (last instanceof _code2.default) {\n\t\t\t\t\t\t\t\tlast.deleteAt(last.length() - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar ref = last.children.head instanceof _break2.default ? null : last.children.head;\n\t\t\t\t\t\t\tfirst.moveChildren(last, ref);\n\t\t\t\t\t\t\tfirst.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.optimize();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'enable',\n\t\t\t\t\tvalue: function enable() {\n\t\t\t\t\t\tvar enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\t\t\t\t\t\tthis.domNode.setAttribute('contenteditable', enabled);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formatAt',\n\t\t\t\t\tvalue: function formatAt(index, length, format, value) {\n\t\t\t\t\t\tif (this.whitelist != null && !this.whitelist[format]) return;\n\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);\n\t\t\t\t\t\tthis.optimize();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertAt',\n\t\t\t\t\tvalue: function insertAt(index, value, def) {\n\t\t\t\t\t\tif (def != null && this.whitelist != null && !this.whitelist[value]) return;\n\t\t\t\t\t\tif (index >= this.length()) {\n\t\t\t\t\t\t\tif (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {\n\t\t\t\t\t\t\t\tvar blot = _parchment2.default.create(this.statics.defaultChild);\n\t\t\t\t\t\t\t\tthis.appendChild(blot);\n\t\t\t\t\t\t\t\tif (def == null && value.endsWith('\\n')) {\n\t\t\t\t\t\t\t\t\tvalue = value.slice(0, -1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tblot.insertAt(0, value, def);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar embed = _parchment2.default.create(value, def);\n\t\t\t\t\t\t\t\tthis.appendChild(embed);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.optimize();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertBefore',\n\t\t\t\t\tvalue: function insertBefore(blot, ref) {\n\t\t\t\t\t\tif (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {\n\t\t\t\t\t\t\tvar wrapper = _parchment2.default.create(this.statics.defaultChild);\n\t\t\t\t\t\t\twrapper.appendChild(blot);\n\t\t\t\t\t\t\tblot = wrapper;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'leaf',\n\t\t\t\t\tvalue: function leaf(index) {\n\t\t\t\t\t\treturn this.path(index).pop() || [null, -1];\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'line',\n\t\t\t\t\tvalue: function line(index) {\n\t\t\t\t\t\tif (index === this.length()) {\n\t\t\t\t\t\t\treturn this.line(index - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.descendant(isLine, index);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'lines',\n\t\t\t\t\tvalue: function lines() {\n\t\t\t\t\t\tvar index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\t\t\t\tvar length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n\t\t\t\t\t\tvar getLines = function getLines(blot, index, length) {\n\t\t\t\t\t\t\tvar lines = [],\n\t\t\t\t\t\t\t    lengthLeft = length;\n\t\t\t\t\t\t\tblot.children.forEachAt(index, length, function (child, index, length) {\n\t\t\t\t\t\t\t\tif (isLine(child)) {\n\t\t\t\t\t\t\t\t\tlines.push(child);\n\t\t\t\t\t\t\t\t} else if (child instanceof _parchment2.default.Container) {\n\t\t\t\t\t\t\t\t\tlines = lines.concat(getLines(child, index, lengthLeft));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlengthLeft -= length;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn lines;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn getLines(this, index, length);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\tvar mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n\t\t\t\t\t\tif (this.batch === true) return;\n\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations);\n\t\t\t\t\t\tif (mutations.length > 0) {\n\t\t\t\t\t\t\tthis.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'path',\n\t\t\t\t\tvalue: function path(index) {\n\t\t\t\t\t\treturn _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update(mutations) {\n\t\t\t\t\t\tif (this.batch === true) return;\n\t\t\t\t\t\tvar source = _emitter2.default.sources.USER;\n\t\t\t\t\t\tif (typeof mutations === 'string') {\n\t\t\t\t\t\t\tsource = mutations;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!Array.isArray(mutations)) {\n\t\t\t\t\t\t\tmutations = this.observer.takeRecords();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (mutations.length > 0) {\n\t\t\t\t\t\t\tthis.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy\n\t\t\t\t\t\tif (mutations.length > 0) {\n\t\t\t\t\t\t\tthis.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Scroll;\n\t\t\t}(_parchment2.default.Scroll);\n\n\t\t\tScroll.blotName = 'scroll';\n\t\t\tScroll.className = 'ql-editor';\n\t\t\tScroll.tagName = 'DIV';\n\t\t\tScroll.defaultChild = 'block';\n\t\t\tScroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];\n\n\t\t\texports.default = Scroll;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 44 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tvar _align = __webpack_require__(45);\n\n\t\t\tvar _background = __webpack_require__(46);\n\n\t\t\tvar _color = __webpack_require__(47);\n\n\t\t\tvar _direction = __webpack_require__(48);\n\n\t\t\tvar _font = __webpack_require__(49);\n\n\t\t\tvar _size = __webpack_require__(50);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _defineProperty(obj, key, value) {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\tObject.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = value;\n\t\t\t\t}return obj;\n\t\t\t}\n\n\t\t\tfunction _toConsumableArray(arr) {\n\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\tfor (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n\t\t\t\t\t\tarr2[i] = arr[i];\n\t\t\t\t\t}return arr2;\n\t\t\t\t} else {\n\t\t\t\t\treturn Array.from(arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill:clipboard');\n\n\t\t\tvar DOM_KEY = '__ql-matcher';\n\n\t\t\tvar CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];\n\n\t\t\tvar ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {\n\t\t\t\tmemo[attr.keyName] = attr;\n\t\t\t\treturn memo;\n\t\t\t}, {});\n\n\t\t\tvar STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {\n\t\t\t\tmemo[attr.keyName] = attr;\n\t\t\t\treturn memo;\n\t\t\t}, {});\n\n\t\t\tvar Clipboard = function (_Module) {\n\t\t\t\t_inherits(Clipboard, _Module);\n\n\t\t\t\tfunction Clipboard(quill, options) {\n\t\t\t\t\t_classCallCheck(this, Clipboard);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));\n\n\t\t\t\t\t_this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));\n\t\t\t\t\t_this.container = _this.quill.addContainer('ql-clipboard');\n\t\t\t\t\t_this.container.setAttribute('contenteditable', true);\n\t\t\t\t\t_this.container.setAttribute('tabindex', -1);\n\t\t\t\t\t_this.matchers = [];\n\t\t\t\t\tCLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (pair) {\n\t\t\t\t\t\t_this.addMatcher.apply(_this, _toConsumableArray(pair));\n\t\t\t\t\t});\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Clipboard, [{\n\t\t\t\t\tkey: 'addMatcher',\n\t\t\t\t\tvalue: function addMatcher(selector, matcher) {\n\t\t\t\t\t\tthis.matchers.push([selector, matcher]);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'convert',\n\t\t\t\t\tvalue: function convert(html) {\n\t\t\t\t\t\tif (typeof html === 'string') {\n\t\t\t\t\t\t\tthis.container.innerHTML = html;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _prepareMatching = this.prepareMatching(),\n\t\t\t\t\t\t    _prepareMatching2 = _slicedToArray(_prepareMatching, 2),\n\t\t\t\t\t\t    elementMatchers = _prepareMatching2[0],\n\t\t\t\t\t\t    textMatchers = _prepareMatching2[1];\n\n\t\t\t\t\t\tvar delta = traverse(this.container, elementMatchers, textMatchers);\n\t\t\t\t\t\t// Remove trailing newline\n\t\t\t\t\t\tif (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n\t\t\t\t\t\t\tdelta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdebug.log('convert', this.container.innerHTML, delta);\n\t\t\t\t\t\tthis.container.innerHTML = '';\n\t\t\t\t\t\treturn delta;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'dangerouslyPasteHTML',\n\t\t\t\t\tvalue: function dangerouslyPasteHTML(index, html) {\n\t\t\t\t\t\tvar source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;\n\n\t\t\t\t\t\tif (typeof index === 'string') {\n\t\t\t\t\t\t\treturn this.quill.setContents(this.convert(index), html);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar paste = this.convert(html);\n\t\t\t\t\t\t\treturn this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'onPaste',\n\t\t\t\t\tvalue: function onPaste(e) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tif (e.defaultPrevented || !this.quill.isEnabled()) return;\n\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\tvar delta = new _quillDelta2.default().retain(range.index);\n\t\t\t\t\t\tvar scrollTop = this.quill.scrollingContainer.scrollTop;\n\t\t\t\t\t\tthis.container.focus();\n\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t_this2.quill.selection.update(_quill2.default.sources.SILENT);\n\t\t\t\t\t\t\tdelta = delta.concat(_this2.convert()).delete(range.length);\n\t\t\t\t\t\t\t_this2.quill.updateContents(delta, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t// range.length contributes to delta.length()\n\t\t\t\t\t\t\t_this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t\t_this2.quill.scrollingContainer.scrollTop = scrollTop;\n\t\t\t\t\t\t\t_this2.quill.selection.scrollIntoView();\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'prepareMatching',\n\t\t\t\t\tvalue: function prepareMatching() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar elementMatchers = [],\n\t\t\t\t\t\t    textMatchers = [];\n\t\t\t\t\t\tthis.matchers.forEach(function (pair) {\n\t\t\t\t\t\t\tvar _pair = _slicedToArray(pair, 2),\n\t\t\t\t\t\t\t    selector = _pair[0],\n\t\t\t\t\t\t\t    matcher = _pair[1];\n\n\t\t\t\t\t\t\tswitch (selector) {\n\t\t\t\t\t\t\t\tcase Node.TEXT_NODE:\n\t\t\t\t\t\t\t\t\ttextMatchers.push(matcher);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase Node.ELEMENT_NODE:\n\t\t\t\t\t\t\t\t\telementMatchers.push(matcher);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t[].forEach.call(_this3.container.querySelectorAll(selector), function (node) {\n\t\t\t\t\t\t\t\t\t\t// TODO use weakmap\n\t\t\t\t\t\t\t\t\t\tnode[DOM_KEY] = node[DOM_KEY] || [];\n\t\t\t\t\t\t\t\t\t\tnode[DOM_KEY].push(matcher);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn [elementMatchers, textMatchers];\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Clipboard;\n\t\t\t}(_module2.default);\n\n\t\t\tClipboard.DEFAULTS = {\n\t\t\t\tmatchers: []\n\t\t\t};\n\n\t\t\tfunction computeStyle(node) {\n\t\t\t\tif (node.nodeType !== Node.ELEMENT_NODE) return {};\n\t\t\t\tvar DOM_KEY = '__ql-computed-style';\n\t\t\t\treturn node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n\t\t\t}\n\n\t\t\tfunction deltaEndsWith(delta, text) {\n\t\t\t\tvar endText = \"\";\n\t\t\t\tfor (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {\n\t\t\t\t\tvar op = delta.ops[i];\n\t\t\t\t\tif (typeof op.insert !== 'string') break;\n\t\t\t\t\tendText = op.insert + endText;\n\t\t\t\t}\n\t\t\t\treturn endText.slice(-1 * text.length) === text;\n\t\t\t}\n\n\t\t\tfunction isLine(node) {\n\t\t\t\tif (node.childNodes.length === 0) return false; // Exclude embed blocks\n\t\t\t\tvar style = computeStyle(node);\n\t\t\t\treturn ['block', 'list-item'].indexOf(style.display) > -1;\n\t\t\t}\n\n\t\t\tfunction traverse(node, elementMatchers, textMatchers) {\n\t\t\t\t// Post-order\n\t\t\t\tif (node.nodeType === node.TEXT_NODE) {\n\t\t\t\t\treturn textMatchers.reduce(function (delta, matcher) {\n\t\t\t\t\t\treturn matcher(node, delta);\n\t\t\t\t\t}, new _quillDelta2.default());\n\t\t\t\t} else if (node.nodeType === node.ELEMENT_NODE) {\n\t\t\t\t\treturn [].reduce.call(node.childNodes || [], function (delta, childNode) {\n\t\t\t\t\t\tvar childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n\t\t\t\t\t\tif (childNode.nodeType === node.ELEMENT_NODE) {\n\t\t\t\t\t\t\tchildrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {\n\t\t\t\t\t\t\t\treturn matcher(childNode, childrenDelta);\n\t\t\t\t\t\t\t}, childrenDelta);\n\t\t\t\t\t\t\tchildrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {\n\t\t\t\t\t\t\t\treturn matcher(childNode, childrenDelta);\n\t\t\t\t\t\t\t}, childrenDelta);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn delta.concat(childrenDelta);\n\t\t\t\t\t}, new _quillDelta2.default());\n\t\t\t\t} else {\n\t\t\t\t\treturn new _quillDelta2.default();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction matchAlias(format, node, delta) {\n\t\t\t\treturn delta.compose(new _quillDelta2.default().retain(delta.length(), _defineProperty({}, format, true)));\n\t\t\t}\n\n\t\t\tfunction matchAttributor(node, delta) {\n\t\t\t\tvar attributes = _parchment2.default.Attributor.Attribute.keys(node);\n\t\t\t\tvar classes = _parchment2.default.Attributor.Class.keys(node);\n\t\t\t\tvar styles = _parchment2.default.Attributor.Style.keys(node);\n\t\t\t\tvar formats = {};\n\t\t\t\tattributes.concat(classes).concat(styles).forEach(function (name) {\n\t\t\t\t\tvar attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);\n\t\t\t\t\tif (attr != null) {\n\t\t\t\t\t\tformats[attr.attrName] = attr.value(node);\n\t\t\t\t\t\tif (formats[attr.attrName]) return;\n\t\t\t\t\t}\n\t\t\t\t\tif (ATTRIBUTE_ATTRIBUTORS[name] != null) {\n\t\t\t\t\t\tattr = ATTRIBUTE_ATTRIBUTORS[name];\n\t\t\t\t\t\tformats[attr.attrName] = attr.value(node) || undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (STYLE_ATTRIBUTORS[name] != null) {\n\t\t\t\t\t\tattr = STYLE_ATTRIBUTORS[name];\n\t\t\t\t\t\tformats[attr.attrName] = attr.value(node) || undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (Object.keys(formats).length > 0) {\n\t\t\t\t\tdelta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchBlot(node, delta) {\n\t\t\t\tvar match = _parchment2.default.query(node);\n\t\t\t\tif (match == null) return delta;\n\t\t\t\tif (match.prototype instanceof _parchment2.default.Embed) {\n\t\t\t\t\tvar embed = {};\n\t\t\t\t\tvar value = match.value(node);\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tembed[match.blotName] = value;\n\t\t\t\t\t\tdelta = new _quillDelta2.default().insert(embed, match.formats(node));\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof match.formats === 'function') {\n\t\t\t\t\tvar formats = _defineProperty({}, match.blotName, match.formats(node));\n\t\t\t\t\tdelta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchBreak(node, delta) {\n\t\t\t\tif (!deltaEndsWith(delta, '\\n')) {\n\t\t\t\t\tdelta.insert('\\n');\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchIgnore() {\n\t\t\t\treturn new _quillDelta2.default();\n\t\t\t}\n\n\t\t\tfunction matchNewline(node, delta) {\n\t\t\t\tif (isLine(node) && !deltaEndsWith(delta, '\\n')) {\n\t\t\t\t\tdelta.insert('\\n');\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchSpacing(node, delta) {\n\t\t\t\tif (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\\n\\n')) {\n\t\t\t\t\tvar nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n\t\t\t\t\tif (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {\n\t\t\t\t\t\tdelta.insert('\\n');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchStyles(node, delta) {\n\t\t\t\tvar formats = {};\n\t\t\t\tvar style = node.style || {};\n\t\t\t\tif (style.fontStyle && computeStyle(node).fontStyle === 'italic') {\n\t\t\t\t\tformats.italic = true;\n\t\t\t\t}\n\t\t\t\tif (style.fontWeight && computeStyle(node).fontWeight === 'bold') {\n\t\t\t\t\tformats.bold = true;\n\t\t\t\t}\n\t\t\t\tif (Object.keys(formats).length > 0) {\n\t\t\t\t\tdelta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t\t\t\t}\n\t\t\t\tif (parseFloat(style.textIndent || 0) > 0) {\n\t\t\t\t\t// Could be 0.5in\n\t\t\t\t\tdelta = new _quillDelta2.default().insert('\\t').concat(delta);\n\t\t\t\t}\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\tfunction matchText(node, delta) {\n\t\t\t\tvar text = node.data;\n\t\t\t\t// Word represents empty line with <o:p>&nbsp;</o:p>\n\t\t\t\tif (node.parentNode.tagName === 'O:P') {\n\t\t\t\t\treturn delta.insert(text.trim());\n\t\t\t\t}\n\t\t\t\tif (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {\n\t\t\t\t\t// eslint-disable-next-line func-style\n\t\t\t\t\tvar replacer = function replacer(collapse, match) {\n\t\t\t\t\t\tmatch = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n\t\t\t\t\t\treturn match.length < 1 && collapse ? ' ' : match;\n\t\t\t\t\t};\n\t\t\t\t\ttext = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n\t\t\t\t\ttext = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n\t\t\t\t\tif (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n\t\t\t\t\t\ttext = text.replace(/^\\s+/, replacer.bind(replacer, false));\n\t\t\t\t\t}\n\t\t\t\t\tif (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n\t\t\t\t\t\ttext = text.replace(/\\s+$/, replacer.bind(replacer, false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn delta.insert(text);\n\t\t\t}\n\n\t\t\texports.default = Clipboard;\n\t\t\texports.matchAttributor = matchAttributor;\n\t\t\texports.matchBlot = matchBlot;\n\t\t\texports.matchNewline = matchNewline;\n\t\t\texports.matchSpacing = matchSpacing;\n\t\t\texports.matchText = matchText;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 45 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tvar config = {\n\t\t\t\tscope: _parchment2.default.Scope.BLOCK,\n\t\t\t\twhitelist: ['right', 'center', 'justify']\n\t\t\t};\n\n\t\t\tvar AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);\n\t\t\tvar AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);\n\t\t\tvar AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);\n\n\t\t\texports.AlignAttribute = AlignAttribute;\n\t\t\texports.AlignClass = AlignClass;\n\t\t\texports.AlignStyle = AlignStyle;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 46 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.BackgroundStyle = exports.BackgroundClass = undefined;\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _color = __webpack_require__(47);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tvar BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE\n\t\t\t});\n\t\t\tvar BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE\n\t\t\t});\n\n\t\t\texports.BackgroundClass = BackgroundClass;\n\t\t\texports.BackgroundStyle = BackgroundStyle;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 47 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ColorAttributor = function (_Parchment$Attributor) {\n\t\t\t\t_inherits(ColorAttributor, _Parchment$Attributor);\n\n\t\t\t\tfunction ColorAttributor() {\n\t\t\t\t\t_classCallCheck(this, ColorAttributor);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(ColorAttributor, [{\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(domNode) {\n\t\t\t\t\t\tvar value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);\n\t\t\t\t\t\tif (!value.startsWith('rgb(')) return value;\n\t\t\t\t\t\tvalue = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\n\t\t\t\t\t\treturn '#' + value.split(',').map(function (component) {\n\t\t\t\t\t\t\treturn ('00' + parseInt(component).toString(16)).slice(-2);\n\t\t\t\t\t\t}).join('');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn ColorAttributor;\n\t\t\t}(_parchment2.default.Attributor.Style);\n\n\t\t\tvar ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE\n\t\t\t});\n\t\t\tvar ColorStyle = new ColorAttributor('color', 'color', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE\n\t\t\t});\n\n\t\t\texports.ColorAttributor = ColorAttributor;\n\t\t\texports.ColorClass = ColorClass;\n\t\t\texports.ColorStyle = ColorStyle;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 48 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tvar config = {\n\t\t\t\tscope: _parchment2.default.Scope.BLOCK,\n\t\t\t\twhitelist: ['rtl']\n\t\t\t};\n\n\t\t\tvar DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);\n\t\t\tvar DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);\n\t\t\tvar DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);\n\n\t\t\texports.DirectionAttribute = DirectionAttribute;\n\t\t\texports.DirectionClass = DirectionClass;\n\t\t\texports.DirectionStyle = DirectionStyle;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 49 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.FontClass = exports.FontStyle = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar config = {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE,\n\t\t\t\twhitelist: ['serif', 'monospace']\n\t\t\t};\n\n\t\t\tvar FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);\n\n\t\t\tvar FontStyleAttributor = function (_Parchment$Attributor) {\n\t\t\t\t_inherits(FontStyleAttributor, _Parchment$Attributor);\n\n\t\t\t\tfunction FontStyleAttributor() {\n\t\t\t\t\t_classCallCheck(this, FontStyleAttributor);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(FontStyleAttributor, [{\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(node) {\n\t\t\t\t\t\treturn _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/[\"']/g, '');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn FontStyleAttributor;\n\t\t\t}(_parchment2.default.Attributor.Style);\n\n\t\t\tvar FontStyle = new FontStyleAttributor('font', 'font-family', config);\n\n\t\t\texports.FontStyle = FontStyle;\n\t\t\texports.FontClass = FontClass;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 50 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.SizeStyle = exports.SizeClass = undefined;\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tvar SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE,\n\t\t\t\twhitelist: ['small', 'large', 'huge']\n\t\t\t});\n\t\t\tvar SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE,\n\t\t\t\twhitelist: ['10px', '18px', '32px']\n\t\t\t});\n\n\t\t\texports.SizeClass = SizeClass;\n\t\t\texports.SizeStyle = SizeStyle;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 51 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.getLastChangeIndex = exports.default = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar History = function (_Module) {\n\t\t\t\t_inherits(History, _Module);\n\n\t\t\t\tfunction History(quill, options) {\n\t\t\t\t\t_classCallCheck(this, History);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));\n\n\t\t\t\t\t_this.lastRecorded = 0;\n\t\t\t\t\t_this.ignoreChange = false;\n\t\t\t\t\t_this.clear();\n\t\t\t\t\t_this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {\n\t\t\t\t\t\tif (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;\n\t\t\t\t\t\tif (!_this.options.userOnly || source === _quill2.default.sources.USER) {\n\t\t\t\t\t\t\t_this.record(delta, oldDelta);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this.transform(delta);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t_this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));\n\t\t\t\t\t_this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));\n\t\t\t\t\tif (/Win/i.test(navigator.platform)) {\n\t\t\t\t\t\t_this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));\n\t\t\t\t\t}\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(History, [{\n\t\t\t\t\tkey: 'change',\n\t\t\t\t\tvalue: function change(source, dest) {\n\t\t\t\t\t\tif (this.stack[source].length === 0) return;\n\t\t\t\t\t\tvar delta = this.stack[source].pop();\n\t\t\t\t\t\tthis.lastRecorded = 0;\n\t\t\t\t\t\tthis.ignoreChange = true;\n\t\t\t\t\t\tthis.quill.updateContents(delta[source], _quill2.default.sources.USER);\n\t\t\t\t\t\tthis.ignoreChange = false;\n\t\t\t\t\t\tvar index = getLastChangeIndex(delta[source]);\n\t\t\t\t\t\tthis.quill.setSelection(index);\n\t\t\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t\t\t\tthis.stack[dest].push(delta);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'clear',\n\t\t\t\t\tvalue: function clear() {\n\t\t\t\t\t\tthis.stack = { undo: [], redo: [] };\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'record',\n\t\t\t\t\tvalue: function record(changeDelta, oldDelta) {\n\t\t\t\t\t\tif (changeDelta.ops.length === 0) return;\n\t\t\t\t\t\tthis.stack.redo = [];\n\t\t\t\t\t\tvar undoDelta = this.quill.getContents().diff(oldDelta);\n\t\t\t\t\t\tvar timestamp = Date.now();\n\t\t\t\t\t\tif (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n\t\t\t\t\t\t\tvar delta = this.stack.undo.pop();\n\t\t\t\t\t\t\tundoDelta = undoDelta.compose(delta.undo);\n\t\t\t\t\t\t\tchangeDelta = delta.redo.compose(changeDelta);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.lastRecorded = timestamp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.undo.push({\n\t\t\t\t\t\t\tredo: changeDelta,\n\t\t\t\t\t\t\tundo: undoDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (this.stack.undo.length > this.options.maxStack) {\n\t\t\t\t\t\t\tthis.stack.undo.shift();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'redo',\n\t\t\t\t\tvalue: function redo() {\n\t\t\t\t\t\tthis.change('redo', 'undo');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'transform',\n\t\t\t\t\tvalue: function transform(delta) {\n\t\t\t\t\t\tthis.stack.undo.forEach(function (change) {\n\t\t\t\t\t\t\tchange.undo = delta.transform(change.undo, true);\n\t\t\t\t\t\t\tchange.redo = delta.transform(change.redo, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.stack.redo.forEach(function (change) {\n\t\t\t\t\t\t\tchange.undo = delta.transform(change.undo, true);\n\t\t\t\t\t\t\tchange.redo = delta.transform(change.redo, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'undo',\n\t\t\t\t\tvalue: function undo() {\n\t\t\t\t\t\tthis.change('undo', 'redo');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn History;\n\t\t\t}(_module2.default);\n\n\t\t\tHistory.DEFAULTS = {\n\t\t\t\tdelay: 1000,\n\t\t\t\tmaxStack: 100,\n\t\t\t\tuserOnly: false\n\t\t\t};\n\n\t\t\tfunction endsWithNewlineChange(delta) {\n\t\t\t\tvar lastOp = delta.ops[delta.ops.length - 1];\n\t\t\t\tif (lastOp == null) return false;\n\t\t\t\tif (lastOp.insert != null) {\n\t\t\t\t\treturn typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n\t\t\t\t}\n\t\t\t\tif (lastOp.attributes != null) {\n\t\t\t\t\treturn Object.keys(lastOp.attributes).some(function (attr) {\n\t\t\t\t\t\treturn _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfunction getLastChangeIndex(delta) {\n\t\t\t\tvar deleteLength = delta.reduce(function (length, op) {\n\t\t\t\t\tlength += op.delete || 0;\n\t\t\t\t\treturn length;\n\t\t\t\t}, 0);\n\t\t\t\tvar changeIndex = delta.length() - deleteLength;\n\t\t\t\tif (endsWithNewlineChange(delta)) {\n\t\t\t\t\tchangeIndex -= 1;\n\t\t\t\t}\n\t\t\t\treturn changeIndex;\n\t\t\t}\n\n\t\t\texports.default = History;\n\t\t\texports.getLastChangeIndex = getLastChangeIndex;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 52 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t\t\t\treturn typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t} : function (obj) {\n\t\t\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t};\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _clone = __webpack_require__(38);\n\n\t\t\tvar _clone2 = _interopRequireDefault(_clone);\n\n\t\t\tvar _deepEqual = __webpack_require__(22);\n\n\t\t\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _op = __webpack_require__(26);\n\n\t\t\tvar _op2 = _interopRequireDefault(_op);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill:keyboard');\n\n\t\t\tvar SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\n\t\t\tvar Keyboard = function (_Module) {\n\t\t\t\t_inherits(Keyboard, _Module);\n\n\t\t\t\t_createClass(Keyboard, null, [{\n\t\t\t\t\tkey: 'match',\n\t\t\t\t\tvalue: function match(evt, binding) {\n\t\t\t\t\t\tbinding = normalize(binding);\n\t\t\t\t\t\tif (!!binding.shortKey !== evt[SHORTKEY] && binding.shortKey !== null) return false;\n\t\t\t\t\t\tif (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {\n\t\t\t\t\t\t\treturn key != SHORTKEY && !!binding[key] !== evt[key] && binding[key] !== null;\n\t\t\t\t\t\t})) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn binding.key === (evt.which || evt.keyCode);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\tfunction Keyboard(quill, options) {\n\t\t\t\t\t_classCallCheck(this, Keyboard);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));\n\n\t\t\t\t\t_this.bindings = {};\n\t\t\t\t\tObject.keys(_this.options.bindings).forEach(function (name) {\n\t\t\t\t\t\tif (_this.options.bindings[name]) {\n\t\t\t\t\t\t\t_this.addBinding(_this.options.bindings[name]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);\n\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});\n\t\t\t\t\tif (/Firefox/i.test(navigator.userAgent)) {\n\t\t\t\t\t\t// Need to handle delete and backspace for Firefox in the general case #1171\n\t\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);\n\t\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);\n\t\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);\n\t\t\t\t\t}\n\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);\n\t\t\t\t\t_this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);\n\t\t\t\t\t_this.listen();\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Keyboard, [{\n\t\t\t\t\tkey: 'addBinding',\n\t\t\t\t\tvalue: function addBinding(key) {\n\t\t\t\t\t\tvar context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\t\t\t\t\tvar handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t\t\t\t\t\tvar binding = normalize(key);\n\t\t\t\t\t\tif (binding == null || binding.key == null) {\n\t\t\t\t\t\t\treturn debug.warn('Attempted to add invalid keyboard binding', binding);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof context === 'function') {\n\t\t\t\t\t\t\tcontext = { handler: context };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof handler === 'function') {\n\t\t\t\t\t\t\thandler = { handler: handler };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbinding = (0, _extend2.default)(binding, context, handler);\n\t\t\t\t\t\tthis.bindings[binding.key] = this.bindings[binding.key] || [];\n\t\t\t\t\t\tthis.bindings[binding.key].push(binding);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'listen',\n\t\t\t\t\tvalue: function listen() {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tthis.quill.root.addEventListener('keydown', function (evt) {\n\t\t\t\t\t\t\tif (evt.defaultPrevented) return;\n\t\t\t\t\t\t\tvar which = evt.which || evt.keyCode;\n\t\t\t\t\t\t\tvar bindings = (_this2.bindings[which] || []).filter(function (binding) {\n\t\t\t\t\t\t\t\treturn Keyboard.match(evt, binding);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (bindings.length === 0) return;\n\t\t\t\t\t\t\tvar range = _this2.quill.getSelection();\n\t\t\t\t\t\t\tif (range == null || !_this2.quill.hasFocus()) return;\n\n\t\t\t\t\t\t\tvar _quill$getLine = _this2.quill.getLine(range.index),\n\t\t\t\t\t\t\t    _quill$getLine2 = _slicedToArray(_quill$getLine, 2),\n\t\t\t\t\t\t\t    line = _quill$getLine2[0],\n\t\t\t\t\t\t\t    offset = _quill$getLine2[1];\n\n\t\t\t\t\t\t\tvar _quill$getLeaf = _this2.quill.getLeaf(range.index),\n\t\t\t\t\t\t\t    _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),\n\t\t\t\t\t\t\t    leafStart = _quill$getLeaf2[0],\n\t\t\t\t\t\t\t    offsetStart = _quill$getLeaf2[1];\n\n\t\t\t\t\t\t\tvar _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),\n\t\t\t\t\t\t\t    _ref2 = _slicedToArray(_ref, 2),\n\t\t\t\t\t\t\t    leafEnd = _ref2[0],\n\t\t\t\t\t\t\t    offsetEnd = _ref2[1];\n\n\t\t\t\t\t\t\tvar prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';\n\t\t\t\t\t\t\tvar suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';\n\t\t\t\t\t\t\tvar curContext = {\n\t\t\t\t\t\t\t\tcollapsed: range.length === 0,\n\t\t\t\t\t\t\t\tempty: range.length === 0 && line.length() <= 1,\n\t\t\t\t\t\t\t\tformat: _this2.quill.getFormat(range),\n\t\t\t\t\t\t\t\toffset: offset,\n\t\t\t\t\t\t\t\tprefix: prefixText,\n\t\t\t\t\t\t\t\tsuffix: suffixText\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tvar prevented = bindings.some(function (binding) {\n\t\t\t\t\t\t\t\tif (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;\n\t\t\t\t\t\t\t\tif (binding.empty != null && binding.empty !== curContext.empty) return false;\n\t\t\t\t\t\t\t\tif (binding.offset != null && binding.offset !== curContext.offset) return false;\n\t\t\t\t\t\t\t\tif (Array.isArray(binding.format)) {\n\t\t\t\t\t\t\t\t\t// any format is present\n\t\t\t\t\t\t\t\t\tif (binding.format.every(function (name) {\n\t\t\t\t\t\t\t\t\t\treturn curContext.format[name] == null;\n\t\t\t\t\t\t\t\t\t})) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_typeof(binding.format) === 'object') {\n\t\t\t\t\t\t\t\t\t// all formats must match\n\t\t\t\t\t\t\t\t\tif (!Object.keys(binding.format).every(function (name) {\n\t\t\t\t\t\t\t\t\t\tif (binding.format[name] === true) return curContext.format[name] != null;\n\t\t\t\t\t\t\t\t\t\tif (binding.format[name] === false) return curContext.format[name] == null;\n\t\t\t\t\t\t\t\t\t\treturn (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);\n\t\t\t\t\t\t\t\t\t})) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;\n\t\t\t\t\t\t\t\tif (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;\n\t\t\t\t\t\t\t\treturn binding.handler.call(_this2, range, curContext) !== true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (prevented) {\n\t\t\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Keyboard;\n\t\t\t}(_module2.default);\n\n\t\t\tKeyboard.keys = {\n\t\t\t\tBACKSPACE: 8,\n\t\t\t\tTAB: 9,\n\t\t\t\tENTER: 13,\n\t\t\t\tESCAPE: 27,\n\t\t\t\tLEFT: 37,\n\t\t\t\tUP: 38,\n\t\t\t\tRIGHT: 39,\n\t\t\t\tDOWN: 40,\n\t\t\t\tDELETE: 46\n\t\t\t};\n\n\t\t\tKeyboard.DEFAULTS = {\n\t\t\t\tbindings: {\n\t\t\t\t\t'bold': makeFormatHandler('bold'),\n\t\t\t\t\t'italic': makeFormatHandler('italic'),\n\t\t\t\t\t'underline': makeFormatHandler('underline'),\n\t\t\t\t\t'indent': {\n\t\t\t\t\t\t// highlight tab or tab at beginning of list, indent or blockquote\n\t\t\t\t\t\tkey: Keyboard.keys.TAB,\n\t\t\t\t\t\tformat: ['blockquote', 'indent', 'list'],\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tif (context.collapsed && context.offset !== 0) return true;\n\t\t\t\t\t\t\tthis.quill.format('indent', '+1', _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'outdent': {\n\t\t\t\t\t\tkey: Keyboard.keys.TAB,\n\t\t\t\t\t\tshiftKey: true,\n\t\t\t\t\t\tformat: ['blockquote', 'indent', 'list'],\n\t\t\t\t\t\t// highlight tab or tab at beginning of list, indent or blockquote\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tif (context.collapsed && context.offset !== 0) return true;\n\t\t\t\t\t\t\tthis.quill.format('indent', '-1', _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'outdent backspace': {\n\t\t\t\t\t\tkey: Keyboard.keys.BACKSPACE,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: ['blockquote', 'indent', 'list'],\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tif (context.format.indent != null) {\n\t\t\t\t\t\t\t\tthis.quill.format('indent', '-1', _quill2.default.sources.USER);\n\t\t\t\t\t\t\t} else if (context.format.blockquote != null) {\n\t\t\t\t\t\t\t\tthis.quill.format('blockquote', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t} else if (context.format.list != null) {\n\t\t\t\t\t\t\t\tthis.quill.format('list', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'indent code-block': makeCodeBlockHandler(true),\n\t\t\t\t\t'outdent code-block': makeCodeBlockHandler(false),\n\t\t\t\t\t'remove tab': {\n\t\t\t\t\t\tkey: Keyboard.keys.TAB,\n\t\t\t\t\t\tshiftKey: true,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tprefix: /\\t$/,\n\t\t\t\t\t\thandler: function handler(range) {\n\t\t\t\t\t\t\tthis.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'tab': {\n\t\t\t\t\t\tkey: Keyboard.keys.TAB,\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tif (!context.collapsed) {\n\t\t\t\t\t\t\t\tthis.quill.scroll.deleteAt(range.index, range.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.quill.insertText(range.index, '\\t', _quill2.default.sources.USER);\n\t\t\t\t\t\t\tthis.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'list empty enter': {\n\t\t\t\t\t\tkey: Keyboard.keys.ENTER,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: ['list'],\n\t\t\t\t\t\tempty: true,\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tthis.quill.format('list', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\tif (context.format.indent) {\n\t\t\t\t\t\t\t\tthis.quill.format('indent', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'checklist enter': {\n\t\t\t\t\t\tkey: Keyboard.keys.ENTER,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: { list: 'checked' },\n\t\t\t\t\t\thandler: function handler(range) {\n\t\t\t\t\t\t\tthis.quill.scroll.insertAt(range.index, '\\n');\n\n\t\t\t\t\t\t\tvar _quill$getLine3 = this.quill.getLine(range.index + 1),\n\t\t\t\t\t\t\t    _quill$getLine4 = _slicedToArray(_quill$getLine3, 1),\n\t\t\t\t\t\t\t    line = _quill$getLine4[0];\n\n\t\t\t\t\t\t\tline.format('list', 'unchecked');\n\t\t\t\t\t\t\tthis.quill.update(_quill2.default.sources.USER);\n\t\t\t\t\t\t\tthis.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'header enter': {\n\t\t\t\t\t\tkey: Keyboard.keys.ENTER,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: ['header'],\n\t\t\t\t\t\tsuffix: /^$/,\n\t\t\t\t\t\thandler: function handler(range) {\n\t\t\t\t\t\t\tthis.quill.scroll.insertAt(range.index, '\\n');\n\t\t\t\t\t\t\tthis.quill.formatText(range.index + 1, 1, 'header', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\tthis.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'list autofill': {\n\t\t\t\t\t\tkey: ' ',\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: { list: false },\n\t\t\t\t\t\tprefix: /^(1\\.|-)$/,\n\t\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\t\tif (this.quill.scroll.whitelist != null && !this.quill.scroll.whitelist['list']) return true;\n\t\t\t\t\t\t\tvar length = context.prefix.length;\n\t\t\t\t\t\t\tthis.quill.scroll.deleteAt(range.index - length, length);\n\t\t\t\t\t\t\tthis.quill.formatLine(range.index - length, 1, 'list', length === 1 ? 'bullet' : 'ordered', _quill2.default.sources.USER);\n\t\t\t\t\t\t\tthis.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'code exit': {\n\t\t\t\t\t\tkey: Keyboard.keys.ENTER,\n\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\tformat: ['code-block'],\n\t\t\t\t\t\tprefix: /\\n\\n$/,\n\t\t\t\t\t\tsuffix: /^\\s+$/,\n\t\t\t\t\t\thandler: function handler(range) {\n\t\t\t\t\t\t\tthis.quill.format('code-block', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\tthis.quill.deleteText(range.index - 2, 1, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction handleBackspace(range, context) {\n\t\t\t\tif (range.index === 0) return;\n\n\t\t\t\tvar _quill$getLine5 = this.quill.getLine(range.index),\n\t\t\t\t    _quill$getLine6 = _slicedToArray(_quill$getLine5, 1),\n\t\t\t\t    line = _quill$getLine6[0];\n\n\t\t\t\tvar formats = {};\n\t\t\t\tif (context.offset === 0) {\n\t\t\t\t\tvar curFormats = line.formats();\n\t\t\t\t\tvar prevFormats = this.quill.getFormat(range.index - 1, 1);\n\t\t\t\t\tformats = _op2.default.attributes.diff(curFormats, prevFormats) || {};\n\t\t\t\t}\n\t\t\t\t// Check for astral symbols\n\t\t\t\tvar length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix) ? 2 : 1;\n\t\t\t\tthis.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);\n\t\t\t\tif (Object.keys(formats).length > 0) {\n\t\t\t\t\tthis.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);\n\t\t\t\t}\n\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t}\n\n\t\t\tfunction handleDelete(range, context) {\n\t\t\t\t// Check for astral symbols\n\t\t\t\tvar length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix) ? 2 : 1;\n\t\t\t\tif (range.index >= this.quill.getLength() - length) return;\n\t\t\t\tthis.quill.deleteText(range.index, length, _quill2.default.sources.USER);\n\t\t\t}\n\n\t\t\tfunction handleDeleteRange(range) {\n\t\t\t\tthis.quill.deleteText(range, _quill2.default.sources.USER);\n\t\t\t\tthis.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t}\n\n\t\t\tfunction handleEnter(range, context) {\n\t\t\t\tvar _this3 = this;\n\n\t\t\t\tif (range.length > 0) {\n\t\t\t\t\tthis.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change\n\t\t\t\t}\n\t\t\t\tvar lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {\n\t\t\t\t\tif (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n\t\t\t\t\t\tlineFormats[format] = context.format[format];\n\t\t\t\t\t}\n\t\t\t\t\treturn lineFormats;\n\t\t\t\t}, {});\n\t\t\t\tthis.quill.insertText(range.index, '\\n', lineFormats, _quill2.default.sources.USER);\n\t\t\t\t// Earlier scroll.deleteAt might have messed up our selection,\n\t\t\t\t// so insertText's built in selection preservation is not reliable\n\t\t\t\tthis.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t\t\t\tthis.quill.selection.scrollIntoView();\n\t\t\t\tObject.keys(context.format).forEach(function (name) {\n\t\t\t\t\tif (lineFormats[name] != null) return;\n\t\t\t\t\tif (Array.isArray(context.format[name])) return;\n\t\t\t\t\tif (name === 'link') return;\n\t\t\t\t\t_this3.quill.format(name, context.format[name], _quill2.default.sources.USER);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction makeCodeBlockHandler(indent) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: Keyboard.keys.TAB,\n\t\t\t\t\tshiftKey: !indent,\n\t\t\t\t\tformat: { 'code-block': true },\n\t\t\t\t\thandler: function handler(range) {\n\t\t\t\t\t\tvar CodeBlock = _parchment2.default.query('code-block');\n\t\t\t\t\t\tvar index = range.index,\n\t\t\t\t\t\t    length = range.length;\n\n\t\t\t\t\t\tvar _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),\n\t\t\t\t\t\t    _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n\t\t\t\t\t\t    block = _quill$scroll$descend2[0],\n\t\t\t\t\t\t    offset = _quill$scroll$descend2[1];\n\n\t\t\t\t\t\tif (block == null) return;\n\t\t\t\t\t\tvar scrollIndex = this.quill.getIndex(block);\n\t\t\t\t\t\tvar start = block.newlineIndex(offset, true) + 1;\n\t\t\t\t\t\tvar end = block.newlineIndex(scrollIndex + offset + length);\n\t\t\t\t\t\tvar lines = block.domNode.textContent.slice(start, end).split('\\n');\n\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\tlines.forEach(function (line, i) {\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tblock.insertAt(start + offset, CodeBlock.TAB);\n\t\t\t\t\t\t\t\toffset += CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\tindex += CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlength += CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (line.startsWith(CodeBlock.TAB)) {\n\t\t\t\t\t\t\t\tblock.deleteAt(start + offset, CodeBlock.TAB.length);\n\t\t\t\t\t\t\t\toffset -= CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\tindex -= CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlength -= CodeBlock.TAB.length;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toffset += line.length + 1;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.quill.update(_quill2.default.sources.USER);\n\t\t\t\t\t\tthis.quill.setSelection(index, length, _quill2.default.sources.SILENT);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tfunction makeFormatHandler(format) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: format[0].toUpperCase(),\n\t\t\t\t\tshortKey: true,\n\t\t\t\t\thandler: function handler(range, context) {\n\t\t\t\t\t\tthis.quill.format(format, !context.format[format], _quill2.default.sources.USER);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tfunction normalize(binding) {\n\t\t\t\tif (typeof binding === 'string' || typeof binding === 'number') {\n\t\t\t\t\treturn normalize({ key: binding });\n\t\t\t\t}\n\t\t\t\tif ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {\n\t\t\t\t\tbinding = (0, _clone2.default)(binding, false);\n\t\t\t\t}\n\t\t\t\tif (typeof binding.key === 'string') {\n\t\t\t\t\tif (Keyboard.keys[binding.key.toUpperCase()] != null) {\n\t\t\t\t\t\tbinding.key = Keyboard.keys[binding.key.toUpperCase()];\n\t\t\t\t\t} else if (binding.key.length === 1) {\n\t\t\t\t\t\tbinding.key = binding.key.toUpperCase().charCodeAt(0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn binding;\n\t\t\t}\n\n\t\t\texports.default = Keyboard;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 53 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tvar _core = __webpack_require__(1);\n\n\t\t\tvar _core2 = _interopRequireDefault(_core);\n\n\t\t\tvar _align = __webpack_require__(45);\n\n\t\t\tvar _direction = __webpack_require__(48);\n\n\t\t\tvar _indent = __webpack_require__(54);\n\n\t\t\tvar _blockquote = __webpack_require__(55);\n\n\t\t\tvar _blockquote2 = _interopRequireDefault(_blockquote);\n\n\t\t\tvar _header = __webpack_require__(56);\n\n\t\t\tvar _header2 = _interopRequireDefault(_header);\n\n\t\t\tvar _list = __webpack_require__(57);\n\n\t\t\tvar _list2 = _interopRequireDefault(_list);\n\n\t\t\tvar _background = __webpack_require__(46);\n\n\t\t\tvar _color = __webpack_require__(47);\n\n\t\t\tvar _font = __webpack_require__(49);\n\n\t\t\tvar _size = __webpack_require__(50);\n\n\t\t\tvar _bold = __webpack_require__(58);\n\n\t\t\tvar _bold2 = _interopRequireDefault(_bold);\n\n\t\t\tvar _italic = __webpack_require__(59);\n\n\t\t\tvar _italic2 = _interopRequireDefault(_italic);\n\n\t\t\tvar _link = __webpack_require__(60);\n\n\t\t\tvar _link2 = _interopRequireDefault(_link);\n\n\t\t\tvar _script = __webpack_require__(61);\n\n\t\t\tvar _script2 = _interopRequireDefault(_script);\n\n\t\t\tvar _strike = __webpack_require__(62);\n\n\t\t\tvar _strike2 = _interopRequireDefault(_strike);\n\n\t\t\tvar _underline = __webpack_require__(63);\n\n\t\t\tvar _underline2 = _interopRequireDefault(_underline);\n\n\t\t\tvar _image = __webpack_require__(64);\n\n\t\t\tvar _image2 = _interopRequireDefault(_image);\n\n\t\t\tvar _video = __webpack_require__(65);\n\n\t\t\tvar _video2 = _interopRequireDefault(_video);\n\n\t\t\tvar _code = __webpack_require__(28);\n\n\t\t\tvar _code2 = _interopRequireDefault(_code);\n\n\t\t\tvar _formula = __webpack_require__(66);\n\n\t\t\tvar _formula2 = _interopRequireDefault(_formula);\n\n\t\t\tvar _syntax = __webpack_require__(67);\n\n\t\t\tvar _syntax2 = _interopRequireDefault(_syntax);\n\n\t\t\tvar _toolbar = __webpack_require__(68);\n\n\t\t\tvar _toolbar2 = _interopRequireDefault(_toolbar);\n\n\t\t\tvar _icons = __webpack_require__(69);\n\n\t\t\tvar _icons2 = _interopRequireDefault(_icons);\n\n\t\t\tvar _picker = __webpack_require__(102);\n\n\t\t\tvar _picker2 = _interopRequireDefault(_picker);\n\n\t\t\tvar _colorPicker = __webpack_require__(104);\n\n\t\t\tvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\n\t\t\tvar _iconPicker = __webpack_require__(105);\n\n\t\t\tvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\n\t\t\tvar _tooltip = __webpack_require__(106);\n\n\t\t\tvar _tooltip2 = _interopRequireDefault(_tooltip);\n\n\t\t\tvar _bubble = __webpack_require__(107);\n\n\t\t\tvar _bubble2 = _interopRequireDefault(_bubble);\n\n\t\t\tvar _snow = __webpack_require__(109);\n\n\t\t\tvar _snow2 = _interopRequireDefault(_snow);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\t_core2.default.register({\n\t\t\t\t'attributors/attribute/direction': _direction.DirectionAttribute,\n\n\t\t\t\t'attributors/class/align': _align.AlignClass,\n\t\t\t\t'attributors/class/background': _background.BackgroundClass,\n\t\t\t\t'attributors/class/color': _color.ColorClass,\n\t\t\t\t'attributors/class/direction': _direction.DirectionClass,\n\t\t\t\t'attributors/class/font': _font.FontClass,\n\t\t\t\t'attributors/class/size': _size.SizeClass,\n\n\t\t\t\t'attributors/style/align': _align.AlignStyle,\n\t\t\t\t'attributors/style/background': _background.BackgroundStyle,\n\t\t\t\t'attributors/style/color': _color.ColorStyle,\n\t\t\t\t'attributors/style/direction': _direction.DirectionStyle,\n\t\t\t\t'attributors/style/font': _font.FontStyle,\n\t\t\t\t'attributors/style/size': _size.SizeStyle\n\t\t\t}, true);\n\n\t\t\t_core2.default.register({\n\t\t\t\t'formats/align': _align.AlignClass,\n\t\t\t\t'formats/direction': _direction.DirectionClass,\n\t\t\t\t'formats/indent': _indent.IndentClass,\n\n\t\t\t\t'formats/background': _background.BackgroundStyle,\n\t\t\t\t'formats/color': _color.ColorStyle,\n\t\t\t\t'formats/font': _font.FontClass,\n\t\t\t\t'formats/size': _size.SizeClass,\n\n\t\t\t\t'formats/blockquote': _blockquote2.default,\n\t\t\t\t'formats/code-block': _code2.default,\n\t\t\t\t'formats/header': _header2.default,\n\t\t\t\t'formats/list': _list2.default,\n\n\t\t\t\t'formats/bold': _bold2.default,\n\t\t\t\t'formats/code': _code.Code,\n\t\t\t\t'formats/italic': _italic2.default,\n\t\t\t\t'formats/link': _link2.default,\n\t\t\t\t'formats/script': _script2.default,\n\t\t\t\t'formats/strike': _strike2.default,\n\t\t\t\t'formats/underline': _underline2.default,\n\n\t\t\t\t'formats/image': _image2.default,\n\t\t\t\t'formats/video': _video2.default,\n\n\t\t\t\t'formats/list/item': _list.ListItem,\n\n\t\t\t\t'modules/formula': _formula2.default,\n\t\t\t\t'modules/syntax': _syntax2.default,\n\t\t\t\t'modules/toolbar': _toolbar2.default,\n\n\t\t\t\t'themes/bubble': _bubble2.default,\n\t\t\t\t'themes/snow': _snow2.default,\n\n\t\t\t\t'ui/icons': _icons2.default,\n\t\t\t\t'ui/picker': _picker2.default,\n\t\t\t\t'ui/icon-picker': _iconPicker2.default,\n\t\t\t\t'ui/color-picker': _colorPicker2.default,\n\t\t\t\t'ui/tooltip': _tooltip2.default\n\t\t\t}, true);\n\n\t\t\tmodule.exports = _core2.default;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 54 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.IndentClass = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar IdentAttributor = function (_Parchment$Attributor) {\n\t\t\t\t_inherits(IdentAttributor, _Parchment$Attributor);\n\n\t\t\t\tfunction IdentAttributor() {\n\t\t\t\t\t_classCallCheck(this, IdentAttributor);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(IdentAttributor, [{\n\t\t\t\t\tkey: 'add',\n\t\t\t\t\tvalue: function add(node, value) {\n\t\t\t\t\t\tif (value === '+1' || value === '-1') {\n\t\t\t\t\t\t\tvar indent = this.value(node) || 0;\n\t\t\t\t\t\t\tvalue = value === '+1' ? indent + 1 : indent - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value === 0) {\n\t\t\t\t\t\t\tthis.remove(node);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'canAdd',\n\t\t\t\t\tvalue: function canAdd(node, value) {\n\t\t\t\t\t\treturn _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(node) {\n\t\t\t\t\t\treturn parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn IdentAttributor;\n\t\t\t}(_parchment2.default.Attributor.Class);\n\n\t\t\tvar IndentClass = new IdentAttributor('indent', 'ql-indent', {\n\t\t\t\tscope: _parchment2.default.Scope.BLOCK,\n\t\t\t\twhitelist: [1, 2, 3, 4, 5, 6, 7, 8]\n\t\t\t});\n\n\t\t\texports.IndentClass = IndentClass;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 55 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Blockquote = function (_Block) {\n\t\t\t\t_inherits(Blockquote, _Block);\n\n\t\t\t\tfunction Blockquote() {\n\t\t\t\t\t_classCallCheck(this, Blockquote);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Blockquote;\n\t\t\t}(_block2.default);\n\n\t\t\tBlockquote.blotName = 'blockquote';\n\t\t\tBlockquote.tagName = 'blockquote';\n\n\t\t\texports.default = Blockquote;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 56 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Header = function (_Block) {\n\t\t\t\t_inherits(Header, _Block);\n\n\t\t\t\tfunction Header() {\n\t\t\t\t\t_classCallCheck(this, Header);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Header, null, [{\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\treturn this.tagName.indexOf(domNode.tagName) + 1;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Header;\n\t\t\t}(_block2.default);\n\n\t\t\tHeader.blotName = 'header';\n\t\t\tHeader.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n\n\t\t\texports.default = Header;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 57 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.ListItem = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _block2 = _interopRequireDefault(_block);\n\n\t\t\tvar _container = __webpack_require__(42);\n\n\t\t\tvar _container2 = _interopRequireDefault(_container);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _defineProperty(obj, key, value) {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\tObject.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = value;\n\t\t\t\t}return obj;\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ListItem = function (_Block) {\n\t\t\t\t_inherits(ListItem, _Block);\n\n\t\t\t\tfunction ListItem() {\n\t\t\t\t\t_classCallCheck(this, ListItem);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(ListItem, [{\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (name === List.blotName && !value) {\n\t\t\t\t\t\t\tthis.replaceWith(_parchment2.default.create(this.statics.scope));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'remove',\n\t\t\t\t\tvalue: function remove() {\n\t\t\t\t\t\tif (this.prev == null && this.next == null) {\n\t\t\t\t\t\t\tthis.parent.remove();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'replaceWith',\n\t\t\t\t\tvalue: function replaceWith(name, value) {\n\t\t\t\t\t\tthis.parent.isolate(this.offset(this.parent), this.length());\n\t\t\t\t\t\tif (name === this.parent.statics.blotName) {\n\t\t\t\t\t\t\tthis.parent.replaceWith(name, value);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.parent.unwrap();\n\t\t\t\t\t\t\treturn _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\treturn domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn ListItem;\n\t\t\t}(_block2.default);\n\n\t\t\tListItem.blotName = 'list-item';\n\t\t\tListItem.tagName = 'LI';\n\n\t\t\tvar List = function (_Container) {\n\t\t\t\t_inherits(List, _Container);\n\n\t\t\t\t_createClass(List, null, [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar tagName = value === 'ordered' ? 'OL' : 'UL';\n\t\t\t\t\t\tvar node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);\n\t\t\t\t\t\tif (value === 'checked' || value === 'unchecked') {\n\t\t\t\t\t\t\tnode.setAttribute('data-checked', value === 'checked');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\tif (domNode.tagName === 'OL') return 'ordered';\n\t\t\t\t\t\tif (domNode.tagName === 'UL') {\n\t\t\t\t\t\t\tif (domNode.hasAttribute('data-checked')) {\n\t\t\t\t\t\t\t\treturn domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn 'bullet';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\tfunction List(domNode) {\n\t\t\t\t\t_classCallCheck(this, List);\n\n\t\t\t\t\tvar _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));\n\n\t\t\t\t\tdomNode.addEventListener('click', function (e) {\n\t\t\t\t\t\tif (e.target.parentNode !== domNode) return;\n\t\t\t\t\t\tvar format = _this2.statics.formats(domNode);\n\t\t\t\t\t\tvar blot = _parchment2.default.find(e.target);\n\t\t\t\t\t\tif (format === 'checked') {\n\t\t\t\t\t\t\tblot.format('list', 'unchecked');\n\t\t\t\t\t\t} else if (format === 'unchecked') {\n\t\t\t\t\t\t\tblot.format('list', 'checked');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn _this2;\n\t\t\t\t}\n\n\t\t\t\t_createClass(List, [{\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (this.children.length > 0) {\n\t\t\t\t\t\t\tthis.children.tail.format(name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats() {\n\t\t\t\t\t\t// We don't inherit from FormatBlot\n\t\t\t\t\t\treturn _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertBefore',\n\t\t\t\t\tvalue: function insertBefore(blot, ref) {\n\t\t\t\t\t\tif (blot instanceof ListItem) {\n\t\t\t\t\t\t\t_get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar index = ref == null ? this.length() : ref.offset(this);\n\t\t\t\t\t\t\tvar after = this.split(index);\n\t\t\t\t\t\t\tafter.parent.insertBefore(blot, after);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\t_get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this);\n\t\t\t\t\t\tvar next = this.next;\n\t\t\t\t\t\tif (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {\n\t\t\t\t\t\t\tnext.moveChildren(this);\n\t\t\t\t\t\t\tnext.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'replace',\n\t\t\t\t\tvalue: function replace(target) {\n\t\t\t\t\t\tif (target.statics.blotName !== this.statics.blotName) {\n\t\t\t\t\t\t\tvar item = _parchment2.default.create(this.statics.defaultChild);\n\t\t\t\t\t\t\ttarget.moveChildren(item);\n\t\t\t\t\t\t\tthis.appendChild(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn List;\n\t\t\t}(_container2.default);\n\n\t\t\tList.blotName = 'list';\n\t\t\tList.scope = _parchment2.default.Scope.BLOCK_BLOT;\n\t\t\tList.tagName = ['OL', 'UL'];\n\t\t\tList.defaultChild = 'list-item';\n\t\t\tList.allowedChildren = [ListItem];\n\n\t\t\texports.ListItem = ListItem;\n\t\t\texports.default = List;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 58 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Bold = function (_Inline) {\n\t\t\t\t_inherits(Bold, _Inline);\n\n\t\t\t\tfunction Bold() {\n\t\t\t\t\t_classCallCheck(this, Bold);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Bold, [{\n\t\t\t\t\tkey: 'optimize',\n\t\t\t\t\tvalue: function optimize() {\n\t\t\t\t\t\t_get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this);\n\t\t\t\t\t\tif (this.domNode.tagName !== this.statics.tagName[0]) {\n\t\t\t\t\t\t\tthis.replaceWith(this.statics.blotName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create() {\n\t\t\t\t\t\treturn _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Bold;\n\t\t\t}(_inline2.default);\n\n\t\t\tBold.blotName = 'bold';\n\t\t\tBold.tagName = ['STRONG', 'B'];\n\n\t\t\texports.default = Bold;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 59 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _bold = __webpack_require__(58);\n\n\t\t\tvar _bold2 = _interopRequireDefault(_bold);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Italic = function (_Bold) {\n\t\t\t\t_inherits(Italic, _Bold);\n\n\t\t\t\tfunction Italic() {\n\t\t\t\t\t_classCallCheck(this, Italic);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Italic;\n\t\t\t}(_bold2.default);\n\n\t\t\tItalic.blotName = 'italic';\n\t\t\tItalic.tagName = ['EM', 'I'];\n\n\t\t\texports.default = Italic;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 60 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.sanitize = exports.default = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Link = function (_Inline) {\n\t\t\t\t_inherits(Link, _Inline);\n\n\t\t\t\tfunction Link() {\n\t\t\t\t\t_classCallCheck(this, Link);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Link, [{\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t\tvalue = this.constructor.sanitize(value);\n\t\t\t\t\t\tthis.domNode.setAttribute('href', value);\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);\n\t\t\t\t\t\tvalue = this.sanitize(value);\n\t\t\t\t\t\tnode.setAttribute('href', value);\n\t\t\t\t\t\tnode.setAttribute('target', '_blank');\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\treturn domNode.getAttribute('href');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'sanitize',\n\t\t\t\t\tvalue: function sanitize(url) {\n\t\t\t\t\t\treturn _sanitize(url, ['http', 'https', 'mailto']) ? url : this.SANITIZED_URL;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Link;\n\t\t\t}(_inline2.default);\n\n\t\t\tLink.blotName = 'link';\n\t\t\tLink.tagName = 'A';\n\t\t\tLink.SANITIZED_URL = 'about:blank';\n\n\t\t\tfunction _sanitize(url, protocols) {\n\t\t\t\tvar anchor = document.createElement('a');\n\t\t\t\tanchor.href = url;\n\t\t\t\tvar protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n\t\t\t\treturn protocols.indexOf(protocol) > -1;\n\t\t\t}\n\n\t\t\texports.default = Link;\n\t\t\texports.sanitize = _sanitize;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 61 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Script = function (_Inline) {\n\t\t\t\t_inherits(Script, _Inline);\n\n\t\t\t\tfunction Script() {\n\t\t\t\t\t_classCallCheck(this, Script);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Script, null, [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tif (value === 'super') {\n\t\t\t\t\t\t\treturn document.createElement('sup');\n\t\t\t\t\t\t} else if (value === 'sub') {\n\t\t\t\t\t\t\treturn document.createElement('sub');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\tif (domNode.tagName === 'SUB') return 'sub';\n\t\t\t\t\t\tif (domNode.tagName === 'SUP') return 'super';\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Script;\n\t\t\t}(_inline2.default);\n\n\t\t\tScript.blotName = 'script';\n\t\t\tScript.tagName = ['SUB', 'SUP'];\n\n\t\t\texports.default = Script;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 62 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Strike = function (_Inline) {\n\t\t\t\t_inherits(Strike, _Inline);\n\n\t\t\t\tfunction Strike() {\n\t\t\t\t\t_classCallCheck(this, Strike);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Strike;\n\t\t\t}(_inline2.default);\n\n\t\t\tStrike.blotName = 'strike';\n\t\t\tStrike.tagName = 'S';\n\n\t\t\texports.default = Strike;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 63 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _inline = __webpack_require__(32);\n\n\t\t\tvar _inline2 = _interopRequireDefault(_inline);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar Underline = function (_Inline) {\n\t\t\t\t_inherits(Underline, _Inline);\n\n\t\t\t\tfunction Underline() {\n\t\t\t\t\t_classCallCheck(this, Underline);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\treturn Underline;\n\t\t\t}(_inline2.default);\n\n\t\t\tUnderline.blotName = 'underline';\n\t\t\tUnderline.tagName = 'U';\n\n\t\t\texports.default = Underline;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 64 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _link = __webpack_require__(60);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ATTRIBUTES = ['alt', 'height', 'width'];\n\n\t\t\tvar Image = function (_Embed) {\n\t\t\t\t_inherits(Image, _Embed);\n\n\t\t\t\tfunction Image() {\n\t\t\t\t\t_classCallCheck(this, Image);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Image, [{\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (ATTRIBUTES.indexOf(name) > -1) {\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\tthis.domNode.setAttribute(name, value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.domNode.removeAttribute(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);\n\t\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\t\tnode.setAttribute('src', this.sanitize(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\treturn ATTRIBUTES.reduce(function (formats, attribute) {\n\t\t\t\t\t\t\tif (domNode.hasAttribute(attribute)) {\n\t\t\t\t\t\t\t\tformats[attribute] = domNode.getAttribute(attribute);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn formats;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'match',\n\t\t\t\t\tvalue: function match(url) {\n\t\t\t\t\t\treturn (/\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'sanitize',\n\t\t\t\t\tvalue: function sanitize(url) {\n\t\t\t\t\t\treturn (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(domNode) {\n\t\t\t\t\t\treturn domNode.getAttribute('src');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Image;\n\t\t\t}(_embed2.default);\n\n\t\t\tImage.blotName = 'image';\n\t\t\tImage.tagName = 'IMG';\n\n\t\t\texports.default = Image;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 65 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _block = __webpack_require__(29);\n\n\t\t\tvar _link = __webpack_require__(60);\n\n\t\t\tvar _link2 = _interopRequireDefault(_link);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ATTRIBUTES = ['height', 'width'];\n\n\t\t\tvar Video = function (_BlockEmbed) {\n\t\t\t\t_inherits(Video, _BlockEmbed);\n\n\t\t\t\tfunction Video() {\n\t\t\t\t\t_classCallCheck(this, Video);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Video, [{\n\t\t\t\t\tkey: 'format',\n\t\t\t\t\tvalue: function format(name, value) {\n\t\t\t\t\t\tif (ATTRIBUTES.indexOf(name) > -1) {\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\tthis.domNode.setAttribute(name, value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.domNode.removeAttribute(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);\n\t\t\t\t\t\tnode.setAttribute('frameborder', '0');\n\t\t\t\t\t\tnode.setAttribute('allowfullscreen', true);\n\t\t\t\t\t\tnode.setAttribute('src', this.sanitize(value));\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'formats',\n\t\t\t\t\tvalue: function formats(domNode) {\n\t\t\t\t\t\treturn ATTRIBUTES.reduce(function (formats, attribute) {\n\t\t\t\t\t\t\tif (domNode.hasAttribute(attribute)) {\n\t\t\t\t\t\t\t\tformats[attribute] = domNode.getAttribute(attribute);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn formats;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'sanitize',\n\t\t\t\t\tvalue: function sanitize(url) {\n\t\t\t\t\t\treturn _link2.default.sanitize(url);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(domNode) {\n\t\t\t\t\t\treturn domNode.getAttribute('src');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Video;\n\t\t\t}(_block.BlockEmbed);\n\n\t\t\tVideo.blotName = 'video';\n\t\t\tVideo.className = 'ql-video';\n\t\t\tVideo.tagName = 'IFRAME';\n\n\t\t\texports.default = Video;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 66 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.FormulaBlot = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _embed = __webpack_require__(31);\n\n\t\t\tvar _embed2 = _interopRequireDefault(_embed);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar FormulaBlot = function (_Embed) {\n\t\t\t\t_inherits(FormulaBlot, _Embed);\n\n\t\t\t\tfunction FormulaBlot() {\n\t\t\t\t\t_classCallCheck(this, FormulaBlot);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(FormulaBlot, [{\n\t\t\t\t\tkey: 'index',\n\t\t\t\t\tvalue: function index() {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}], [{\n\t\t\t\t\tkey: 'create',\n\t\t\t\t\tvalue: function create(value) {\n\t\t\t\t\t\tvar node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);\n\t\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\t\twindow.katex.render(value, node);\n\t\t\t\t\t\t\tnode.setAttribute('data-value', value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnode.setAttribute('contenteditable', false);\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'value',\n\t\t\t\t\tvalue: function value(domNode) {\n\t\t\t\t\t\treturn domNode.getAttribute('data-value');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn FormulaBlot;\n\t\t\t}(_embed2.default);\n\n\t\t\tFormulaBlot.blotName = 'formula';\n\t\t\tFormulaBlot.className = 'ql-formula';\n\t\t\tFormulaBlot.tagName = 'SPAN';\n\n\t\t\tfunction Formula() {\n\t\t\t\tif (window.katex == null) {\n\t\t\t\t\tthrow new Error('Formula module requires KaTeX.');\n\t\t\t\t}\n\t\t\t\t_quill2.default.register(FormulaBlot, true);\n\t\t\t}\n\n\t\t\texports.FormulaBlot = FormulaBlot;\n\t\t\texports.default = Formula;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 67 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.CodeToken = exports.CodeBlock = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tvar _code = __webpack_require__(28);\n\n\t\t\tvar _code2 = _interopRequireDefault(_code);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar SyntaxCodeBlock = function (_CodeBlock) {\n\t\t\t\t_inherits(SyntaxCodeBlock, _CodeBlock);\n\n\t\t\t\tfunction SyntaxCodeBlock() {\n\t\t\t\t\t_classCallCheck(this, SyntaxCodeBlock);\n\n\t\t\t\t\treturn _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));\n\t\t\t\t}\n\n\t\t\t\t_createClass(SyntaxCodeBlock, [{\n\t\t\t\t\tkey: 'replaceWith',\n\t\t\t\t\tvalue: function replaceWith(block) {\n\t\t\t\t\t\tthis.domNode.textContent = this.domNode.textContent;\n\t\t\t\t\t\tthis.attach();\n\t\t\t\t\t\t_get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'highlight',\n\t\t\t\t\tvalue: function highlight(_highlight) {\n\t\t\t\t\t\tif (this.cachedHTML !== this.domNode.innerHTML) {\n\t\t\t\t\t\t\tvar text = this.domNode.textContent;\n\t\t\t\t\t\t\tif (text.trim().length > 0 || this.cachedHTML == null) {\n\t\t\t\t\t\t\t\tthis.domNode.innerHTML = _highlight(text);\n\t\t\t\t\t\t\t\tthis.attach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.cachedHTML = this.domNode.innerHTML;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn SyntaxCodeBlock;\n\t\t\t}(_code2.default);\n\n\t\t\tSyntaxCodeBlock.className = 'ql-syntax';\n\n\t\t\tvar CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {\n\t\t\t\tscope: _parchment2.default.Scope.INLINE\n\t\t\t});\n\n\t\t\tvar Syntax = function (_Module) {\n\t\t\t\t_inherits(Syntax, _Module);\n\n\t\t\t\tfunction Syntax(quill, options) {\n\t\t\t\t\t_classCallCheck(this, Syntax);\n\n\t\t\t\t\tvar _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));\n\n\t\t\t\t\tif (typeof _this2.options.highlight !== 'function') {\n\t\t\t\t\t\tthrow new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n\t\t\t\t\t}\n\t\t\t\t\t_quill2.default.register(CodeToken, true);\n\t\t\t\t\t_quill2.default.register(SyntaxCodeBlock, true);\n\t\t\t\t\tvar timer = null;\n\t\t\t\t\t_this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n\t\t\t\t\t\tif (timer != null) return;\n\t\t\t\t\t\ttimer = setTimeout(function () {\n\t\t\t\t\t\t\t_this2.highlight();\n\t\t\t\t\t\t\ttimer = null;\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\t\t\t\t\t_this2.highlight();\n\t\t\t\t\treturn _this2;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Syntax, [{\n\t\t\t\t\tkey: 'highlight',\n\t\t\t\t\tvalue: function highlight() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tif (this.quill.selection.composing) return;\n\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\tthis.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {\n\t\t\t\t\t\t\tcode.highlight(_this3.options.highlight);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.quill.update(_quill2.default.sources.SILENT);\n\t\t\t\t\t\tif (range != null) {\n\t\t\t\t\t\t\tthis.quill.setSelection(range, _quill2.default.sources.SILENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Syntax;\n\t\t\t}(_module2.default);\n\n\t\t\tSyntax.DEFAULTS = {\n\t\t\t\thighlight: function () {\n\t\t\t\t\tif (window.hljs == null) return null;\n\t\t\t\t\treturn function (text) {\n\t\t\t\t\t\tvar result = window.hljs.highlightAuto(text);\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t};\n\t\t\t\t}()\n\t\t\t};\n\n\t\t\texports.CodeBlock = SyntaxCodeBlock;\n\t\t\texports.CodeToken = CodeToken;\n\t\t\texports.default = Syntax;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 68 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.addControls = exports.default = undefined;\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _parchment = __webpack_require__(2);\n\n\t\t\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\t\t\tvar _quill = __webpack_require__(18);\n\n\t\t\tvar _quill2 = _interopRequireDefault(_quill);\n\n\t\t\tvar _logger = __webpack_require__(37);\n\n\t\t\tvar _logger2 = _interopRequireDefault(_logger);\n\n\t\t\tvar _module = __webpack_require__(39);\n\n\t\t\tvar _module2 = _interopRequireDefault(_module);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _defineProperty(obj, key, value) {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\tObject.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = value;\n\t\t\t\t}return obj;\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar debug = (0, _logger2.default)('quill:toolbar');\n\n\t\t\tvar Toolbar = function (_Module) {\n\t\t\t\t_inherits(Toolbar, _Module);\n\n\t\t\t\tfunction Toolbar(quill, options) {\n\t\t\t\t\t_classCallCheck(this, Toolbar);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));\n\n\t\t\t\t\tif (Array.isArray(_this.options.container)) {\n\t\t\t\t\t\tvar container = document.createElement('div');\n\t\t\t\t\t\taddControls(container, _this.options.container);\n\t\t\t\t\t\tquill.container.parentNode.insertBefore(container, quill.container);\n\t\t\t\t\t\t_this.container = container;\n\t\t\t\t\t} else if (typeof _this.options.container === 'string') {\n\t\t\t\t\t\t_this.container = document.querySelector(_this.options.container);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.container = _this.options.container;\n\t\t\t\t\t}\n\t\t\t\t\tif (!(_this.container instanceof HTMLElement)) {\n\t\t\t\t\t\tvar _ret;\n\n\t\t\t\t\t\treturn _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);\n\t\t\t\t\t}\n\t\t\t\t\t_this.container.classList.add('ql-toolbar');\n\t\t\t\t\t_this.controls = [];\n\t\t\t\t\t_this.handlers = {};\n\t\t\t\t\tObject.keys(_this.options.handlers).forEach(function (format) {\n\t\t\t\t\t\t_this.addHandler(format, _this.options.handlers[format]);\n\t\t\t\t\t});\n\t\t\t\t\t[].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {\n\t\t\t\t\t\t_this.attach(input);\n\t\t\t\t\t});\n\t\t\t\t\t_this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {\n\t\t\t\t\t\tif (type === _quill2.default.events.SELECTION_CHANGE) {\n\t\t\t\t\t\t\t_this.update(range);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t_this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n\t\t\t\t\t\tvar _this$quill$selection = _this.quill.selection.getRange(),\n\t\t\t\t\t\t    _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),\n\t\t\t\t\t\t    range = _this$quill$selection2[0]; // quill.getSelection triggers update\n\n\n\t\t\t\t\t\t_this.update(range);\n\t\t\t\t\t});\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(Toolbar, [{\n\t\t\t\t\tkey: 'addHandler',\n\t\t\t\t\tvalue: function addHandler(format, handler) {\n\t\t\t\t\t\tthis.handlers[format] = handler;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'attach',\n\t\t\t\t\tvalue: function attach(input) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tvar format = [].find.call(input.classList, function (className) {\n\t\t\t\t\t\t\treturn className.indexOf('ql-') === 0;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (!format) return;\n\t\t\t\t\t\tformat = format.slice('ql-'.length);\n\t\t\t\t\t\tif (input.tagName === 'BUTTON') {\n\t\t\t\t\t\t\tinput.setAttribute('type', 'button');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.handlers[format] == null) {\n\t\t\t\t\t\t\tif (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {\n\t\t\t\t\t\t\t\tdebug.warn('ignoring attaching to disabled format', format, input);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (_parchment2.default.query(format) == null) {\n\t\t\t\t\t\t\t\tdebug.warn('ignoring attaching to nonexistent format', format, input);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar eventName = input.tagName === 'SELECT' ? 'change' : 'click';\n\t\t\t\t\t\tinput.addEventListener(eventName, function (e) {\n\t\t\t\t\t\t\tvar value = void 0;\n\t\t\t\t\t\t\tif (input.tagName === 'SELECT') {\n\t\t\t\t\t\t\t\tif (input.selectedIndex < 0) return;\n\t\t\t\t\t\t\t\tvar selected = input.options[input.selectedIndex];\n\t\t\t\t\t\t\t\tif (selected.hasAttribute('selected')) {\n\t\t\t\t\t\t\t\t\tvalue = false;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvalue = selected.value || false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (input.classList.contains('ql-active')) {\n\t\t\t\t\t\t\t\t\tvalue = false;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvalue = input.value || !input.hasAttribute('value');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this2.quill.focus();\n\n\t\t\t\t\t\t\tvar _quill$selection$getR = _this2.quill.selection.getRange(),\n\t\t\t\t\t\t\t    _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),\n\t\t\t\t\t\t\t    range = _quill$selection$getR2[0];\n\n\t\t\t\t\t\t\tif (_this2.handlers[format] != null) {\n\t\t\t\t\t\t\t\t_this2.handlers[format].call(_this2, value);\n\t\t\t\t\t\t\t} else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {\n\t\t\t\t\t\t\t\tvalue = prompt('Enter ' + format);\n\t\t\t\t\t\t\t\tif (!value) return;\n\t\t\t\t\t\t\t\t_this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_this2.quill.format(format, value, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this2.update(range);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// TODO use weakmap\n\t\t\t\t\t\tthis.controls.push([format, input]);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update(range) {\n\t\t\t\t\t\tvar formats = range == null ? {} : this.quill.getFormat(range);\n\t\t\t\t\t\tthis.controls.forEach(function (pair) {\n\t\t\t\t\t\t\tvar _pair = _slicedToArray(pair, 2),\n\t\t\t\t\t\t\t    format = _pair[0],\n\t\t\t\t\t\t\t    input = _pair[1];\n\n\t\t\t\t\t\t\tif (input.tagName === 'SELECT') {\n\t\t\t\t\t\t\t\tvar option = void 0;\n\t\t\t\t\t\t\t\tif (range == null) {\n\t\t\t\t\t\t\t\t\toption = null;\n\t\t\t\t\t\t\t\t} else if (formats[format] == null) {\n\t\t\t\t\t\t\t\t\toption = input.querySelector('option[selected]');\n\t\t\t\t\t\t\t\t} else if (!Array.isArray(formats[format])) {\n\t\t\t\t\t\t\t\t\tvar value = formats[format];\n\t\t\t\t\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\t\t\t\t\tvalue = value.replace(/\\\"/g, '\\\\\"');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toption = input.querySelector('option[value=\"' + value + '\"]');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (option == null) {\n\t\t\t\t\t\t\t\t\tinput.value = ''; // TODO make configurable?\n\t\t\t\t\t\t\t\t\tinput.selectedIndex = -1;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\toption.selected = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (range == null) {\n\t\t\t\t\t\t\t\t\tinput.classList.remove('ql-active');\n\t\t\t\t\t\t\t\t} else if (input.hasAttribute('value')) {\n\t\t\t\t\t\t\t\t\t// both being null should match (default values)\n\t\t\t\t\t\t\t\t\t// '1' should match with 1 (headers)\n\t\t\t\t\t\t\t\t\tvar isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');\n\t\t\t\t\t\t\t\t\tinput.classList.toggle('ql-active', isActive);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tinput.classList.toggle('ql-active', formats[format] != null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Toolbar;\n\t\t\t}(_module2.default);\n\n\t\t\tToolbar.DEFAULTS = {};\n\n\t\t\tfunction addButton(container, format, value) {\n\t\t\t\tvar input = document.createElement('button');\n\t\t\t\tinput.setAttribute('type', 'button');\n\t\t\t\tinput.classList.add('ql-' + format);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tinput.value = value;\n\t\t\t\t}\n\t\t\t\tcontainer.appendChild(input);\n\t\t\t}\n\n\t\t\tfunction addControls(container, groups) {\n\t\t\t\tif (!Array.isArray(groups[0])) {\n\t\t\t\t\tgroups = [groups];\n\t\t\t\t}\n\t\t\t\tgroups.forEach(function (controls) {\n\t\t\t\t\tvar group = document.createElement('span');\n\t\t\t\t\tgroup.classList.add('ql-formats');\n\t\t\t\t\tcontrols.forEach(function (control) {\n\t\t\t\t\t\tif (typeof control === 'string') {\n\t\t\t\t\t\t\taddButton(group, control);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar format = Object.keys(control)[0];\n\t\t\t\t\t\t\tvar value = control[format];\n\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\taddSelect(group, format, value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taddButton(group, format, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tcontainer.appendChild(group);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction addSelect(container, format, values) {\n\t\t\t\tvar input = document.createElement('select');\n\t\t\t\tinput.classList.add('ql-' + format);\n\t\t\t\tvalues.forEach(function (value) {\n\t\t\t\t\tvar option = document.createElement('option');\n\t\t\t\t\tif (value !== false) {\n\t\t\t\t\t\toption.setAttribute('value', value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toption.setAttribute('selected', 'selected');\n\t\t\t\t\t}\n\t\t\t\t\tinput.appendChild(option);\n\t\t\t\t});\n\t\t\t\tcontainer.appendChild(input);\n\t\t\t}\n\n\t\t\tToolbar.DEFAULTS = {\n\t\t\t\tcontainer: null,\n\t\t\t\thandlers: {\n\t\t\t\t\tclean: function clean() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\tif (range == null) return;\n\t\t\t\t\t\tif (range.length == 0) {\n\t\t\t\t\t\t\tvar formats = this.quill.getFormat();\n\t\t\t\t\t\t\tObject.keys(formats).forEach(function (name) {\n\t\t\t\t\t\t\t\t// Clean functionality in existing apps only clean inline formats\n\t\t\t\t\t\t\t\tif (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {\n\t\t\t\t\t\t\t\t\t_this3.quill.format(name, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.quill.removeFormat(range, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdirection: function direction(value) {\n\t\t\t\t\t\tvar align = this.quill.getFormat()['align'];\n\t\t\t\t\t\tif (value === 'rtl' && align == null) {\n\t\t\t\t\t\t\tthis.quill.format('align', 'right', _quill2.default.sources.USER);\n\t\t\t\t\t\t} else if (!value && align === 'right') {\n\t\t\t\t\t\t\tthis.quill.format('align', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.quill.format('direction', value, _quill2.default.sources.USER);\n\t\t\t\t\t},\n\t\t\t\t\tindent: function indent(value) {\n\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\tvar formats = this.quill.getFormat(range);\n\t\t\t\t\t\tvar indent = parseInt(formats.indent || 0);\n\t\t\t\t\t\tif (value === '+1' || value === '-1') {\n\t\t\t\t\t\t\tvar modifier = value === '+1' ? 1 : -1;\n\t\t\t\t\t\t\tif (formats.direction === 'rtl') modifier *= -1;\n\t\t\t\t\t\t\tthis.quill.format('indent', indent + modifier, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlink: function link(value) {\n\t\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\t\tvalue = prompt('Enter link URL:');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.quill.format('link', value, _quill2.default.sources.USER);\n\t\t\t\t\t},\n\t\t\t\t\tlist: function list(value) {\n\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\tvar formats = this.quill.getFormat(range);\n\t\t\t\t\t\tif (value === 'check') {\n\t\t\t\t\t\t\tif (formats['list'] === 'checked' || formats['list'] === 'unchecked') {\n\t\t\t\t\t\t\t\tthis.quill.format('list', false, _quill2.default.sources.USER);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.quill.format('list', 'unchecked', _quill2.default.sources.USER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.quill.format('list', value, _quill2.default.sources.USER);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\texports.default = Toolbar;\n\t\t\texports.addControls = addControls;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 69 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tmodule.exports = {\n\t\t\t\t'align': {\n\t\t\t\t\t'': __webpack_require__(70),\n\t\t\t\t\t'center': __webpack_require__(71),\n\t\t\t\t\t'right': __webpack_require__(72),\n\t\t\t\t\t'justify': __webpack_require__(73)\n\t\t\t\t},\n\t\t\t\t'background': __webpack_require__(74),\n\t\t\t\t'blockquote': __webpack_require__(75),\n\t\t\t\t'bold': __webpack_require__(76),\n\t\t\t\t'clean': __webpack_require__(77),\n\t\t\t\t'code': __webpack_require__(78),\n\t\t\t\t'code-block': __webpack_require__(78),\n\t\t\t\t'color': __webpack_require__(79),\n\t\t\t\t'direction': {\n\t\t\t\t\t'': __webpack_require__(80),\n\t\t\t\t\t'rtl': __webpack_require__(81)\n\t\t\t\t},\n\t\t\t\t'float': {\n\t\t\t\t\t'center': __webpack_require__(82),\n\t\t\t\t\t'full': __webpack_require__(83),\n\t\t\t\t\t'left': __webpack_require__(84),\n\t\t\t\t\t'right': __webpack_require__(85)\n\t\t\t\t},\n\t\t\t\t'formula': __webpack_require__(86),\n\t\t\t\t'header': {\n\t\t\t\t\t'1': __webpack_require__(87),\n\t\t\t\t\t'2': __webpack_require__(88)\n\t\t\t\t},\n\t\t\t\t'italic': __webpack_require__(89),\n\t\t\t\t'image': __webpack_require__(90),\n\t\t\t\t'indent': {\n\t\t\t\t\t'+1': __webpack_require__(91),\n\t\t\t\t\t'-1': __webpack_require__(92)\n\t\t\t\t},\n\t\t\t\t'link': __webpack_require__(93),\n\t\t\t\t'list': {\n\t\t\t\t\t'ordered': __webpack_require__(94),\n\t\t\t\t\t'bullet': __webpack_require__(95),\n\t\t\t\t\t'check': __webpack_require__(96)\n\t\t\t\t},\n\t\t\t\t'script': {\n\t\t\t\t\t'sub': __webpack_require__(97),\n\t\t\t\t\t'super': __webpack_require__(98)\n\t\t\t\t},\n\t\t\t\t'strike': __webpack_require__(99),\n\t\t\t\t'underline': __webpack_require__(100),\n\t\t\t\t'video': __webpack_require__(101)\n\t\t\t};\n\n\t\t\t/***/\n\t\t},\n\t\t/* 70 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 71 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 72 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 73 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 74 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <g class=\\\"ql-fill ql-color-label\\\"> <polygon points=\\\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\\\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\\\"6.817 5 6 5 6 6 6.38 6 6.817 5\\\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\\\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\\\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\\\"4.63 10 4 10 4 11 4.192 11 4.63 10\\\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\\\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\\\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\\\"12 6.868 12 6 11.62 6 12 6.868\\\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\\\"12.933 9 13 9 13 8 12.495 8 12.933 9\\\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\\\"5.5 13 9 5 12.5 13\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 75 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=4 y=5></rect> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=11 y=5></rect> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M14,8c0,4.031-3,5-3,5></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 76 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 77 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 78 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"5 7 3 9 5 11\\\"></polyline> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"13 7 15 9 13 11\\\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 79 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-color-label ql-stroke ql-transparent\\\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\\\"5.5 11 9 3 12.5 11\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 80 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"3 11 5 9 3 7 3 11\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 81 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"15 12 13 10 15 8 15 12\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 82 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 83 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 84 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 85 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\\\"translate(24 18) rotate(-180)\\\"/> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 86 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 87 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <line class=\\\"ql-stroke ql-thin\\\" x1=13.5 x2=15.5 y1=14.5 y2=14.5></line> <path class=ql-fill d=M14.5,15a0.5,0.5,0,0,1-.5-0.5V12.085l-0.276.138A0.5,0.5,0,0,1,13.053,12c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,15,11.5v3A0.5,0.5,0,0,1,14.5,15Z></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 88 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <path class=\\\"ql-stroke ql-thin\\\" d=M15.5,14.5h-2c0-.234,1.85-1.076,1.85-2.234a0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 89 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 90 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\\\"ql-even ql-fill\\\" points=\\\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\\\"></polyline> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 91 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\\\"ql-fill ql-stroke\\\" points=\\\"3 7 3 11 5 9 3 7\\\"></polyline> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 92 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"5 7 5 11 3 9 5 7\\\"></polyline> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 93 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\\\"ql-even ql-stroke\\\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\\\"ql-even ql-stroke\\\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 94 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\\\"ql-stroke ql-thin\\\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\\\"ql-stroke ql-thin\\\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\\\"ql-stroke ql-thin\\\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 95 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 96 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\\\"3 4 4 5 6 3\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\\\"3 14 4 15 6 13\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"3 9 4 10 6 8\\\"></polyline> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 97 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 98 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 99 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-stroke ql-thin\\\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 100 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 101 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 102 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n\t\t\t\treturn typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t} : function (obj) {\n\t\t\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n\t\t\t};\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _dropdown = __webpack_require__(103);\n\n\t\t\tvar _dropdown2 = _interopRequireDefault(_dropdown);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar Picker = function () {\n\t\t\t\tfunction Picker(select) {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t_classCallCheck(this, Picker);\n\n\t\t\t\t\tthis.select = select;\n\t\t\t\t\tthis.container = document.createElement('span');\n\t\t\t\t\tthis.buildPicker();\n\t\t\t\t\tthis.select.style.display = 'none';\n\t\t\t\t\tthis.select.parentNode.insertBefore(this.container, this.select);\n\t\t\t\t\tthis.label.addEventListener('mousedown', function () {\n\t\t\t\t\t\t_this.container.classList.toggle('ql-expanded');\n\t\t\t\t\t});\n\t\t\t\t\tthis.select.addEventListener('change', this.update.bind(this));\n\t\t\t\t}\n\n\t\t\t\t_createClass(Picker, [{\n\t\t\t\t\tkey: 'buildItem',\n\t\t\t\t\tvalue: function buildItem(option) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tvar item = document.createElement('span');\n\t\t\t\t\t\titem.classList.add('ql-picker-item');\n\t\t\t\t\t\tif (option.hasAttribute('value')) {\n\t\t\t\t\t\t\titem.setAttribute('data-value', option.getAttribute('value'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (option.textContent) {\n\t\t\t\t\t\t\titem.setAttribute('data-label', option.textContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\titem.addEventListener('click', function () {\n\t\t\t\t\t\t\t_this2.selectItem(item, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'buildLabel',\n\t\t\t\t\tvalue: function buildLabel() {\n\t\t\t\t\t\tvar label = document.createElement('span');\n\t\t\t\t\t\tlabel.classList.add('ql-picker-label');\n\t\t\t\t\t\tlabel.innerHTML = _dropdown2.default;\n\t\t\t\t\t\tthis.container.appendChild(label);\n\t\t\t\t\t\treturn label;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'buildOptions',\n\t\t\t\t\tvalue: function buildOptions() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\tvar options = document.createElement('span');\n\t\t\t\t\t\toptions.classList.add('ql-picker-options');\n\t\t\t\t\t\t[].slice.call(this.select.options).forEach(function (option) {\n\t\t\t\t\t\t\tvar item = _this3.buildItem(option);\n\t\t\t\t\t\t\toptions.appendChild(item);\n\t\t\t\t\t\t\tif (option.hasAttribute('selected')) {\n\t\t\t\t\t\t\t\t_this3.selectItem(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.container.appendChild(options);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'buildPicker',\n\t\t\t\t\tvalue: function buildPicker() {\n\t\t\t\t\t\tvar _this4 = this;\n\n\t\t\t\t\t\t[].slice.call(this.select.attributes).forEach(function (item) {\n\t\t\t\t\t\t\t_this4.container.setAttribute(item.name, item.value);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.container.classList.add('ql-picker');\n\t\t\t\t\t\tthis.label = this.buildLabel();\n\t\t\t\t\t\tthis.buildOptions();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'close',\n\t\t\t\t\tvalue: function close() {\n\t\t\t\t\t\tthis.container.classList.remove('ql-expanded');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'selectItem',\n\t\t\t\t\tvalue: function selectItem(item) {\n\t\t\t\t\t\tvar trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t\t\t\t\tvar selected = this.container.querySelector('.ql-selected');\n\t\t\t\t\t\tif (item === selected) return;\n\t\t\t\t\t\tif (selected != null) {\n\t\t\t\t\t\t\tselected.classList.remove('ql-selected');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item == null) return;\n\t\t\t\t\t\titem.classList.add('ql-selected');\n\t\t\t\t\t\tthis.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);\n\t\t\t\t\t\tif (item.hasAttribute('data-value')) {\n\t\t\t\t\t\t\tthis.label.setAttribute('data-value', item.getAttribute('data-value'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.label.removeAttribute('data-value');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item.hasAttribute('data-label')) {\n\t\t\t\t\t\t\tthis.label.setAttribute('data-label', item.getAttribute('data-label'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.label.removeAttribute('data-label');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (trigger) {\n\t\t\t\t\t\t\tif (typeof Event === 'function') {\n\t\t\t\t\t\t\t\tthis.select.dispatchEvent(new Event('change'));\n\t\t\t\t\t\t\t} else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {\n\t\t\t\t\t\t\t\t// IE11\n\t\t\t\t\t\t\t\tvar event = document.createEvent('Event');\n\t\t\t\t\t\t\t\tevent.initEvent('change', true, true);\n\t\t\t\t\t\t\t\tthis.select.dispatchEvent(event);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'update',\n\t\t\t\t\tvalue: function update() {\n\t\t\t\t\t\tvar option = void 0;\n\t\t\t\t\t\tif (this.select.selectedIndex > -1) {\n\t\t\t\t\t\t\tvar item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];\n\t\t\t\t\t\t\toption = this.select.options[this.select.selectedIndex];\n\t\t\t\t\t\t\tthis.selectItem(item);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.selectItem(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar isActive = option != null && option !== this.select.querySelector('option[selected]');\n\t\t\t\t\t\tthis.label.classList.toggle('ql-active', isActive);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Picker;\n\t\t\t}();\n\n\t\t\texports.default = Picker;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 103 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=ql-stroke points=\\\"7 11 9 13 11 11 7 11\\\"></polygon> <polygon class=ql-stroke points=\\\"7 7 9 5 11 7 7 7\\\"></polygon> </svg>\";\n\n\t\t\t/***/\n\t\t},\n\t\t/* 104 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _picker = __webpack_require__(102);\n\n\t\t\tvar _picker2 = _interopRequireDefault(_picker);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ColorPicker = function (_Picker) {\n\t\t\t\t_inherits(ColorPicker, _Picker);\n\n\t\t\t\tfunction ColorPicker(select, label) {\n\t\t\t\t\t_classCallCheck(this, ColorPicker);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));\n\n\t\t\t\t\t_this.label.innerHTML = label;\n\t\t\t\t\t_this.container.classList.add('ql-color-picker');\n\t\t\t\t\t[].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {\n\t\t\t\t\t\titem.classList.add('ql-primary');\n\t\t\t\t\t});\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(ColorPicker, [{\n\t\t\t\t\tkey: 'buildItem',\n\t\t\t\t\tvalue: function buildItem(option) {\n\t\t\t\t\t\tvar item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);\n\t\t\t\t\t\titem.style.backgroundColor = option.getAttribute('value') || '';\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'selectItem',\n\t\t\t\t\tvalue: function selectItem(item, trigger) {\n\t\t\t\t\t\t_get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);\n\t\t\t\t\t\tvar colorLabel = this.label.querySelector('.ql-color-label');\n\t\t\t\t\t\tvar value = item ? item.getAttribute('data-value') || '' : '';\n\t\t\t\t\t\tif (colorLabel) {\n\t\t\t\t\t\t\tif (colorLabel.tagName === 'line') {\n\t\t\t\t\t\t\t\tcolorLabel.style.stroke = value;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcolorLabel.style.fill = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn ColorPicker;\n\t\t\t}(_picker2.default);\n\n\t\t\texports.default = ColorPicker;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 105 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _picker = __webpack_require__(102);\n\n\t\t\tvar _picker2 = _interopRequireDefault(_picker);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar IconPicker = function (_Picker) {\n\t\t\t\t_inherits(IconPicker, _Picker);\n\n\t\t\t\tfunction IconPicker(select, icons) {\n\t\t\t\t\t_classCallCheck(this, IconPicker);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));\n\n\t\t\t\t\t_this.container.classList.add('ql-icon-picker');\n\t\t\t\t\t[].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {\n\t\t\t\t\t\titem.innerHTML = icons[item.getAttribute('data-value') || ''];\n\t\t\t\t\t});\n\t\t\t\t\t_this.defaultItem = _this.container.querySelector('.ql-selected');\n\t\t\t\t\t_this.selectItem(_this.defaultItem);\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(IconPicker, [{\n\t\t\t\t\tkey: 'selectItem',\n\t\t\t\t\tvalue: function selectItem(item, trigger) {\n\t\t\t\t\t\t_get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);\n\t\t\t\t\t\titem = item || this.defaultItem;\n\t\t\t\t\t\tthis.label.innerHTML = item.innerHTML;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn IconPicker;\n\t\t\t}(_picker2.default);\n\n\t\t\texports.default = IconPicker;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 106 */\n\t\t/***/function (module, exports) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar Tooltip = function () {\n\t\t\t\tfunction Tooltip(quill, boundsContainer) {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t_classCallCheck(this, Tooltip);\n\n\t\t\t\t\tthis.quill = quill;\n\t\t\t\t\tthis.boundsContainer = boundsContainer || document.body;\n\t\t\t\t\tthis.root = quill.addContainer('ql-tooltip');\n\t\t\t\t\tthis.root.innerHTML = this.constructor.TEMPLATE;\n\t\t\t\t\tthis.quill.root.addEventListener('scroll', function () {\n\t\t\t\t\t\t_this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';\n\t\t\t\t\t});\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\n\t\t\t\t_createClass(Tooltip, [{\n\t\t\t\t\tkey: 'hide',\n\t\t\t\t\tvalue: function hide() {\n\t\t\t\t\t\tthis.root.classList.add('ql-hidden');\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'position',\n\t\t\t\t\tvalue: function position(reference) {\n\t\t\t\t\t\tvar left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;\n\t\t\t\t\t\tvar top = reference.bottom + this.quill.root.scrollTop;\n\t\t\t\t\t\tthis.root.style.left = left + 'px';\n\t\t\t\t\t\tthis.root.style.top = top + 'px';\n\t\t\t\t\t\tthis.root.classList.remove('ql-flip');\n\t\t\t\t\t\tvar containerBounds = this.boundsContainer.getBoundingClientRect();\n\t\t\t\t\t\tvar rootBounds = this.root.getBoundingClientRect();\n\t\t\t\t\t\tvar shift = 0;\n\t\t\t\t\t\tif (rootBounds.right > containerBounds.right) {\n\t\t\t\t\t\t\tshift = containerBounds.right - rootBounds.right;\n\t\t\t\t\t\t\tthis.root.style.left = left + shift + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rootBounds.left < containerBounds.left) {\n\t\t\t\t\t\t\tshift = containerBounds.left - rootBounds.left;\n\t\t\t\t\t\t\tthis.root.style.left = left + shift + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rootBounds.bottom > containerBounds.bottom) {\n\t\t\t\t\t\t\tvar height = rootBounds.bottom - rootBounds.top;\n\t\t\t\t\t\t\tvar verticalShift = containerBounds.bottom - rootBounds.bottom - height;\n\t\t\t\t\t\t\tthis.root.style.top = top + verticalShift + 'px';\n\t\t\t\t\t\t\tthis.root.classList.add('ql-flip');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn shift;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'show',\n\t\t\t\t\tvalue: function show() {\n\t\t\t\t\t\tthis.root.classList.remove('ql-editing');\n\t\t\t\t\t\tthis.root.classList.remove('ql-hidden');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Tooltip;\n\t\t\t}();\n\n\t\t\texports.default = Tooltip;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 107 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.BubbleTooltip = undefined;\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _emitter = __webpack_require__(35);\n\n\t\t\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\t\t\tvar _base = __webpack_require__(108);\n\n\t\t\tvar _base2 = _interopRequireDefault(_base);\n\n\t\t\tvar _selection = __webpack_require__(40);\n\n\t\t\tvar _icons = __webpack_require__(69);\n\n\t\t\tvar _icons2 = _interopRequireDefault(_icons);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];\n\n\t\t\tvar BubbleTheme = function (_BaseTheme) {\n\t\t\t\t_inherits(BubbleTheme, _BaseTheme);\n\n\t\t\t\tfunction BubbleTheme(quill, options) {\n\t\t\t\t\t_classCallCheck(this, BubbleTheme);\n\n\t\t\t\t\tif (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n\t\t\t\t\t\toptions.modules.toolbar.container = TOOLBAR_CONFIG;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));\n\n\t\t\t\t\t_this.quill.container.classList.add('ql-bubble');\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(BubbleTheme, [{\n\t\t\t\t\tkey: 'extendToolbar',\n\t\t\t\t\tvalue: function extendToolbar(toolbar) {\n\t\t\t\t\t\tthis.tooltip = new BubbleTooltip(this.quill, this.options.bounds);\n\t\t\t\t\t\tthis.tooltip.root.appendChild(toolbar.container);\n\t\t\t\t\t\tthis.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n\t\t\t\t\t\tthis.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn BubbleTheme;\n\t\t\t}(_base2.default);\n\n\t\t\tBubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n\t\t\t\tmodules: {\n\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\thandlers: {\n\t\t\t\t\t\t\tlink: function link(value) {\n\t\t\t\t\t\t\t\tif (!value) {\n\t\t\t\t\t\t\t\t\tthis.quill.format('link', false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.quill.theme.tooltip.edit();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar BubbleTooltip = function (_BaseTooltip) {\n\t\t\t\t_inherits(BubbleTooltip, _BaseTooltip);\n\n\t\t\t\tfunction BubbleTooltip(quill, bounds) {\n\t\t\t\t\t_classCallCheck(this, BubbleTooltip);\n\n\t\t\t\t\tvar _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));\n\n\t\t\t\t\t_this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {\n\t\t\t\t\t\tif (type !== _emitter2.default.events.SELECTION_CHANGE) return;\n\t\t\t\t\t\tif (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {\n\t\t\t\t\t\t\t_this2.show();\n\t\t\t\t\t\t\t// Lock our width so we will expand beyond our offsetParent boundaries\n\t\t\t\t\t\t\t_this2.root.style.left = '0px';\n\t\t\t\t\t\t\t_this2.root.style.width = '';\n\t\t\t\t\t\t\t_this2.root.style.width = _this2.root.offsetWidth + 'px';\n\t\t\t\t\t\t\tvar lines = _this2.quill.getLines(range.index, range.length);\n\t\t\t\t\t\t\tif (lines.length === 1) {\n\t\t\t\t\t\t\t\t_this2.position(_this2.quill.getBounds(range));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar lastLine = lines[lines.length - 1];\n\t\t\t\t\t\t\t\tvar index = _this2.quill.getIndex(lastLine);\n\t\t\t\t\t\t\t\tvar length = Math.min(lastLine.length() - 1, range.index + range.length - index);\n\t\t\t\t\t\t\t\tvar _bounds = _this2.quill.getBounds(new _selection.Range(index, length));\n\t\t\t\t\t\t\t\t_this2.position(_bounds);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {\n\t\t\t\t\t\t\t_this2.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn _this2;\n\t\t\t\t}\n\n\t\t\t\t_createClass(BubbleTooltip, [{\n\t\t\t\t\tkey: 'listen',\n\t\t\t\t\tvalue: function listen() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\t_get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);\n\t\t\t\t\t\tthis.root.querySelector('.ql-close').addEventListener('click', function () {\n\t\t\t\t\t\t\t_this3.root.classList.remove('ql-editing');\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {\n\t\t\t\t\t\t\t// Let selection be restored by toolbar handlers before repositioning\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\tif (_this3.root.classList.contains('ql-hidden')) return;\n\t\t\t\t\t\t\t\tvar range = _this3.quill.getSelection();\n\t\t\t\t\t\t\t\tif (range != null) {\n\t\t\t\t\t\t\t\t\t_this3.position(_this3.quill.getBounds(range));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'cancel',\n\t\t\t\t\tvalue: function cancel() {\n\t\t\t\t\t\tthis.show();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'position',\n\t\t\t\t\tvalue: function position(reference) {\n\t\t\t\t\t\tvar shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);\n\t\t\t\t\t\tvar arrow = this.root.querySelector('.ql-tooltip-arrow');\n\t\t\t\t\t\tarrow.style.marginLeft = '';\n\t\t\t\t\t\tif (shift === 0) return shift;\n\t\t\t\t\t\tarrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn BubbleTooltip;\n\t\t\t}(_base.BaseTooltip);\n\n\t\t\tBubbleTooltip.TEMPLATE = ['<span class=\"ql-tooltip-arrow\"></span>', '<div class=\"ql-tooltip-editor\">', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-close\"></a>', '</div>'].join('');\n\n\t\t\texports.BubbleTooltip = BubbleTooltip;\n\t\t\texports.default = BubbleTheme;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 108 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = exports.BaseTooltip = undefined;\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _quillDelta = __webpack_require__(20);\n\n\t\t\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\t\t\tvar _emitter = __webpack_require__(35);\n\n\t\t\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\t\t\tvar _keyboard = __webpack_require__(52);\n\n\t\t\tvar _keyboard2 = _interopRequireDefault(_keyboard);\n\n\t\t\tvar _theme = __webpack_require__(41);\n\n\t\t\tvar _theme2 = _interopRequireDefault(_theme);\n\n\t\t\tvar _colorPicker = __webpack_require__(104);\n\n\t\t\tvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\n\t\t\tvar _iconPicker = __webpack_require__(105);\n\n\t\t\tvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\n\t\t\tvar _picker = __webpack_require__(102);\n\n\t\t\tvar _picker2 = _interopRequireDefault(_picker);\n\n\t\t\tvar _tooltip = __webpack_require__(106);\n\n\t\t\tvar _tooltip2 = _interopRequireDefault(_tooltip);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar ALIGNS = [false, 'center', 'right', 'justify'];\n\n\t\t\tvar COLORS = [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\"];\n\n\t\t\tvar FONTS = [false, 'serif', 'monospace'];\n\n\t\t\tvar HEADERS = ['1', '2', '3', false];\n\n\t\t\tvar SIZES = ['small', false, 'large', 'huge'];\n\n\t\t\tvar BaseTheme = function (_Theme) {\n\t\t\t\t_inherits(BaseTheme, _Theme);\n\n\t\t\t\tfunction BaseTheme(quill, options) {\n\t\t\t\t\t_classCallCheck(this, BaseTheme);\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));\n\n\t\t\t\t\tvar listener = function listener(e) {\n\t\t\t\t\t\tif (!document.body.contains(quill.root)) {\n\t\t\t\t\t\t\treturn document.body.removeEventListener('click', listener);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {\n\t\t\t\t\t\t\t_this.tooltip.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_this.pickers != null) {\n\t\t\t\t\t\t\t_this.pickers.forEach(function (picker) {\n\t\t\t\t\t\t\t\tif (!picker.container.contains(e.target)) {\n\t\t\t\t\t\t\t\t\tpicker.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tdocument.body.addEventListener('click', listener);\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(BaseTheme, [{\n\t\t\t\t\tkey: 'addModule',\n\t\t\t\t\tvalue: function addModule(name) {\n\t\t\t\t\t\tvar module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);\n\t\t\t\t\t\tif (name === 'toolbar') {\n\t\t\t\t\t\t\tthis.extendToolbar(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn module;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'buildButtons',\n\t\t\t\t\tvalue: function buildButtons(buttons, icons) {\n\t\t\t\t\t\tbuttons.forEach(function (button) {\n\t\t\t\t\t\t\tvar className = button.getAttribute('class') || '';\n\t\t\t\t\t\t\tclassName.split(/\\s+/).forEach(function (name) {\n\t\t\t\t\t\t\t\tif (!name.startsWith('ql-')) return;\n\t\t\t\t\t\t\t\tname = name.slice('ql-'.length);\n\t\t\t\t\t\t\t\tif (icons[name] == null) return;\n\t\t\t\t\t\t\t\tif (name === 'direction') {\n\t\t\t\t\t\t\t\t\tbutton.innerHTML = icons[name][''] + icons[name]['rtl'];\n\t\t\t\t\t\t\t\t} else if (typeof icons[name] === 'string') {\n\t\t\t\t\t\t\t\t\tbutton.innerHTML = icons[name];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar value = button.value || '';\n\t\t\t\t\t\t\t\t\tif (value != null && icons[name][value]) {\n\t\t\t\t\t\t\t\t\t\tbutton.innerHTML = icons[name][value];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'buildPickers',\n\t\t\t\t\tvalue: function buildPickers(selects, icons) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tthis.pickers = selects.map(function (select) {\n\t\t\t\t\t\t\tif (select.classList.contains('ql-align')) {\n\t\t\t\t\t\t\t\tif (select.querySelector('option') == null) {\n\t\t\t\t\t\t\t\t\tfillSelect(select, ALIGNS);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn new _iconPicker2.default(select, icons.align);\n\t\t\t\t\t\t\t} else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {\n\t\t\t\t\t\t\t\tvar format = select.classList.contains('ql-background') ? 'background' : 'color';\n\t\t\t\t\t\t\t\tif (select.querySelector('option') == null) {\n\t\t\t\t\t\t\t\t\tfillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn new _colorPicker2.default(select, icons[format]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (select.querySelector('option') == null) {\n\t\t\t\t\t\t\t\t\tif (select.classList.contains('ql-font')) {\n\t\t\t\t\t\t\t\t\t\tfillSelect(select, FONTS);\n\t\t\t\t\t\t\t\t\t} else if (select.classList.contains('ql-header')) {\n\t\t\t\t\t\t\t\t\t\tfillSelect(select, HEADERS);\n\t\t\t\t\t\t\t\t\t} else if (select.classList.contains('ql-size')) {\n\t\t\t\t\t\t\t\t\t\tfillSelect(select, SIZES);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn new _picker2.default(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar update = function update() {\n\t\t\t\t\t\t\t_this2.pickers.forEach(function (picker) {\n\t\t\t\t\t\t\t\tpicker.update();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.quill.on(_emitter2.default.events.SELECTION_CHANGE, update).on(_emitter2.default.events.SCROLL_OPTIMIZE, update);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn BaseTheme;\n\t\t\t}(_theme2.default);\n\n\t\t\tBaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {\n\t\t\t\tmodules: {\n\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\thandlers: {\n\t\t\t\t\t\t\tformula: function formula() {\n\t\t\t\t\t\t\t\tthis.quill.theme.tooltip.edit('formula');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timage: function image() {\n\t\t\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\t\t\tvar fileInput = this.container.querySelector('input.ql-image[type=file]');\n\t\t\t\t\t\t\t\tif (fileInput == null) {\n\t\t\t\t\t\t\t\t\tfileInput = document.createElement('input');\n\t\t\t\t\t\t\t\t\tfileInput.setAttribute('type', 'file');\n\t\t\t\t\t\t\t\t\tfileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon, image/svg+xml');\n\t\t\t\t\t\t\t\t\tfileInput.classList.add('ql-image');\n\t\t\t\t\t\t\t\t\tfileInput.addEventListener('change', function () {\n\t\t\t\t\t\t\t\t\t\tif (fileInput.files != null && fileInput.files[0] != null) {\n\t\t\t\t\t\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\t\t\t\t\t\treader.onload = function (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar range = _this3.quill.getSelection(true);\n\t\t\t\t\t\t\t\t\t\t\t\t_this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t\t\t\tfileInput.value = \"\";\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\treader.readAsDataURL(fileInput.files[0]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tthis.container.appendChild(fileInput);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfileInput.click();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvideo: function video() {\n\t\t\t\t\t\t\t\tthis.quill.theme.tooltip.edit('video');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar BaseTooltip = function (_Tooltip) {\n\t\t\t\t_inherits(BaseTooltip, _Tooltip);\n\n\t\t\t\tfunction BaseTooltip(quill, boundsContainer) {\n\t\t\t\t\t_classCallCheck(this, BaseTooltip);\n\n\t\t\t\t\tvar _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));\n\n\t\t\t\t\t_this4.textbox = _this4.root.querySelector('input[type=\"text\"]');\n\t\t\t\t\t_this4.listen();\n\t\t\t\t\treturn _this4;\n\t\t\t\t}\n\n\t\t\t\t_createClass(BaseTooltip, [{\n\t\t\t\t\tkey: 'listen',\n\t\t\t\t\tvalue: function listen() {\n\t\t\t\t\t\tvar _this5 = this;\n\n\t\t\t\t\t\tthis.textbox.addEventListener('keydown', function (event) {\n\t\t\t\t\t\t\tif (_keyboard2.default.match(event, 'enter')) {\n\t\t\t\t\t\t\t\t_this5.save();\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t} else if (_keyboard2.default.match(event, 'escape')) {\n\t\t\t\t\t\t\t\t_this5.cancel();\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'cancel',\n\t\t\t\t\tvalue: function cancel() {\n\t\t\t\t\t\tthis.hide();\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'edit',\n\t\t\t\t\tvalue: function edit() {\n\t\t\t\t\t\tvar mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';\n\t\t\t\t\t\tvar preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\t\t\t\t\t\tthis.root.classList.remove('ql-hidden');\n\t\t\t\t\t\tthis.root.classList.add('ql-editing');\n\t\t\t\t\t\tif (preview != null) {\n\t\t\t\t\t\t\tthis.textbox.value = preview;\n\t\t\t\t\t\t} else if (mode !== this.root.getAttribute('data-mode')) {\n\t\t\t\t\t\t\tthis.textbox.value = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.position(this.quill.getBounds(this.quill.selection.savedRange));\n\t\t\t\t\t\tthis.textbox.select();\n\t\t\t\t\t\tthis.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');\n\t\t\t\t\t\tthis.root.setAttribute('data-mode', mode);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'restoreFocus',\n\t\t\t\t\tvalue: function restoreFocus() {\n\t\t\t\t\t\tvar scrollTop = this.quill.root.scrollTop;\n\t\t\t\t\t\tthis.quill.focus();\n\t\t\t\t\t\tthis.quill.root.scrollTop = scrollTop;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'save',\n\t\t\t\t\tvalue: function save() {\n\t\t\t\t\t\tvar value = this.textbox.value;\n\t\t\t\t\t\tswitch (this.root.getAttribute('data-mode')) {\n\t\t\t\t\t\t\tcase 'link':\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar scrollTop = this.quill.root.scrollTop;\n\t\t\t\t\t\t\t\t\tif (this.linkRange) {\n\t\t\t\t\t\t\t\t\t\tthis.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t\tdelete this.linkRange;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.restoreFocus();\n\t\t\t\t\t\t\t\t\t\tthis.quill.format('link', value, _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.quill.root.scrollTop = scrollTop;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'video':\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar match = value.match(/^(https?):\\/\\/(www\\.)?youtube\\.com\\/watch.*v=([a-zA-Z0-9_-]+)/) || value.match(/^(https?):\\/\\/(www\\.)?youtu\\.be\\/([a-zA-Z0-9_-]+)/);\n\t\t\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\t\t\tvalue = match[1] + '://www.youtube.com/embed/' + match[3] + '?showinfo=0';\n\t\t\t\t\t\t\t\t\t} else if (match = value.match(/^(https?):\\/\\/(www\\.)?vimeo\\.com\\/(\\d+)/)) {\n\t\t\t\t\t\t\t\t\t\t// eslint-disable-line no-cond-assign\n\t\t\t\t\t\t\t\t\t\tvalue = match[1] + '://player.vimeo.com/video/' + match[3] + '/';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} // eslint-disable-next-line no-fallthrough\n\t\t\t\t\t\t\tcase 'formula':\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar range = this.quill.getSelection(true);\n\t\t\t\t\t\t\t\t\tvar index = range.index + range.length;\n\t\t\t\t\t\t\t\t\tif (range != null) {\n\t\t\t\t\t\t\t\t\t\tthis.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t\tif (this.root.getAttribute('data-mode') === 'formula') {\n\t\t\t\t\t\t\t\t\t\t\tthis.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tthis.quill.setSelection(index + 2, _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.textbox.value = '';\n\t\t\t\t\t\tthis.hide();\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn BaseTooltip;\n\t\t\t}(_tooltip2.default);\n\n\t\t\tfunction fillSelect(select, values) {\n\t\t\t\tvar defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t\t\t\tvalues.forEach(function (value) {\n\t\t\t\t\tvar option = document.createElement('option');\n\t\t\t\t\tif (value === defaultValue) {\n\t\t\t\t\t\toption.setAttribute('selected', 'selected');\n\t\t\t\t\t} else {\n\t\t\t\t\t\toption.setAttribute('value', value);\n\t\t\t\t\t}\n\t\t\t\t\tselect.appendChild(option);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\texports.BaseTooltip = BaseTooltip;\n\t\t\texports.default = BaseTheme;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 109 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _slicedToArray = function () {\n\t\t\t\tfunction sliceIterator(arr, i) {\n\t\t\t\t\tvar _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t\t\t\t\t\tfor (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t\t\t\t\t_arr.push(_s.value);if (i && _arr.length === i) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_d = true;_e = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_n && _i[\"return\"]) _i[\"return\"]();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_d) throw _e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}return _arr;\n\t\t\t\t}return function (arr, i) {\n\t\t\t\t\tif (Array.isArray(arr)) {\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\t} else if (Symbol.iterator in Object(arr)) {\n\t\t\t\t\t\treturn sliceIterator(arr, i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _get = function get(object, property, receiver) {\n\t\t\t\tif (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n\t\t\t\t\tvar parent = Object.getPrototypeOf(object);if (parent === null) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn get(parent, property, receiver);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"value\" in desc) {\n\t\t\t\t\treturn desc.value;\n\t\t\t\t} else {\n\t\t\t\t\tvar getter = desc.get;if (getter === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}return getter.call(receiver);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tvar _extend = __webpack_require__(25);\n\n\t\t\tvar _extend2 = _interopRequireDefault(_extend);\n\n\t\t\tvar _emitter = __webpack_require__(35);\n\n\t\t\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\t\t\tvar _base = __webpack_require__(108);\n\n\t\t\tvar _base2 = _interopRequireDefault(_base);\n\n\t\t\tvar _link = __webpack_require__(60);\n\n\t\t\tvar _link2 = _interopRequireDefault(_link);\n\n\t\t\tvar _selection = __webpack_require__(40);\n\n\t\t\tvar _icons = __webpack_require__(69);\n\n\t\t\tvar _icons2 = _interopRequireDefault(_icons);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _possibleConstructorReturn(self, call) {\n\t\t\t\tif (!self) {\n\t\t\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t\t\t}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t\t\t}\n\n\t\t\tfunction _inherits(subClass, superClass) {\n\t\t\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));\n\t\t\t\t}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t\t\t}\n\n\t\t\tvar TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];\n\n\t\t\tvar SnowTheme = function (_BaseTheme) {\n\t\t\t\t_inherits(SnowTheme, _BaseTheme);\n\n\t\t\t\tfunction SnowTheme(quill, options) {\n\t\t\t\t\t_classCallCheck(this, SnowTheme);\n\n\t\t\t\t\tif (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n\t\t\t\t\t\toptions.modules.toolbar.container = TOOLBAR_CONFIG;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));\n\n\t\t\t\t\t_this.quill.container.classList.add('ql-snow');\n\t\t\t\t\treturn _this;\n\t\t\t\t}\n\n\t\t\t\t_createClass(SnowTheme, [{\n\t\t\t\t\tkey: 'extendToolbar',\n\t\t\t\t\tvalue: function extendToolbar(toolbar) {\n\t\t\t\t\t\ttoolbar.container.classList.add('ql-snow');\n\t\t\t\t\t\tthis.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n\t\t\t\t\t\tthis.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n\t\t\t\t\t\tthis.tooltip = new SnowTooltip(this.quill, this.options.bounds);\n\t\t\t\t\t\tif (toolbar.container.querySelector('.ql-link')) {\n\t\t\t\t\t\t\tthis.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {\n\t\t\t\t\t\t\t\ttoolbar.handlers['link'].call(toolbar, !context.format.link);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn SnowTheme;\n\t\t\t}(_base2.default);\n\n\t\t\tSnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n\t\t\t\tmodules: {\n\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\thandlers: {\n\t\t\t\t\t\t\tlink: function link(value) {\n\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\tvar range = this.quill.getSelection();\n\t\t\t\t\t\t\t\t\tif (range == null || range.length == 0) return;\n\t\t\t\t\t\t\t\t\tvar preview = this.quill.getText(range);\n\t\t\t\t\t\t\t\t\tif (/^\\S+@\\S+\\.\\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {\n\t\t\t\t\t\t\t\t\t\tpreview = 'mailto:' + preview;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar tooltip = this.quill.theme.tooltip;\n\t\t\t\t\t\t\t\t\ttooltip.edit('link', preview);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.quill.format('link', false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar SnowTooltip = function (_BaseTooltip) {\n\t\t\t\t_inherits(SnowTooltip, _BaseTooltip);\n\n\t\t\t\tfunction SnowTooltip(quill, bounds) {\n\t\t\t\t\t_classCallCheck(this, SnowTooltip);\n\n\t\t\t\t\tvar _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));\n\n\t\t\t\t\t_this2.preview = _this2.root.querySelector('a.ql-preview');\n\t\t\t\t\treturn _this2;\n\t\t\t\t}\n\n\t\t\t\t_createClass(SnowTooltip, [{\n\t\t\t\t\tkey: 'listen',\n\t\t\t\t\tvalue: function listen() {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\t_get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);\n\t\t\t\t\t\tthis.root.querySelector('a.ql-action').addEventListener('click', function (event) {\n\t\t\t\t\t\t\tif (_this3.root.classList.contains('ql-editing')) {\n\t\t\t\t\t\t\t\t_this3.save();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_this3.edit('link', _this3.preview.textContent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.root.querySelector('a.ql-remove').addEventListener('click', function (event) {\n\t\t\t\t\t\t\tif (_this3.linkRange != null) {\n\t\t\t\t\t\t\t\t_this3.restoreFocus();\n\t\t\t\t\t\t\t\t_this3.quill.formatText(_this3.linkRange, 'link', false, _emitter2.default.sources.USER);\n\t\t\t\t\t\t\t\tdelete _this3.linkRange;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t_this3.hide();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {\n\t\t\t\t\t\t\tif (range == null) return;\n\t\t\t\t\t\t\tif (range.length === 0 && source === _emitter2.default.sources.USER) {\n\t\t\t\t\t\t\t\tvar _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),\n\t\t\t\t\t\t\t\t    _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n\t\t\t\t\t\t\t\t    link = _quill$scroll$descend2[0],\n\t\t\t\t\t\t\t\t    offset = _quill$scroll$descend2[1];\n\n\t\t\t\t\t\t\t\tif (link != null) {\n\t\t\t\t\t\t\t\t\t_this3.linkRange = new _selection.Range(range.index - offset, link.length());\n\t\t\t\t\t\t\t\t\tvar preview = _link2.default.formats(link.domNode);\n\t\t\t\t\t\t\t\t\t_this3.preview.textContent = preview;\n\t\t\t\t\t\t\t\t\t_this3.preview.setAttribute('href', preview);\n\t\t\t\t\t\t\t\t\t_this3.show();\n\t\t\t\t\t\t\t\t\t_this3.position(_this3.quill.getBounds(_this3.linkRange));\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdelete _this3.linkRange;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this3.hide();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'show',\n\t\t\t\t\tvalue: function show() {\n\t\t\t\t\t\t_get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);\n\t\t\t\t\t\tthis.root.removeAttribute('data-mode');\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn SnowTooltip;\n\t\t\t}(_base.BaseTooltip);\n\n\t\t\tSnowTooltip.TEMPLATE = ['<a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a>', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-action\"></a>', '<a class=\"ql-remove\"></a>'].join('');\n\n\t\t\texports.default = SnowTheme;\n\n\t\t\t/***/\n\t\t}\n\t\t/******/])\n\t);\n});\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer, __webpack_require__(8)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_quill__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_quill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_quill__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar defaultToolbar = [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{ 'list': 'ordered' }, { 'list': 'bullet' }], [{ 'indent': '-1' }, { 'indent': '+1' }], [{ 'header': [1, 2, 3, 4, 5, 6, false] }], [{ 'color': [] }, { 'background': [] }], [{ 'font': [] }], [{ 'align': [] }], ['clean']];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = {\n  name: 'vue-editor',\n  props: {\n    editorContent: String,\n    placeholder: String,\n    buttonText: String,\n    editorToolbar: Array,\n    useSaveButton: {\n      type: Boolean,\n      default: function _default() {\n        return true;\n      }\n    },\n    showPreview: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      quill: null,\n      editor: null,\n      toolbar: this.editorToolbar ? this.editorToolbar : defaultToolbar\n    };\n  },\n\n  mounted: function mounted() {\n    var vm = this;\n\n    vm.quill = new __WEBPACK_IMPORTED_MODULE_0_quill___default.a(vm.$refs.quillContainer, {\n      modules: {\n        toolbar: this.toolbar\n      },\n      placeholder: this.placeholder ? this.placeholder : '',\n      theme: 'snow'\n    });\n\n    vm.editor = document.querySelector('.ql-editor');\n    // this.editor.innerHTML = this.editorContent\n\n    if (vm.$refs.livePreview !== undefined || false) {\n\n      vm.quill.on('text-change', function () {\n        vm.$refs.livePreview.innerHTML = vm.editor.innerHTML;\n        vm.$emit('editor-updated', vm.editor.innerHTML);\n      });\n    } else {\n\n      vm.quill.on('text-change', function () {\n        vm.$emit('editor-updated', vm.editor.innerHTML);\n      });\n    }\n  },\n\n  watch: {\n    editorContent: function editorContent() {\n      this.editor.innerHTML = this.editorContent;\n    }\n  },\n\n  methods: {\n    saveContent: function saveContent(value) {\n      this.$emit('save-content', this.editor.innerHTML);\n    }\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVnVlRWRpdG9yLnZ1ZT82NGM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7QUFFQSxxQkFDQSxpQ0FDQSwwQkFFQSxpREFFQSw4Q0FDQSx5Q0FFQSw2Q0FDQSxrQkFDQSxtQkFFQSxRQUNBOztBQUVBO1FBRUE7O21CQUVBO2lCQUNBO2dCQUNBO21CQUNBOztZQUVBO21DQUNBO2VBQ0E7QUFFQTtBQUxBOztZQU9BO21DQUNBO2VBQ0E7QUFJQTtBQVBBO0FBWEE7O3dCQW1CQTs7YUFFQTtjQUNBO3lEQUVBO0FBSkE7QUFNQTs7OEJBQ0E7YUFFQTs7OztzQkFJQTtBQUZBO3lEQUdBO2FBR0E7QUFQQTs7dUNBUUE7QUFFQTs7cURBRUE7OzZDQUNBO21EQUNBOzZDQUNBO0FBRUE7V0FFQTs7NkNBQ0E7NkNBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs0Q0FFQTttQ0FDQTtBQUdBO0FBTEE7Ozs2Q0FPQTs2Q0FDQTtBQUVBO0FBSkE7QUFqRUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cInF1aWxsV3JhcHBlclwiPlxuXG4gICAgPGRpdiByZWY9XCJxdWlsbENvbnRhaW5lclwiIGlkPVwicXVpbGwtY29udGFpbmVyXCI+e3tlZGl0b3JDb250ZW50fX08L2Rpdj5cblxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgdi1pZj1cInVzZVNhdmVCdXR0b25cIlxuICAgICAgICBAY2xpY2s9XCJzYXZlQ29udGVudFwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiYnV0dG9uVGV4dFwiPlNhdmUgQ29udGVudDwvc2xvdD5cbiAgICAgICAgPCEtLSB7eyBidXR0b25UZXh0ID8gYnV0dG9uVGV4dCA6ICdTYXZlIENvbnRlbnQnIH19IC0tPlxuICAgICAgPC9idXR0b24+XG5cbiAgICA8ZGl2IHYtaWY9XCJzaG93UHJldmlld1wiIHJlZj1cImxpdmVQcmV2aWV3XCIgY2xhc3M9XCJxbC1lZGl0b3JcIj48L2Rpdj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnXG5cbnZhciBkZWZhdWx0VG9vbGJhciA9IFtcbiAgWydib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnc3RyaWtlJ10sXG4gIFsnYmxvY2txdW90ZScsICdjb2RlLWJsb2NrJ10sXG5cbiAgW3sgJ2xpc3QnOiAnb3JkZXJlZCd9LCB7ICdsaXN0JzogJ2J1bGxldCcgfV0sXG5cbiAgW3sgJ2luZGVudCc6ICctMSd9LCB7ICdpbmRlbnQnOiAnKzEnIH1dLFxuICBbeyAnaGVhZGVyJzogWzEsIDIsIDMsIDQsIDUsIDYsIGZhbHNlXSB9XSxcblxuICBbeyAnY29sb3InOiBbXSB9LCB7ICdiYWNrZ3JvdW5kJzogW10gfV0sXG4gIFt7ICdmb250JzogW10gfV0sXG4gIFt7ICdhbGlnbic6IFtdIH1dLFxuXG4gIFsnY2xlYW4nXVxuXVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2dWUtZWRpdG9yJyxcbiAgcHJvcHM6IHtcbiAgICBlZGl0b3JDb250ZW50OiBTdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICBidXR0b25UZXh0OiBTdHJpbmcsXG4gICAgZWRpdG9yVG9vbGJhcjogQXJyYXksXG4gICAgdXNlU2F2ZUJ1dHRvbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQgKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd1ByZXZpZXc6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0ICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcXVpbGw6IG51bGwsXG4gICAgICBlZGl0b3I6IG51bGwsXG4gICAgICB0b29sYmFyOiB0aGlzLmVkaXRvclRvb2xiYXIgPyB0aGlzLmVkaXRvclRvb2xiYXIgOiBkZWZhdWx0VG9vbGJhclxuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzXG5cbiAgICB2bS5xdWlsbCA9IG5ldyBRdWlsbCh2bS4kcmVmcy5xdWlsbENvbnRhaW5lciwge1xuICAgICAgbW9kdWxlczoge1xuICAgICAgICB0b29sYmFyOiB0aGlzLnRvb2xiYXJcbiAgICAgIH0sXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5wbGFjZWhvbGRlciA/IHRoaXMucGxhY2Vob2xkZXIgOiAnJyxcbiAgICAgIHRoZW1lOiAnc25vdydcbiAgICB9KTtcblxuICAgIHZtLmVkaXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5xbC1lZGl0b3InKVxuICAgIC8vIHRoaXMuZWRpdG9yLmlubmVySFRNTCA9IHRoaXMuZWRpdG9yQ29udGVudFxuXG4gICAgaWYgKCB2bS4kcmVmcy5saXZlUHJldmlldyAhPT0gdW5kZWZpbmVkIHx8IGZhbHNlICkge1xuXG4gICAgICB2bS5xdWlsbC5vbigndGV4dC1jaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdm0uJHJlZnMubGl2ZVByZXZpZXcuaW5uZXJIVE1MID0gdm0uZWRpdG9yLmlubmVySFRNTFxuICAgICAgICB2bS4kZW1pdCgnZWRpdG9yLXVwZGF0ZWQnLCB2bS5lZGl0b3IuaW5uZXJIVE1MKVxuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICB2bS5xdWlsbC5vbigndGV4dC1jaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdm0uJGVtaXQoJ2VkaXRvci11cGRhdGVkJywgdm0uZWRpdG9yLmlubmVySFRNTClcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgZWRpdG9yQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5lZGl0b3IuaW5uZXJIVE1MID0gdGhpcy5lZGl0b3JDb250ZW50XG4gICAgfVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBzYXZlQ29udGVudDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdzYXZlLWNvbnRlbnQnLCB0aGlzLmVkaXRvci5pbm5lckhUTUwpXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cbjxzdHlsZSBzdHlsZT1cInNjb3BlZFwiPlxuQGltcG9ydCAnfnF1aWxsL2Rpc3QvcXVpbGwuY29yZS5jc3MnO1xuQGltcG9ydCAnfnF1aWxsL2Rpc3QvcXVpbGwuc25vdy5jc3MnO1xuXG4jcXVpbGwtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiA1MDBweDtcbn1cblxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBWdWVFZGl0b3IudnVlP2VlYWJhODA4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function () {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0QsTUFBVCxFQUFpQjtBQUNqQyxLQUFHLENBQUNBLE9BQU9FLGVBQVgsRUFBNEI7QUFDM0JGLFNBQU9HLFNBQVAsR0FBbUIsWUFBVyxDQUFFLENBQWhDO0FBQ0FILFNBQU9JLEtBQVAsR0FBZSxFQUFmO0FBQ0E7QUFDQSxNQUFHLENBQUNKLE9BQU9LLFFBQVgsRUFBcUJMLE9BQU9LLFFBQVAsR0FBa0IsRUFBbEI7QUFDckJDLFNBQU9DLGNBQVAsQ0FBc0JQLE1BQXRCLEVBQThCLFFBQTlCLEVBQXdDO0FBQ3ZDUSxlQUFZLElBRDJCO0FBRXZDQyxRQUFLLGVBQVc7QUFDZixXQUFPVCxPQUFPVSxDQUFkO0FBQ0E7QUFKc0MsR0FBeEM7QUFNQUosU0FBT0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsSUFBOUIsRUFBb0M7QUFDbkNRLGVBQVksSUFEdUI7QUFFbkNDLFFBQUssZUFBVztBQUNmLFdBQU9ULE9BQU9XLENBQWQ7QUFDQTtBQUprQyxHQUFwQztBQU1BWCxTQUFPRSxlQUFQLEdBQXlCLENBQXpCO0FBQ0E7QUFDRCxRQUFPRixNQUFQO0FBQ0EsQ0FyQkQiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WdWVFZGl0b3IudnVlP2I0MmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9sb2FkZXIuanM/e1wib21pdFwiOjAsXCJyZW1vdmVcIjp0cnVlfSEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTZkZmQ0MGQ4IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvVnVlRWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgc2NvcGVJZCxcbiAgY3NzTW9kdWxlc1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgLy8gaW5qZWN0IGNzc01vZHVsZXNcbiAgaWYgKGNzc01vZHVsZXMpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSBvcHRpb25zLmNvbXB1dGVkIHx8IChvcHRpb25zLmNvbXB1dGVkID0ge30pXG4gICAgT2JqZWN0LmtleXMoY3NzTW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbW9kdWxlID0gY3NzTW9kdWxlc1trZXldXG4gICAgICBjb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"quillWrapper\"\n    }\n  }, [_c('div', {\n    ref: \"quillContainer\",\n    attrs: {\n      \"id\": \"quill-container\"\n    }\n  }, [_vm._v(_vm._s(_vm.editorContent))]), _vm._v(\" \"), (_vm.useSaveButton) ? _c('button', {\n    staticClass: \"save-button\",\n    on: {\n      \"click\": _vm.saveContent\n    }\n  }, [_vm._t(\"buttonText\", [_vm._v(\"Save Content\")])], 2) : _vm._e(), _vm._v(\" \"), (_vm.showPreview) ? _c('div', {\n    ref: \"livePreview\",\n    staticClass: \"ql-editor\"\n  }) : _vm._e()])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-6dfd40d8\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WdWVFZGl0b3IudnVlP2ZkNjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwicXVpbGxXcmFwcGVyXCJcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJxdWlsbENvbnRhaW5lclwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwicXVpbGwtY29udGFpbmVyXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5lZGl0b3JDb250ZW50KSldKSwgX3ZtLl92KFwiIFwiKSwgKF92bS51c2VTYXZlQnV0dG9uKSA/IF9jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic2F2ZS1idXR0b25cIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uc2F2ZUNvbnRlbnRcbiAgICB9XG4gIH0sIFtfdm0uX3QoXCJidXR0b25UZXh0XCIsIFtfdm0uX3YoXCJTYXZlIENvbnRlbnRcIildKV0sIDIpIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksIChfdm0uc2hvd1ByZXZpZXcpID8gX2MoJ2RpdicsIHtcbiAgICByZWY6IFwibGl2ZVByZXZpZXdcIixcbiAgICBzdGF0aWNDbGFzczogXCJxbC1lZGl0b3JcIlxuICB9KSA6IF92bS5fZSgpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNmRmZDQwZDhcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTZkZmQ0MGQ4IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9WdWVFZGl0b3IudnVlXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_VueEditor_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_VueEditor_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_VueEditor_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"VueEditor\", function() { return __WEBPACK_IMPORTED_MODULE_0__components_VueEditor_vue___default.a; });\n/* harmony export (immutable) */ __webpack_exports__[\"install\"] = install;\n\n\n// Install the components\nfunction install(Vue) {\n  Vue.component('vue-editor', __WEBPACK_IMPORTED_MODULE_0__components_VueEditor_vue___default.a);\n  /* -- Add more components here -- */\n}\n\n// Expose the components\n\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nvar plugin = {\n  /* eslint-disable no-undef */\n  version: \"1.0.99\",\n  install: install\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = plugin;\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwicGx1Z2luIiwidmVyc2lvbiIsIkdsb2JhbFZ1ZSIsIndpbmRvdyIsImdsb2JhbCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNPLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQzVCQSxNQUFJQyxTQUFKLENBQWMsWUFBZCxFQUE0QixpRUFBNUI7QUFDQTtBQUNEOztBQUVEO0FBQ0E7O0FBS0E7QUFDQTs7QUFFQTtBQUNBLElBQU1DLFNBQVM7QUFDYjtBQUNBQyxXQUFTLFFBRkk7QUFHYko7QUFIYSxDQUFmOztBQU1BLDhEQUFlRyxNQUFmOztBQUVBO0FBQ0EsSUFBSUUsWUFBWSxJQUFoQjtBQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsY0FBWUMsT0FBT0wsR0FBbkI7QUFDRCxDQUZELE1BRU8sSUFBSSxPQUFPTSxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDRixjQUFZRSxPQUFPTixHQUFuQjtBQUNEO0FBQ0QsSUFBSUksU0FBSixFQUFlO0FBQ2JBLFlBQVVHLEdBQVYsQ0FBY0wsTUFBZDtBQUNELEMiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlRWRpdG9yIGZyb20gJy4vY29tcG9uZW50cy9WdWVFZGl0b3IudnVlJ1xuXG4vLyBJbnN0YWxsIHRoZSBjb21wb25lbnRzXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCAoVnVlKSB7XG4gIFZ1ZS5jb21wb25lbnQoJ3Z1ZS1lZGl0b3InLCBWdWVFZGl0b3IpXG4gIC8qIC0tIEFkZCBtb3JlIGNvbXBvbmVudHMgaGVyZSAtLSAqL1xufVxuXG4vLyBFeHBvc2UgdGhlIGNvbXBvbmVudHNcbmV4cG9ydCB7XG4gIFZ1ZUVkaXRvcixcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8qIC0tIFBsdWdpbiBkZWZpbml0aW9uICYgQXV0by1pbnN0YWxsIC0tICovXG4vKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gbW9kaWZ5IHRoZSBjb2RlIGJlbG93ICovXG5cbi8vIFBsdWdpblxuY29uc3QgcGx1Z2luID0ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICB2ZXJzaW9uOiBWRVJTSU9OLFxuICBpbnN0YWxsLFxufVxuXG5leHBvcnQgZGVmYXVsdCBwbHVnaW5cblxuLy8gQXV0by1pbnN0YWxsXG5sZXQgR2xvYmFsVnVlID0gbnVsbFxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIEdsb2JhbFZ1ZSA9IHdpbmRvdy5WdWVcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gZ2xvYmFsLlZ1ZVxufVxuaWYgKEdsb2JhbFZ1ZSkge1xuICBHbG9iYWxWdWUudXNlKHBsdWdpbilcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ]);
});